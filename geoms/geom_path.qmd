---
title: "geom_path()"
format:
  html:
    toc: true
    code-fold: show
execute:
  warning: false
  message: false
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(lubridate)
library(scales)
library(knitr)
library(kableExtra)
library(colorblindr)
library(downlit)
# options ----
options(
  repos = "https://cloud.r-project.org",
  dplyr.print_min = 6, 
  dplyr.print_max = 6, 
  scipen = 9999)
# fonts ----
library(extrafont)
library(sysfonts)
# import font
extrafont::font_import(
    paths = "../assets/Ubuntu/",
    prompt = FALSE)
# add font
sysfonts::font_add(
    family =  "Ubuntu", 
    regular = "../assets/Ubuntu/Ubuntu-Regular.ttf")
# use font
showtext::showtext_auto()
# add theme
source("../R/theme_ggp2g.R")
# set theme
ggplot2::theme_set(theme_ggp2g(
    base_size = 16))
# install data packages ----
install.packages("palmerpenguins")
```


:::: {.callout-tip collapse="false" icon=false}
## Geom info
::: {style="font-size: 1.25em; color: #38B44A;"}
**What does this geom do?**
:::

The `geom_path()` draws lines to connect values. The arguments in this functions control the shape, size, and appearance of the connections. 


<br>

```{r}
#| label: full_code_display
#| eval: true
#| echo: false
#| warning: false
#| message: false
#| out-width: '100%'
#| fig-align: right
library(palmerpenguins) 
library(ggplot2)
library(patchwork)

show_geom_path <- function() {

  ggp2_butt_bevel <- ggplot(data = economics,
    mapping = aes(x = date, y = unemploy)) +
    geom_path(
      size = 3.2,
      lineend = "butt",
      linejoin = "bevel"
    ) +
        theme_void() + 
    theme(legend.text = element_blank(),
         legend.title = element_blank())
  
  ggp2_butt_round <- ggplot(data = economics,
    mapping = aes(x = date, y = unemploy)) +
    geom_path(
      size = 3.2,
      lineend = "butt",
      linejoin = "round"
    ) +
        theme_void() + 
    theme(legend.text = element_blank(),
         legend.title = element_blank())
  
  ggp2_butt_mitre <- ggplot(data = economics,
    mapping = aes(x = date, y = unemploy)) +
    geom_path(
      size = 3.2,
      lineend = "butt",
      linejoin = "mitre"
    ) +
        theme_void() + 
    theme(legend.text = element_blank(),
         legend.title = element_blank())
  
  ggp2_round_bevel <- ggplot(data = economics,
    mapping = aes(x = date, y = unemploy)) +
    geom_path(
      size = 3.2,
      lineend = "round",
      linejoin = "bevel"
    ) +
    theme_void() + 
    theme(legend.text = element_blank(),
         legend.title = element_blank())
  
  ggp2_round_round <- ggplot(data = economics,
    mapping = aes(x = date, y = unemploy)) +
    geom_path(
      size = 3.2,
      lineend = "round",
      linejoin = "round"
    ) +
    theme_void() + 
    theme(legend.text = element_blank(),
         legend.title = element_blank())
  
  ggp2_round_mitre <- ggplot(data = economics,
    mapping = aes(x = date, y = unemploy)) +
    geom_path(
      size = 3.2,
      lineend = "round",
      linejoin = "mitre"
    ) +
    theme_void() + 
    theme(legend.text = element_blank(),
         legend.title = element_blank())
  
  ggp2_square_bevel <- ggplot(data = economics,
    mapping = aes(x = date, y = unemploy)) +
    geom_path(
      size = 3.2,
      lineend = "square",
      linejoin = "bevel"
    ) +
    theme_void() + 
    theme(legend.text = element_blank(),
         legend.title = element_blank())
  
  ggp2_square_round <- ggplot(data = economics,
    mapping = aes(x = date, y = unemploy)) +
    geom_path(
      size = 3.2,
      lineend = "square",
      linejoin = "round"
    ) +
    theme_void() + 
    theme(legend.text = element_blank(),
         legend.title = element_blank())
  
  ggp2_square_mitre <- ggplot(data = economics,
    mapping = aes(x = date, y = unemploy)) +
    geom_path(
      size = 3.2,
      lineend = "square",
      linejoin = "mitre"
    ) +
    theme_void() + 
    theme(legend.text = element_blank(),
         legend.title = element_blank())

  ggp2_butt_bevel + ggp2_butt_round + ggp2_butt_mitre + 
      ggp2_round_bevel + ggp2_round_round + ggp2_round_mitre + 
      ggp2_square_bevel + ggp2_square_round + ggp2_square_mitre +
      patchwork::plot_layout(nrow = 3)

}
show_geom_path()
```

<br>

::: {style="font-size: 1.25em; color: #38B44A;"}
**Use this geom with:**
:::

- Two numerical/quantitative variables

Examples: `ggplot2::economics`

```{r}
#| label: variable_examples
#| eval: true
#| echo: false
#| warning: false
#| message: false
#| layout-ncol: 3
knitr::kable(
    head(
        dplyr::distinct(ggplot2::economics, date)
    )
)
knitr::kable(
    head(
        dplyr::distinct(ggplot2::economics, unemploy)
    )
)
```

::::


:::: {.panel-tabset}

### Packages

::: {.column-margin}
![https://github.com/rstudio/hex-stickers](../www/ggplot2.png){fig-align="right" width="40%" height="40%"}
:::

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_geom_path
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("ggplot2")
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Load the `ggplot2::economics` data.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_ggeom_path
#| eval: true
#| echo: true
economics <- ggplot2::economics
dplyr::glimpse(economics)
```
:::
::::


::::: {.callout-note collapse="false" icon=false}
## `geom_()`

:::: {.panel-tabset}

### `ggplot_build()`

::: {style="font-size: 0.90em; color: #1e83c8;"}
**`ggplot_build()`:**
:::

::: {style="font-size: 0.85em;"}
We're going to build a little function that let's us quickly create a `geom_path()` graph (and alter the arguments)
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: graph_ggp2_paths
#| code-fold: show
#| eval: true
#| echo: true 
graph_ggp2_paths <- function(size, lend, ljoin, lmitre) {
    small_econ <- dplyr::filter(economics,
            date <= "2014-08-01" & date >= "2014-04-01")
    ggp2_path_base <- ggplot(data = small_econ)
    ggp2_path_base +
    geom_path(mapping = aes(x = date, y = unemploy),
        size = as.double(size),
        lineend = as.character(lend),
        linejoin = as.character(ljoin),
        linemitre = as.double(lmitre)) + 
    theme(legend.text = element_blank(),
          legend.title = element_blank(),
          axis.title.x = element_blank(),
          axis.title.y = element_blank())
}
```
:::

::: {style="font-size: 0.85em;"}
Now we'll test this out on a few options.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: graph_ggp2_paths_round
#| code-fold: show
#| eval: true
#| echo: true 
#| warning: false
#| message: false
#| out-height: '100%'
#| out-width: '100%'
#| layout-ncol: 2
graph_ggp2_paths(7, "round", "round", 2)
graph_ggp2_paths(7, "butt", "mitre", 3)
graph_ggp2_paths(7, "square", "bevel", 4)
graph_ggp2_paths(7, "butt", "round", 4)
```
:::

::: {style="font-size: 0.85em;"}
Next we'll write a function for returning the build object, which is just our `graph_ggp2_paths()` function with a `build` argument. 
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: ggp2_path_build
#| code-fold: show
#| eval: true
#| echo: true 
#| warning: false
#| message: false
ggp2_path_build <- function(build, size, lend, ljoin, lmitre) {
    small_econ <- dplyr::filter(economics,
        date <= "2014-01-01" & date >= "1989-01-01")
    ggp2_path_base <- ggplot2::ggplot(data = small_econ)
    # graph
    ggp2_path_graph <- ggp2_path_base +
        ggplot2::geom_path(
            mapping = aes(x = date, y = unemploy),
            size = as.double(size),
            lineend = as.character(lend),
            linejoin = as.character(ljoin),
            linemitre = as.double(lmitre)
        ) +
        ggplot2::theme(
            legend.text = element_blank(),
            legend.title = element_blank(),
            axis.title.x = element_blank(),
            axis.title.y = element_blank()
        )
    # build
    ggp2_path_built <- ggplot2::ggplot_build(ggp2_path_graph)
    if (build == "data") {
        build_obj <- ggp2_path_built[["data"]][[1]]
    } else if (build == "plot") {
        build_obj <- ggp2_path_built[["plot"]]
    } else {
        build_obj <- ggp2_path_built
    }
    return(build_obj)
}
```
:::

::: {style="font-size: 0.85em;"}
This will return either the `"data"` or `"plot"` output object from `ggplot2::ggplot_build()`. 

We'll test it below:
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: ggp2_path_build_test
#| code-fold: show
#| eval: true
#| echo: true 
#| out-height: '100%'
#| out-width: '100%'
#| layout-ncol: 2
ggp2_path_build(
    build = "plot",
    size = 5, 
    lend = "butt", 
    ljoin = "mitre", 
    lmitre = 3)
head(
ggp2_path_build(
    build = "data",
    size = 5, 
    lend = "butt", 
    ljoin = "mitre", 
    lmitre = 3)
)
```
:::


### `"data"`

::: {style="font-size: 0.90em; color: #1e83c8;"}
**`geom_()`: data**
:::

::: {style="font-size: 0.85em;"}

Extract the data from the `ggplot2` object.

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_bld_
#| eval: true
#| echo: true
#| warning: false
#| message: false
ggp2_path_build(
    size = 7, 
    lend = "round", 
    ljoin = "round", 
    lmitre = 4, 
    build = "data") |> 
    ggplot(aes(x = x, y = y)) + 
    geom_point(aes(size = linewidth), 
        shape = 73, show.legend = FALSE)
ggp2_path_build(
    size = 7, 
    lend = "round", 
    ljoin = "round", 
    lmitre = 4, 
    build = "plot")
```
:::

### `"plot"`

::: {style="font-size: 0.90em; color: #1e83c8;"}
**`geom_()`: plot**
:::

::: {style="font-size: 0.85em;"}
Extract the `"plot"` from `bld_` object:
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: plot_bld_
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| out-height: '100%'
#| out-width: '100%'
#| layout-nrow: 1
# bld_ggp2_bar_x[["plot"]]
```
:::
::::
:::::


::::: {.callout-caution collapse="true" icon=false}
## `geom_(arg)`

:::: {.panel-tabset}

### `ggplot_build()`

::: {style="font-size: 0.90em; color: #1e83c8;"}
**`ggplot_build()`:**
:::

::: {style="font-size: 0.85em;"}
Build `geom_` layers
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: geom_layers_arg
#| eval: true
#| echo: true 
#| warning: false
#| message: false
# ggp2_bar_fill <- ggp2_bar_base + 
#     geom_bar(mapping = aes(x = island, 
#         fill = island), show.legend = FALSE)
# ggp2_bar_fill2 <- ggp2_bar_base + 
#     geom_bar(mapping = aes(x = island, 
#         fill = sex)) 
```
:::

::: {style="font-size: 0.85em;"}
Create `bld_` objects
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: geom_build_arg
#| eval: true
#| echo: true 
#| warning: false
#| message: false
# bld_bar_fill <- ggplot2::ggplot_build(ggp2_bar_fill)
# names(bld_bar_fill)
# bld_bar_fill2 <- ggplot2::ggplot_build(ggp2_bar_fill2)
# names(bld_bar_fill2)
```
:::

### `arg`: `"data"`

::: {style="font-size: 0.85em;"}
Extract `"data"` from `bld_` objects
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_bld_arg
#| eval: true
#| echo: true 
#| warning: false
#| message: false
# bar_fill_data <- bld_bar_fill[["data"]][[1]]
# glimpse(bar_fill_data)
# dplyr::select(bar_fill_data, x, y, fill)
```
:::

::: {style="font-size: 0.85em;"}
Extract `"data"` from `bld_` objects
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_bld_arg2
#| eval: true
#| echo: true 
#| warning: false
#| message: false
# bar_fill2_data <- bld_bar_fill2[["data"]][[1]]
# glimpse(bar_fill2_data)
# dplyr::count(bar_fill2_data, x, y, fill) |> 
#     tidyr::pivot_wider(names_from = x,
#         values_from = n)
```
:::

### `arg`: `"plot"`

::: {style="font-size: 0.85em;"}
Extract `"plot"` from `bld_` objects
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: plot_bld_arg
#| eval: true
#| echo: true 
#| warning: false
#| message: false
# bld_bar_fill[["plot"]]
```
:::

::: {style="font-size: 0.85em;"}
Extract `"plot"` from `bld_` objects
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: plot_bld_arg2
#| eval: true
#| echo: true 
#| warning: false
#| message: false
# bld_bar_fill2[["plot"]]
```
:::

::::
:::::


::::: {.callout-important collapse="true" icon=false}
## `geom_(imp_arg)`

:::: {.panel-tabset}

### `ggplot_build()`

::: {style="font-size: 0.90em; color: #1e83c8;"}
**`ggplot_build()`:**
:::

::: {style="font-size: 0.85em;"}
Build `geom_` layers
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: geom_layers_imp_arg_
#| eval: true
#| echo: true 
#| warning: false
#| message: false
# ggp2_bar_fill <- ggp2_bar_base + 
#     geom_bar(mapping = aes(x = island, 
#         fill = island), show.legend = FALSE)
# ggp2_bar_fill2 <- ggp2_bar_base + 
#     geom_bar(mapping = aes(x = island, 
#         fill = sex)) 
```
:::

::: {style="font-size: 0.85em;"}
Create `bld_` objects
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: geom_build_imp_arg_
#| eval: true
#| echo: true 
#| warning: false
#| message: false
# bld_bar_fill <- ggplot2::ggplot_build(ggp2_bar_fill)
# names(bld_bar_fill)
# bld_bar_fill2 <- ggplot2::ggplot_build(ggp2_bar_fill2)
# names(bld_bar_fill2)
```
:::

### `imp_arg`: `"data"`

::: {style="font-size: 0.85em;"}
Extract `"data"` from `bld_` objects
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_bld_imp_arg
#| eval: true
#| echo: true 
#| warning: false
#| message: false
# bar_fill_data <- bld_bar_fill[["data"]][[1]]
# glimpse(bar_fill_data)
# dplyr::select(bar_fill_data, x, y, fill)
```
:::

::: {style="font-size: 0.85em;"}
Extract `"data"` from `bld_` objects
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_bld_imp_arg2
#| eval: true
#| echo: true 
#| warning: false
#| message: false
# bar_fill2_data <- bld_bar_fill2[["data"]][[1]]
# glimpse(bar_fill2_data)
# dplyr::count(bar_fill2_data, x, y, fill) |> 
#     tidyr::pivot_wider(names_from = x,
#         values_from = n)
```
:::

### `imp_arg`: `"plot"`

::: {style="font-size: 0.85em;"}
Extract `"plot"` from `bld_` objects
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: plot_bld_imp_arg
#| eval: true
#| echo: true 
#| warning: false
#| message: false
# bld_bar_fill[["plot"]]
```
:::

::: {style="font-size: 0.85em;"}
Extract `"plot"` from `bld_` objects
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: plot_bld_imp_arg2
#| eval: true
#| echo: true 
#| warning: false
#| message: false
# bld_bar_fill2[["plot"]]
```
:::

::::
:::::