---
title: "[Category]"
format:
  html:
    dpi: 320
    fig-format: retina
    fig-asp: 0.618
    fig-width: 6.5
    toc: true
    toc-location: left
    toc-title: Contents
    html-math-method: katex
    css: styles.css
    theme:
      light: materia    
      dark: superhero
      
      
execute:
  warning: false
  message: false
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(lubridate)
library(scales)
library(knitr)
library(kableExtra)
library(colorblindr)
library(downlit)
library(xml2)
library(reactable)
library(ggalluvial)
# options ----
options(
  repos = "https://cloud.r-project.org",
  dplyr.print_min = 6, 
  dplyr.print_max = 6, 
  scipen = 9999)
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))
```

# COMPARING AMOUNTS

Comparing Counts and Summaries with `ggplot2` (and friends!)


## GROUPED COLUMN GRAPHS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::


Grouped column graphs display calculated ‘summary’ values for a numerical variable across the levels of a second categorical variable. Color is used to make comparisons and distinguish between groups (or levels) of the categorical variable.



In `ggplot2`, we can create grouped column graphs with `geom_co()`.
::::

:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_grp_col
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("ggplot2movies")
library(ggplot2movies) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Description of data
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_grp_col
#| eval: true
#| echo: true
movies_grp_col <- ggplot2movies::movies |> 
    filter(!is.na(budget) & mpaa != "") |> 
    select(budget, mpaa)
glimpse(movies_grp_col)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map `mpaa` to `x` and `budget` to `y`

Inside `geom_col()`, map `mpaa` to `fill` and remove the legend with `show.legend = FALSE`

Format the `y` axis with `scale_y_continuous()` by setting labels to `scales::dollar`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_grp_col
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_col <- labs(
  title = "IMDB movie information/user ratings",
  x = "MPAA rating", 
  y = "Total budget in US dollars")
ggp2_col <- ggplot(data = movies_grp_col,
              aes(x = mpaa, 
                  y = budget)) + 
        geom_col(aes(fill = mpaa), 
          show.legend = FALSE) + 
        scale_y_continuous(labels = scales::dollar) 
ggp2_col + 
  labs_col
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_grp_col
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_col <- labs(
  title = "IMDB movie information/user ratings",
  x = "MPAA rating", 
  y = "Total budget in US dollars")
ggp2_col <- ggplot(data = movies_grp_col,
              aes(x = mpaa, 
                  y = budget)) + 
        geom_col(aes(fill = mpaa), 
          show.legend = FALSE) + 
        scale_y_continuous(labels = scales::dollar) 
ggp2_col + 
  labs_col
```

### Summary

::: {style="font-size: 0.90em; color: #1e83c8;"}
**SUMMARY:**
:::

::: {style="font-size: 0.85em;"}
If we pass a categorical variable to the `x` (like `mpaa`) and a continuous variable to `y` (like `budget`), `geom_col()` will calculate the `sum()` of `y` by levels of `x`
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: create_summary_grp_col
#| eval: false
#| echo: true
#| warning: false
#| message: false
ggplot2movies::movies |>
    filter(!is.na(budget) & mpaa != "") |>
    select(budget, mpaa) |>
    group_by(mpaa) |>
    summarise(tot_bud = sum(budget, na.rm = TRUE),
        tot_bud = scales::dollar(tot_bud)) |>
    ungroup() |>
    select(MPAA = mpaa,
        `Total budget` = tot_bud)
```

:::


::: {style="font-size: 0.85em;"}
We can see the underlying summary of budget using `dplyr`’s `group_by()` and `summarise()` functions.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: show_summary_grp_col
#| eval: true
#| echo: false
#| warning: false
#| message: false
ggplot2movies::movies |>
    filter(!is.na(budget) & mpaa != "") |>
    select(budget, mpaa) |>
    group_by(mpaa) |>
    summarise(tot_bud = sum(budget, na.rm = TRUE),
        tot_bud = scales::dollar(tot_bud)) |>
    ungroup() |>
    select(MPAA = mpaa,
        `Total budget` = tot_bud) |>
    knitr::kable()
```
:::

::::

## SUMMARIZED COLUMN GRAPHS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::


`geom_col()` allows us to display any summary statistic we can calculate for a numerical variable.
::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
For example, the code below summarizes the average `budget` grouped by levels of `mpaa` rating in the `movies` dataset.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_sum_col
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("ggplot2movies")
library(ggplot2movies) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Description of data
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_sum_col
#| eval: true
#| echo: true
movies_sum_col <- ggplot2movies::movies |>
    filter(!is.na(budget) & mpaa != "") |>
    select(budget, mpaa) |>
    group_by(mpaa) |>
    summarise(avg_budget = mean(budget, na.rm = TRUE)) |>
    ungroup()
glimpse(movies_sum_col)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map `mpaa` to the `x` and `avg_budget` to the `y`

Map `mpaa` to `fill` inside the `aes()` of `geom_col()` and remove the legend with `show.lengend = FALSE`

Format the `y` axis with `scale_y_continuous()` by setting labels to `scales::dollar`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_sum_col
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_col <- labs(
  title = "IMDB movie information/user ratings",
  x = "MPAA rating", 
  y = "Average budget in US dollars")
ggp2_col <- ggplot(data = movies_sum_col,
              aes(x = mpaa, 
                  y = avg_budget)) + 
        geom_col(aes(fill = mpaa), 
          show.legend = FALSE) + 
        scale_y_continuous(labels = scales::dollar) 
ggp2_col + 
  labs_col
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_sum_col
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_col <- labs(
  title = "IMDB movie information/user ratings",
  x = "MPAA rating", 
  y = "Average budget in US dollars")
ggp2_col <- ggplot(data = movies_sum_col,
              aes(x = mpaa, 
                  y = avg_budget)) + 
        geom_col(aes(fill = mpaa), 
          show.legend = FALSE) + 
        scale_y_continuous(labels = scales::dollar) 
ggp2_col + 
  labs_col
```

::::

## OVERLAPPING BAR GRAPHS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::


We can also use bars to look at numeric and categorical variables using `geom_bar()` by setting `fill` argument



This results in bars differentiated by color and ‘stacked’ on top of each other.
::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_ovrlp_bars
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Remove missing `sex` from `penguins` and filter to only `"Adelie"` penguins.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_ovrlp_bars
#| eval: true
#| echo: true
penguins_ovrlp <- filter(penguins,
                  !is.na(sex) & species == "Adelie")
glimpse(penguins_ovrlp)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map `flipper_length_mm` to the `x` and `sex` to `fill`

Add the `geom_bar()` layer

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_ovrlp_bars
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_bar_ovrlp <- labs(
  title = "Adelie adult foraging penguins",
  x = "Flipper length (millimeters)", 
  fill = "Sex")
ggp2_bar_ovrlp <- ggplot(data = penguins_ovrlp,
          aes(x = flipper_length_mm, fill = sex)) +
                geom_bar() 
ggp2_bar_ovrlp + 
  labs_bar_ovrlp
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_ovrlp_bars
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_bar_ovrlp <- labs(
  title = "Adelie adult foraging penguins",
  x = "Flipper length (millimeters)", 
  fill = "Sex")
ggp2_bar_ovrlp <- ggplot(data = penguins_ovrlp,
          aes(x = flipper_length_mm, fill = sex)) +
                geom_bar() 
ggp2_bar_ovrlp + 
  labs_bar_ovrlp
```

::::

## SIDE-TO-SIDE BAR GRAPHS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::


To compare amounts using bar size (length or height) in a side-to-side display, we can set the position in `geom_bar()` to `"dodge"` or `"dodge2"`
::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_bar_dodge
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Remove any missing values from `sex` and `species` in the `penguins` data.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_bar_dodge
#| eval: true
#| echo: true
penguins_dodge <- filter(penguins,
                    !is.na(sex) & !is.na(species))
glimpse(penguins_dodge)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map `species` to the `x` and `sex` to `fill`

Inside the `geom_bar()` function, set `position` to `"dodge"`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_bar_dodge
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_bar_dodge <- labs(
  title = "Adult foraging penguins",
  subtitle = "position = 'dodge'",
  x = "Penguin Species",
  fill = "Penguin Sex")

ggp2_bar_dodge <- ggplot(data = penguins_dodge,
                    aes(x = species,
                      fill = sex)) +
                    geom_bar(position = "dodge")
ggp2_bar_dodge +
  labs_bar_dodge
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_bar_dodge
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_bar_dodge <- labs(
  title = "Adult foraging penguins",
  subtitle = "position = 'dodge'",
  x = "Penguin Species",
  fill = "Penguin Sex")

ggp2_bar_dodge <- ggplot(data = penguins_dodge,
                    aes(x = species,
                      fill = sex)) +
                    geom_bar(position = "dodge")
ggp2_bar_dodge +
  labs_bar_dodge
```

::::

## DODGE2 BAR GRAPHS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::


`"dodge2"` preserves the total width of the elements and works without a grouping variable in a layer.

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_dodge2
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Remove any missing values from `sex` and `species` in the `penguins` data.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_dodge2
#| eval: true
#| echo: true
penguins_dodge2 <- filter(penguins,
                    !is.na(sex) & !is.na(species))
glimpse(penguins_dodge2)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map `species` to `x` and `sex` to `fill`

Inside `geom_bar()`, set `position` to `"dodge2"`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_dodge2
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_bar_dodge2 <- labs(
  title = "Adelie adult foraging penguins",
  subtitle = "position = 'dodge2'",
  x = "Species",
  fill = "Penguin Sex")
ggp2_bar_dodge2 <- ggplot(data = penguins_dodge2,
                      aes(x = species,
                        fill = sex)) +
                      geom_bar(position = "dodge2")
ggp2_bar_dodge2 +
  labs_bar_dodge2
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_dodge2
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_bar_dodge2 <- labs(
  title = "Adelie adult foraging penguins",
  subtitle = "position = 'dodge2'",
  x = "Species",
  fill = "Penguin Sex")
ggp2_bar_dodge2 <- ggplot(data = penguins_dodge2,
                      aes(x = species,
                        fill = sex)) +
                      geom_bar(position = "dodge2")
ggp2_bar_dodge2 +
  labs_bar_dodge2
```

::::

## WAFFLE CHART

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::


Waffle charts use color to display the levels that make up the values in a categorical variable. The counts for each level are divided into separate colors into a square or grid display.



We’ll build a waffle chart using the [`ggwaffle` package.](https://liamgilbey.github.io/ggwaffle/)


::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_waffle
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
devtools::install_github("liamgilbey/ggwaffle")
library(ggwaffle)
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Waffle charts require a special data transformation with `ggwaffle::waffle_iron()`

Set the group argument in `ggwaffle::aes_d()` as the categorical variable you want to see the relative counts for:
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_waffle
#| eval: true
#| echo: true
penguins <- palmerpenguins::penguins
penguins <- dplyr::mutate(penguins, 
              species = as.character(species))
waffle_peng <- ggwaffle::waffle_iron(penguins,
                      aes_d(group = species))

glimpse(waffle_peng)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map the `x` and `y` to the `x` and `y` axes

Map `group` to `fill`

Add `ggwaffle::geom_waffle()`

Add `ggwaffle::theme_waffle()`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_waffle
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_waffle <- labs(
  title = "Waffle chart of palmer penguin species",
  x = "", y = "", fill = "Species")
ggp2_waffle <- ggplot(data = waffle_peng, 
       aes(x = x, 
           y = y, 
           fill = group)) + 
  ggwaffle::geom_waffle() 
ggp2_waffle + 
  labs_waffle +
  ggwaffle::theme_waffle()
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_waffle
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_waffle <- labs(
  title = "Waffle chart of palmer penguin species",
  x = "", y = "", fill = "Species")
ggp2_waffle <- ggplot(data = waffle_peng, 
       aes(x = x, 
           y = y, 
           fill = group)) + 
  ggwaffle::geom_waffle() 
ggp2_waffle + 
  labs_waffle +
  ggwaffle::theme_waffle()
```

::::

## HEATMAPS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::


Heatmaps display quantitative values across an intersection of two categorical (or discrete) variables.



The intersecting cells contain variations of color saturation (i.e., the grade of purity or vividness) to represent the numerical values between groups.
::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_heatmap
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("fivethirtyeight")
library(fivethirtyeight) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
For the heatmap, we’re going to re-structure and filter the `bob_ross` data from the `fivethirtyeight` package.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_heatmap
#| eval: true
#| echo: true
heatmap_ross <- fivethirtyeight::bob_ross |>
  pivot_longer(-c(episode, season,
    episode_num, title),
    names_to = "object",
    values_to = "present") |>
  mutate(present = as.logical(present),
    object = str_replace_all(object, "_", " ")) |>
  arrange(episode, object) |> 
  filter(object %in% c('conifer', 'trees', 
    'tree', 'snow', 'palm trees', 'grass', 
    'flowers', 'cactus', 'bushes', 'cirrus', 
    'cumulus', 'deciduous', 'clouds', 'fog')) |>
  group_by(season, object) |>
  summarise(occurrences = sum(present)) |>
  ungroup()
glimpse(heatmap_ross)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Assign `season` to `x`, `object` to `y`, and `occurrences` to `fill`

Add the `geom_tile()`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_heatmap
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_heatmap_tile <- labs(
  title = "Bob Ross' plants & clouds", 
  x = "Season", 
  y = "Plant & Cloud Objects", 
  fill = "Occurrences")
ggp2_heatmap_tile <- ggplot(data = heatmap_ross, 
       aes(x = season, 
           y = object, 
           fill = occurrences)) + 
       geom_tile() 
ggp2_heatmap_tile + 
  labs_heatmap_tile
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_heatmap
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_heatmap_tile <- labs(
  title = "Bob Ross' plants & clouds", 
  x = "Season", 
  y = "Plant & Cloud Objects", 
  fill = "Occurrences")
ggp2_heatmap_tile <- ggplot(data = heatmap_ross, 
       aes(x = season, 
           y = object, 
           fill = occurrences)) + 
       geom_tile() 
ggp2_heatmap_tile + 
  labs_heatmap_tile
```

::::

## MORE HEATMAPS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::


In addition to `geom_tile()`, heatmaps can also be created with the `geom_raster()` function.

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_raster
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("fivethirtyeight")
library(fivethirtyeight) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
We’re going to use the same re-structured version of the `fivethirtyeight::bob_ross` data, `heatmap_ross`
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_raster
#| eval: true
#| echo: true
glimpse(heatmap_ross)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Assign `season` to `x`, `object` to `y`, and `occurrences` to fill

Add the `geom_raster()`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_raster
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_heatmap_raster <- labs(
  title = "Bob Ross' plants & clouds", 
  x = "Season", 
  y = "Plant/Cloud Object", 
  fill = "Occurrences")
ggp2_heatmap_raster <- ggplot(data = heatmap_ross, 
       aes(x = season, 
           y = object, 
           fill = occurrences)) + 
       geom_raster() 
ggp2_heatmap_raster + 
  labs_heatmap_raster
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_raster
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_heatmap_raster <- labs(
  title = "Bob Ross' plants & clouds", 
  x = "Season", 
  y = "Plant/Cloud Object", 
  fill = "Occurrences")
ggp2_heatmap_raster <- ggplot(data = heatmap_ross, 
       aes(x = season, 
           y = object, 
           fill = occurrences)) + 
       geom_raster() 
ggp2_heatmap_raster + 
  labs_heatmap_raster
```

::::



<!--

## Graph_Description

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::


Description



More_description.
::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Description of data
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_
#| eval: true
#| echo: true
penguins <- palmerpenguins::penguins
glimpse(penguins)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_scatter <- labs(
  title = "Bill Length vs. Flipper Length",
  x = "Bill Length (mm)", y = "Flipper length (mm)")
ggp2_scatter <- penguins |>
  ggplot(
    aes(x = bill_length_mm, 
      y = flipper_length_mm)) +
  geom_point()

ggp2_scatter + 
  labs_scatter
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_scatter <- labs(
    title = "Bill Length vs. Flipper Length",
    x = "Bill Length (mm)", 
    y = "Flipper length (mm)")
ggp2_scatter <- penguins |> 
  ggplot(aes(x = bill_length_mm,
      y = flipper_length_mm)) + 
  geom_point() 
ggp2_scatter + 
  labs_scatter
```

::::

-->