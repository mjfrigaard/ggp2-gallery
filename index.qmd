---
title: "Overview"
format:
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
    smooth-scroll: true
    code-fold: true
    code-summary: "View code"
    code-overflow: wrap
    highlight-style: arrow
    
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(lubridate)
library(scales)
library(knitr)
library(kableExtra)
library(colorblindr)
library(downlit)
# options ----
options(
  repos = "https://cloud.r-project.org",
  dplyr.print_min = 6, 
  dplyr.print_max = 6, 
  scipen = 9999)
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))
```


Welcome to the `ggplot2` graph gallery! This Quarto website contains a series of graphs composed in `ggplot2`. Install `ggplot2` using the code below:

```{r}
#| label: ggp2-pkg
#| eval: false
#| echo: true
install.packages("ggplot2")
library(ggplot2)
```

Or install `ggplot2` as part of the `tidyverse`:

```{r}
#| label: tidyverse-pkg
#| eval: false
#| echo: true
install.packages("tidyverse")
library(tidyverse)
```

## Data

An effort has been made to keep the number of additional packages at a minimum, so most of the graphs have been created with one of two datasets: 

### `penguins`

![Artwork by @allison_horst](www/lter_penguins.png){fig-align="right" width="60%" height="60%"}

The majority of the graphs are built using the `palmerpenguins::penguins` data. 

:::: {.callout-note collapse="true"}
## `penguins` data

```{r}
#| label: penguins-pkg-show
#| eval: false
#| echo: true
install.packages("palmerpenguins")
library(palmerpenguins)
palmerpenguins::penguins |> glimpse()
```

```{r}
#| label: penguins-pkg
#| eval: true
#| echo: false
#| message: false
#| warning: false
library(palmerpenguins)
palmerpenguins::penguins |> glimpse()
```
:::

### `movies`

![](www/imdb.png){fig-align="right" width="30%" height="30%"}

Some of the graphs are built using the `ggplot2movies::movies` data. 

:::: {.callout-note collapse="true"}
## `movies` data

```{r}
#| label: movies-pkg-show
#| eval: false
#| echo: true
install.packages("ggplot2movies")
library(ggplot2movies)
ggplot2movies::movies |> glimpse()
```


```{r}
#| label: movies-pkg
#| eval: true
#| echo: false
#| message: false
#| warning: false
library(ggplot2movies)
ggplot2movies::movies |> glimpse()
```

:::

### Additional datasets

A *few* of the graphs using datasets from the `fivethirtyeight` package.

![](www/538.png){fig-align="right" width="15%" height="15%"}

:::: {.callout-note collapse="true"}
## `fivethirtyeight` data

To view a table of available datasets in the `fivethirtyeight` package, view the `Data Frame Name` and `Article Title` columns in the `datasets_master` table. 

```{r}
#| label: 538-pkg-show
#| eval: false
#| echo: true
install.packages("fivethirtyeight")
library(fivethirtyeight)
fivethirtyeight::datasets_master |> 
    select(`Data Frame Name`, `Article Title`)
```

```{r}
#| label: 538-pkg
#| eval: true
#| echo: false
#| message: false
#| warning: false
library(fivethirtyeight)
reactable::reactable(fivethirtyeight::datasets_master |> 
    select(`Data Frame Name`, `Article Title`), 
    defaultPageSize = 5)
```

:::

## Code style & structure 

The gallery follows a [Rule of Least Power Principle](https://www.w3.org/2001/tag/doc/leastPower.html), in the sense that "*a language with a straightforward syntax may be easier to analyze than an otherwise equivalent one with more complex structure.*" In other words, assuming the reader has some understanding of R and the `tidyverse`, the code for each graph is meant to be read and understood *without* having to run it. 

Each graph has the same four sections and structure: 

:::: {.callout-note collapse="false"}
### Graph code structure 

#### Packages 

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg-str
#| eval: false
#| echo: true
#| code-fold: show
# packages 
library(ggplot2)
```
:::

#### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data-str
#| eval: true
#| echo: true
#| code-fold: show
# data
df <- tibble::tibble(X = sample(x = 1:100, 10, FALSE),
                     Y = rlnorm(10, 1, 3))
```
:::

#### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code-str
#| eval: false
#| echo: true
#| code-fold: show
# labels
labs_graph <- ggplot2::labs(title = "Title", 
                            subtitle = "subtitle", 
                            x = "X", y = "Y")
# layers
ggp2_graph <- ggplot2::ggplot(data = df, 
    mapping = aes(x = X, y = Y)) + 
    ggplot2::geom_blank()
# graph
ggp2_graph + 
    labs_graph
```
:::

#### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: graph-str
#| eval: true
#| echo: false
#| fig-width: 5
#| fig-height: 3
#| code-fold: show
# labels
labs_graph <- ggplot2::labs(title = "Title", 
                            subtitle = "subtitle", 
                            x = "X", y = "Y")
# layers
ggp2_graph <- ggplot2::ggplot(data = df, 
    mapping = aes(x = X, y = Y)) + 
    ggplot2::geom_blank()
# graph
ggp2_graph + 
    labs_graph
```
:::
::::

I've attempted to balance brevity and clarity, but with the assumption that its best to err on the latter. I've also followed the general principle that if a graph can be *easily* built using one of `ggplot2` 's `geom_*` functions, that method is shown first. 

If the graph can't be built with `ggplot2`'s geoms and requires additional packages/geoms/functions, instructions for installing the development version for these packages has been provided.

## Graph Categories 

Graphs have been categorized into the following types:

- Univariate graphs  
- Amounts 
- Proportions  
- Comparing Distributions  
- Relationships  

Some graphs would justifiably belong in more than one category, and wherever this is the cases, I've tried to include other uses in the notes. 

### Univariate Graphs

The following graphs are used to display **single variable** **distributions**:

-   [x] Bar Graphs

-   [x] Histograms

-   [x] Frequency Polygons

-   [x] Dot-Plots

-   [x] Density Plots

-   [x] Violin Plots

-   [x] Box-Plots

### Amounts

The following graphs are used to display **amounts**:

-   [x] Grouped column-graphs

-   [x] Summarized column-graphs

-   [x] Overlapping bar-graphs

-   [x] Side-to-side (`"dodge"`) bar-graphs

-   [x] Side-to-side (`"dodge2"`) bar-graphs

-   [x] Waffle charts

    -   [`ggwaffle` package](https://liamgilbey.github.io/ggwaffle/)

        ```{r}
        #| eval: false
        #| echo: true
        # Waffle Charts
        devtools::install_github("liamgilbey/ggwaffle")
        library(ggwaffle)
        ```

-   [x] Heatmaps

### Proportions

The following graphs are used to compare **proportions**:

-   [x] Pie Charts

    -   [`ggpubr` package](https://rpkgs.datanovia.com/ggpubr/)

        ```{r}
        #| eval: false
        #| echo: true
        # Pie Charts 
        devtools::install_github("kassambara/ggpubr")
        library(ggpubr)
        ```

-   [x] Diverging Bar-graphs

  -   [x] Vertical

-   [x] Stacked-densities

-   [x] Mosaic Plots

    -   [`ggmosaic` package](https://haleyjeppson.github.io/ggmosaic/)

        ```{r}
        #| eval: false
        #| echo: true
        # Mosaic Charts 
        devtools::install_github("haleyjeppson/ggmosaic")
        library(ggmosaic)
        ```

-   [x] Treemaps

    -   [`treemapify` package](https://wilkox.org/treemapify/)

        ```{r}
        #| eval: false
        #| echo: true
        # Treemaps
        devtools::install_github("wilkox/treemapify")
        library(treemapify)
        ```


### Comparing Distributions

These graphs can be used to compare **multiple variable distributions:**

-   [x] Overlapping Histograms

-   [x] Overlapping Frequency Polygons

-   [x] Overlapping Dot-Plots

-   [x] Bee-swarm Plots

    -   [`ggbeeswarm` package](https://github.com/eclarke/ggbeeswarm)

        ```{r}
        #| eval: false
        #| echo: true
        # Bee-swarm Plots
        devtools::install_github("eclarke/ggbeeswarm")
        library(ggbeeswarm)
        ```

-   [x] Overlapping Densities

-   [x] Ridgeline Plots

    -   [`ggridges` package](https://wilkelab.org/ggridges/)

        ```{r}
        #| eval: false
        #| echo: true
        # Ridgeline plots 
        devtools::install_github("wilkelab/ggridges")
        library(ggridges)
        ```

-   [x] Grouped Box-plots

-   [x] Violin plots

-   [x] Rain-cloud plots

    -   [`raincloudplots`](https://github.com/jorvlan/raincloudplots) and [`ggdist`](https://mjskay.github.io/ggdist/reference/index.html) packages

        ```{r}
        #| eval: false
        #| echo: true
        # Rain-cloud plots 
        remotes::install_github('jorvlan/raincloudplots')
        remotes::install_github('mjskay/ggdist')
        library(raincloudplots)
        library(ggdist)
        ```



### Relationships

The following graphs are used to display relationships between two (or more) variables:

-   [x] Scatter plots

-   [x] Grouped scatter plots

-   [x] Bubble charts

-   [x] Grouped bubble charts

-   [x] Alluvial charts

    -   [ggalluvial package](https://corybrunson.github.io/ggalluvial/)

        ```{r}
        #| eval: false
        #| echo: true
        # Alluvial charts
        devtools::install_github("corybrunson/ggalluvial")
        library(ggalluvial)
        ```

-   [x] Bump charts

    -   [ggbump package](https://github.com/davidsjoberg/ggbump)

        ```{r}
        #| eval: false
        #| echo: true
        # Bump charts
        devtools::install_github("davidsjoberg/ggbump")
        library(ggbump)
        ```

-   [x] Parallel Sets

    -   [ggforce package](https://ggforce.data-imaginist.com/index.html)

        ```{r}
        #| eval: false
        #| echo: true
        # Bump charts
        devtools::install_github("thomasp85/ggforce")
        library(ggforce)
        ```

-   [x] Slope graphs

-   [ ] *Density Contours*

-   [ ] *2D Bins*

-   [ ] *Hex Bins*

-   [ ] *Correlograms*
