[
  {
    "objectID": "proportions.html",
    "href": "proportions.html",
    "title": "ggplot2 gallery",
    "section": "",
    "text": "Comparing proportions & part-to-whole relationships with ggplot2 (and friends!)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\n“In general, pie charts work well when the goal is to emphasize simple fractions, such as one-half, one-third, or one-quarter.”\n“They also work well when we have very small datasets.” - Claus O. Wilke, Fundamentals of Data Visualization (2019)\nPie-charts are ideal for comparing the proportions of categorical variable values, and we can build pie-charts using the ggpubr package.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"ggpubr\")\nlibrary(ggpubr)\ninstall.packages(\"ggplot2movies\")\nlibrary(ggplot2movies) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nRemove the missing values and \"NC-17\" from mpaa and summarise the count and percent.\n\n\n\nmovie_pie <- ggplot2movies::movies |>\n  filter(mpaa != \"\" & mpaa != \"NC-17\") |> \n  group_by(mpaa) |> \n  summarise(cnt = n()) |> \n  mutate(\n    perc = round(cnt / sum(cnt), 3),\n    mpaa = factor(mpaa, \n          levels = c(\"PG\", \"PG-13\", \"R\")))\nglimpse(movie_pie)\n\nRows: 3\nColumns: 3\n$ mpaa <fct> PG, PG-13, R\n$ cnt  <int> 528, 1003, 3377\n$ perc <dbl> 0.108, 0.204, 0.688\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nAssign \"perc\" to x\nAssign labs to label\nAssign \"in\" to lab.pos\nAssign \"white\" to lab.font and color\nAssign \"mpaa\" to fill\nRemove legend with theme(legend.position = \"none\")\n\n\n\nlabs <- paste0(movie_pie$mpaa, \" (\", \n               (100*movie_pie$perc), \"%)\")\nlabs_pie <- labs(\n  title = \"Percent MPAA ratings for IMDB movies\",\n  x = \"Percent MPAA rating\")\n\nggp2_pie <- ggpubr::ggpie(movie_pie, \n          x = \"perc\", label = labs, \n          lab.pos = \"in\", lab.font = \"white\",\n          fill = \"mpaa\", color = \"white\") + \n    theme(legend.position = \"none\")  \n    \nggp2_pie + \n  labs_pie\n\n\n\n\n\nGRAPH: Note the variables in ggpubr::ggpie() are assigned in quotes!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nIf you have two proportions that contain positive and negative values, consider using diverging bars with geom_bar()\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"fivethirtyeight\")\nlibrary(fivethirtyeight) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nCreate trump_approval_diverg from the trump_approval_trend dataset in the fivethirtyeight package.\n\n\n\nfivethirtyeight::trump_approval_trend |> \n  filter(subgroup == \"All polls\") |> \n  mutate(\n    month = lubridate::month(modeldate,\n                label = TRUE, abbr = TRUE),\n    approve = approve_estimate*0.01,\n    disapprove = disapprove_estimate*0.01,\n    disapprove = disapprove * -1) |> \n  pivot_longer(cols = c(approve, disapprove), \n    names_to = \"poll\", values_to = \"values\") |> \n  group_by(month, poll) |> \n    summarise(\n      month_avg = mean(values, na.rm = TRUE)\n    ) |> \n  ungroup() -> trump_approval_diverg\n\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n\nglimpse(trump_approval_diverg)\n\nRows: 24\nColumns: 3\n$ month     <ord> Jan, Jan, Feb, Feb, Mar, Mar, Apr, Apr, May, May, Jun, Jun, …\n$ poll      <chr> \"approve\", \"disapprove\", \"approve\", \"disapprove\", \"approve\",…\n$ month_avg <dbl> 0.4029758, -0.5234634, 0.4226055, -0.5158645, 0.4182011, -0.…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap the month to the x and month_avg to the y\nInsidegeom_bar()\n\nmap poll to fill\nuse stat = \"identity\" and width = .5\n\nAdd scale_y_continuous() to manually set the limits and format the axis with scales::percent\nMove the legend to the bottom of the graph with theme(legend.position = \"bottom\")\n\n\n\nlabs_geom_bar_diverg <- labs(\n  title = \"Trump Approval Ratings\",\n  subtitle = \"From 'How Popular is Donald Trump'\",\n  x = \"Month\",\n  y = \"Monthly average percent\",\n  fill = \"Estimate\")\nggp2_bars_diverg <- ggplot(\n  data = trump_approval_diverg, \n    aes(x = month, y = month_avg)) +\n  geom_bar(aes(fill = poll),\n    stat = \"identity\", width = .5) + \n  scale_y_continuous(limits = c(-1, 1), \n    labels = scales::percent) + \n    theme(legend.position = \"bottom\")\n\nggp2_bars_diverg + \n  labs_geom_bar_diverg\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nDiverging bar-charts can be arranged vertically, too.\nFor vertically arranged bars, we switch the x and y axis variables.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"fivethirtyeight\")\nlibrary(fivethirtyeight) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nCreate trump_approval_diverg from the trump_approval_trend dataset in the fivethirtyeight package.\n\n\n\nfivethirtyeight::trump_approval_trend |> \n  filter(subgroup == \"All polls\") |> \n  mutate(\n    month = lubridate::month(modeldate,\n                label = TRUE, abbr = TRUE),\n    approve = approve_estimate*0.01,\n    disapprove = disapprove_estimate*0.01,\n    disapprove = disapprove * -1) |> \n  pivot_longer(cols = c(approve, disapprove), \n    names_to = \"poll\", values_to = \"values\") |> \n  group_by(month, poll) |> \n    summarise(\n      month_avg = mean(values, na.rm = TRUE)\n    ) |> \n  ungroup() -> trump_approval_diverg\n\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n\nglimpse(trump_approval_diverg)\n\nRows: 24\nColumns: 3\n$ month     <ord> Jan, Jan, Feb, Feb, Mar, Mar, Apr, Apr, May, May, Jun, Jun, …\n$ poll      <chr> \"approve\", \"disapprove\", \"approve\", \"disapprove\", \"approve\",…\n$ month_avg <dbl> 0.4029758, -0.5234634, 0.4226055, -0.5158645, 0.4182011, -0.…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap the month_avg to the x and month to the y\nInside geom_bar()\n\nmap poll to fill\nuse stat = \"identity\" and width = .5\n\nAdd scale_y_continuous() to manually set the limits and format the axis with scales::percent\n\n\n\nlabs_geom_bar_diverg_vert <- labs(\n  title = \"Trump Approval Ratings\",\n  subtitle = \"From 'How Popular is Donald Trump'\",\n  x = \"Monthly average percent\",\n  y = \"Month\",\n  fill = \"Estimate\")\nggp2_bar_diverg_vert <- ggplot(\n  data = trump_approval_diverg,\n      aes(x = month_avg, y =  month)) +\n  geom_bar(\n      aes(fill = poll), \n        stat = \"identity\", width = .5) + \n  scale_x_continuous(limits = c(-1, 1), \n        labels = scales::percent)\nggp2_bar_diverg_vert + \n  labs_geom_bar_diverg_vert\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nDensity graphs are typically used to visualize the distribution of a single variable, but stacked density graphs are great for visualizing how proportions vary across numeric (continuous) variables.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nRemove missing sex from the penguins data\n\n\n\npeng_density <- filter(penguins, !is.na(sex))\nglimpse(peng_density)\n\nRows: 333\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6…\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2…\n$ flipper_length_mm <int> 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 18…\n$ body_mass_g       <int> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3200, 3800…\n$ sex               <fct> male, female, female, female, male, female, male, fe…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap the flipper_length_mm to the x and add after_stat(count)\nMap sex to fill\nInside the geom_density() function, set position to \"fill\"\n\n\n\nlabs_fill_density <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\",\n  fill = \"Penguin sex (female, male)\")\nggp2_fill_density <- ggplot(data = peng_density, \n       aes(x = flipper_length_mm, \n           after_stat(count),\n          fill = sex)) +\n      geom_density(position = \"fill\") \nggp2_fill_density + \n  labs_fill_density\n\n\n\n\n\nGRAPH: You can use position = \"fill\" to produce a conditional density estimate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nA mosaic plot is similar to a stacked bar-graph, but instead of only relying on height and color to display the relative amount for each value, mosaic plots also use width.\nWe can build mosaic plots using the ggmosaic package.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"fivethirtyeight\")\nlibrary(fivethirtyeight) \ndevtools::install_github(\"haleyjeppson/ggmosaic\")\nlibrary(ggmosaic)\nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nThe fivethirtyeight::flying data, after removing the missing values from baby and unruly_child.\n\n\n\nflying <- fivethirtyeight::flying\nfly_mosaic <- filter(flying, \n              !is.na(baby) & !is.na(unruly_child)) |> \n              select(baby, unruly_child)\nglimpse(fly_mosaic)\n\nRows: 849\nColumns: 2\n$ baby         <ord> No, Somewhat, Somewhat, Somewhat, Very, No, Somewhat, Ver…\n$ unruly_child <ord> No, Very, Very, Very, Very, Somewhat, Very, Very, Very, V…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap the product() of unruly_child and baby to the x axis\nMap baby to fill\nAdd theme_mosaic()\n\n\n\nlabs_mosaic <- labs(\n      title = \"In general...\", \n      subtitle = \"...is it rude to...\",\n      x = \"... bring a baby on a plane?\",\n      y = \"..,knowingly bring unruly children on a plane?\",\n      fill = \"Responses\") \nggp2_mosaic <- ggplot(data = fly_mosaic) +\n  geom_mosaic(aes(x = product(unruly_child, baby), \n      fill = baby)) +\n  theme_mosaic()\nggp2_mosaic + \n    labs_mosaic\n\n\n\n\n\nGRAPH: It’s a good idea to adjust the fig-height and fig-width of your graph:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nTreemaps display how numerical hierarchical values make up a whole in a rectangular layout.\nWe’ll build a treemap using the treemapify package.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ndevtools::install_github(\"wilkox/treemapify\")\nlibrary(treemapify) \ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nFilter the missing values from sex, group the data by species, island, and sex, then count the species and island (then ungroup()).\n\n\n\ntreemap_peng <- penguins |> \n                  filter(!is.na(sex)) |> \n                  group_by(species, island, sex) |>\n  count(species, island) |> \n  ungroup()\nglimpse(treemap_peng)\n\nRows: 10\nColumns: 4\n$ species <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Chinstrap, Chi…\n$ island  <fct> Biscoe, Biscoe, Dream, Dream, Torgersen, Torgersen, Dream, Dre…\n$ sex     <fct> female, male, female, male, female, male, female, male, female…\n$ n       <int> 22, 22, 27, 28, 24, 23, 34, 34, 58, 61\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap the n to area, sex to fill, species to label, and island to subgroup\n\n\n\nlabs_treemap <- labs(\n  title = \"Species, island, and sex of adult penguins\")\nggp2_treemap <- ggplot(treemap_peng, \n       aes(area = n, \n           fill = sex, \n           label = species,\n           subgroup = island)) +\n       treemapify::geom_treemap() \nggp2_treemap + \n  labs_treemap\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nAdd the borders with geom_treemap_subgroup_border()\n\n\n\nlabs_treemap <- labs(\n  title = \"Species, island, and sex of adult penguins\")\nggp2_treemap <- ggplot(treemap_peng, \n       aes(area = n, \n           fill = sex, \n           label = species,\n           subgroup = island)) +\n       treemapify::geom_treemap()\nggp2_treemap_sgb <- ggp2_treemap + \n       treemapify::geom_treemap_subgroup_border()\nggp2_treemap_sgb + \n  labs_treemap\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nInclude labels for subgroup with geom_treemap_subgroup_text() (see full list of arguments here)\n\n\n\nggp2_treemap_sgb <- ggp2_treemap + \n       treemapify::geom_treemap_subgroup_border()\nggp2_tmap_sgb_txt <- \n  treemapify::geom_treemap_subgroup_text(\n         place = \"center\", \n         grow = TRUE, \n         alpha = 0.9, \n         color = \"white\",\n         fontface = \"bold\",\n         family = \"sans\",\n         min.size = 0)\nggp2_treemap_sgb + \n  ggp2_tmap_sgb_txt + \n  labs_treemap\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "univariate.html",
    "href": "univariate.html",
    "title": "ggplot2 gallery",
    "section": "",
    "text": "Single variable graphs with ggplot2 (and friends!)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\n\nThe bar-graph (or bar-chart) is used to display counts for the levels of a categorical variable.\n\nBar charts can be arranged vertically or horizontally, but the length of the bar represents the ‘count’ for each level value.\n\nIn ggplot2, bar charts can be built using geom_bar().\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"ggplot2movies\")\nlibrary(ggplot2movies) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nFilter the missing values from mpaa in the ggplot2movies::movies data\n\n\n\nmovies_bar <- ggplot2movies::movies |> \n                    filter(mpaa != \"\")\nglimpse(movies_bar)\n\nRows: 4,924\nColumns: 24\n$ title       <chr> \"$windle\", \"'A' gai waak\", \"'A' gai waak juk jaap\", \"'R Xm…\n$ year        <int> 2002, 1983, 1987, 2001, 1997, 1999, 2000, 2002, 2004, 2003…\n$ length      <int> 93, 106, 101, 83, 113, 97, 90, 98, 95, 85, 98, 93, 102, 12…\n$ budget      <int> NA, NA, NA, NA, 23000000, 16000000, NA, 1100000, NA, NA, 3…\n$ rating      <dbl> 5.3, 7.1, 7.2, 4.9, 4.8, 6.7, 5.8, 5.6, 4.3, 2.2, 6.4, 5.6…\n$ votes       <int> 200, 1259, 614, 288, 799, 19095, 3349, 181, 222, 69, 7859,…\n$ r1          <dbl> 4.5, 4.5, 4.5, 14.5, 4.5, 4.5, 4.5, 4.5, 14.5, 44.5, 4.5, …\n$ r2          <dbl> 0.0, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 14.5, 4.5, 4.5, 4.…\n$ r3          <dbl> 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5…\n$ r4          <dbl> 4.5, 4.5, 4.5, 4.5, 14.5, 4.5, 4.5, 4.5, 14.5, 4.5, 4.5, 4…\n$ r5          <dbl> 24.5, 4.5, 4.5, 14.5, 14.5, 4.5, 14.5, 14.5, 14.5, 4.5, 4.…\n$ r6          <dbl> 24.5, 14.5, 14.5, 24.5, 14.5, 14.5, 14.5, 24.5, 14.5, 4.5,…\n$ r7          <dbl> 14.5, 14.5, 24.5, 14.5, 14.5, 24.5, 24.5, 14.5, 4.5, 4.5, …\n$ r8          <dbl> 4.5, 14.5, 24.5, 4.5, 4.5, 14.5, 14.5, 14.5, 4.5, 4.5, 14.…\n$ r9          <dbl> 4.5, 14.5, 14.5, 4.5, 4.5, 14.5, 4.5, 4.5, 4.5, 0.0, 4.5, …\n$ r10         <dbl> 14.5, 24.5, 14.5, 4.5, 14.5, 14.5, 4.5, 14.5, 14.5, 14.5, …\n$ mpaa        <chr> \"R\", \"PG-13\", \"PG-13\", \"R\", \"PG-13\", \"PG-13\", \"R\", \"R\", \"R…\n$ Action      <int> 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1…\n$ Animation   <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Comedy      <int> 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0…\n$ Drama       <int> 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0…\n$ Documentary <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Romance     <int> 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Short       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap mpaa to the x axis\nMap mpaa to the fill aesthetic inside the aes() of geom_bar()\n\n\n\nlabs_bar <- labs(\n  title = \"IMDB movie information/user ratings\",\n  x = \"MPAA rating\", y = \"Count\", \n  fill = \"MPAA\")\nggp2_bar <- ggplot(data = movies_bar, \n       aes(x = mpaa)) + \n    geom_bar(aes(fill = mpaa)) \nggp2_bar + \n  labs_bar\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\n\nHistograms use bars, but the x axis is divided into ‘bins’ that cover the range of the variable.\n\nThe standard number of bins is 30\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nThe penguins data.\n\n\n\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\n\n\n\nlabs_histogram <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\")\n\nggp2_hist <- ggplot(data = penguins,\n     aes(x = flipper_length_mm)) + \n     geom_histogram() \nggp2_hist + \n  labs_histogram\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\n\nFrequency polygons (geom_freqpoly()) are similar to histograms,\n\nbut they use lines instead of bars to represent the variable distribution.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nThe penguins data\n\n\n\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap flipper_length_mm to the x axis\nAdd the geom_freqpoly() layer\n\n\n\nlabs_freqpoly <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\")\nggp2_freqpoly <- ggplot(data = penguins,\n      aes(x = flipper_length_mm)) + \n    geom_freqpoly()\nggp2_freqpoly + \n  labs_freqpoly\n\n\n\n\n\nGRAPH: Experiment to see how many bins fit your variable’s distribution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\n\nDot-plots (geom_dotplot()) are similar to histograms and frequency polygons,\n\nexcept instead of using bars or lines, they use dots to represent the values of a given variable.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nDescription of data\n\n\n\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap flipper_length_mm to the x axis\nAdd the geom_dotplot() layer\nAdjust the dotsize\n\n\n\nlabs_dotplot <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\")\nggp2_dotplot <- ggplot(data = penguins,\n      aes(x = flipper_length_mm)) + \n    geom_dotplot(dotsize = 0.5) \nggp2_dotplot + \n  labs_dotplot\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\n\nDensity plots are similar to frequency polygons and histograms, except the line has been ‘smoothed.’\n\nInstead of dividing the x axis into discrete quantitative ‘bins’ to create groups for the variable values, density plots transform the distribution according to a ‘bandwidth’ parameter.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nThe penguins data.\n\n\n\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap flipper_length_mm to the x axis\nAdd the geom_density() layer\n\n\n\nlabs_density <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\")\nggp2_density <- ggplot(data = penguins, \n        aes(x = flipper_length_mm)) + \n      geom_density() \n\nggp2_density +\n  labs_density\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\n\nA ‘violin plot’ is a variation of a density plot, where the distribution is plotted symmetrically creating a two-sided area.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nThe penguins data.\n\n\n\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\n\nPlace an empty string (\"\") in the x argument\n\nMap and empty string (\"\") to the x and bill_length_mm to the y\nAdd geom_violin()\n\n\n\nlabs_violin <- labs(\n  title = \"Adult foraging penguins\",\n  subtitle = \"Distribution of bill length\",\n  x = \"\",\n  y = \"Bill length (millimeters)\")\nggp2_violin <- ggplot(data = penguins,\n       aes(x = '', \n           y = bill_length_mm)) +\n       geom_violin() \nggp2_violin + \n  labs_violin\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\n\nBox-plots (sometimes called box-and-whisker plots) use position, lines (vertical and horizontal), and points to convey a collection of summary statistics in a single graph.\n\nIn ggplot2, we can create a box-plot for a single numeric variable using geom_boxplot()\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"ggplot2movies\")\nlibrary(ggplot2movies) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nFilter ggplot2movies::movies to only include films after the made after 2000, and remove missing values from mpaa and budget.\n\n\n\nmovies_box <- ggplot2movies::movies |> \n                dplyr::filter(year > 2000 & \n                                mpaa != \"\" & \n                                    !is.na(budget))\nglimpse(movies_box)\n\nRows: 838\nColumns: 24\n$ title       <chr> \"100 Mile Rule\", \"13 Going On 30\", \"15 Minutes\", \"2 Fast 2…\n$ year        <int> 2002, 2004, 2001, 2003, 2004, 2003, 2002, 2002, 2001, 2002…\n$ length      <int> 98, 98, 120, 107, 129, 124, 135, 113, 125, 96, 99, 92, 110…\n$ budget      <int> 1100000, 37000000, 42000000, 76000000, 12000000, 20000000,…\n$ rating      <dbl> 5.6, 6.4, 6.1, 5.1, 7.6, 8.0, 7.8, 7.3, 5.4, 5.4, 6.8, 6.1…\n$ votes       <int> 181, 7859, 10866, 9556, 2663, 21857, 15788, 24174, 7298, 8…\n$ r1          <dbl> 4.5, 4.5, 4.5, 14.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.…\n$ r2          <dbl> 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5…\n$ r3          <dbl> 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5…\n$ r4          <dbl> 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5…\n$ r5          <dbl> 14.5, 4.5, 14.5, 14.5, 4.5, 4.5, 4.5, 4.5, 14.5, 14.5, 4.5…\n$ r6          <dbl> 24.5, 14.5, 24.5, 14.5, 4.5, 4.5, 4.5, 14.5, 14.5, 24.5, 1…\n$ r7          <dbl> 14.5, 24.5, 24.5, 14.5, 14.5, 14.5, 14.5, 24.5, 14.5, 24.5…\n$ r8          <dbl> 14.5, 14.5, 14.5, 4.5, 24.5, 24.5, 34.5, 24.5, 14.5, 4.5, …\n$ r9          <dbl> 4.5, 4.5, 4.5, 4.5, 14.5, 24.5, 24.5, 14.5, 4.5, 4.5, 4.5,…\n$ r10         <dbl> 14.5, 14.5, 4.5, 4.5, 24.5, 14.5, 14.5, 14.5, 4.5, 4.5, 14…\n$ mpaa        <chr> \"R\", \"PG-13\", \"R\", \"PG-13\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", …\n$ Action      <int> 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1…\n$ Animation   <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Comedy      <int> 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1…\n$ Drama       <int> 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0…\n$ Documentary <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Romance     <int> 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Short       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\n\nAssign a blank character string (\"\") to the x axis in labs()\n\nMap length to the y axis and an empty string (\"\") to the x axis\nAdd the geom_boxplot() layer\n\n\n\nlabs_boxplot <- labs(\n  title = \"IMDB Movie information and user ratings\",\n  y = \"Length\", x = \"\")\nggp2_boxplot <- ggplot(data = movies_box, \n           aes(x = \" \", \n               y = length)) +\n        geom_boxplot() \n\nggp2_boxplot + \n  labs_boxplot\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\nSummary StatisticsHow to read a box-plotCompare\n\n\n\nThe table below shows the 25th percentile, the median, the 75th percentile, the IQR, and a histogram of the length column from the movies_box dataset.\n\n\n\n\n\n\n \n  \n    25th \n    Median \n    75th \n    IQR \n    Histogram \n  \n \n\n  \n    92 \n    100 \n    113 \n    21 \n    ▁▇▅▁▁ \n  \n\n\n\n\n\n\n\n\n\nIn the figure below we can see how the box-plot represents each of these numbers using lines and points.\n\n\n\n\n\n\n\nIn ggplot2, values that fall more than 1.5 times the IQR are displayed as individual points (aka outliers). The lines extending from the bottom and top of the main box represent the last non-outlier value in the distribution.\n\n\n\n\nCompare the four graphs of length from movie_box below to the box-plot:"
  },
  {
    "objectID": "distributions.html",
    "href": "distributions.html",
    "title": "ggplot2 gallery",
    "section": "",
    "text": "Comparing distributions across groups with ggplot2 (and friends!)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nOverlapping histograms allow us to compare distributions across the groups of a categorical (or ordinal) variable.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nThe penguins data\n\n\n\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap flipper_length_mm to the x axis and species to fill\nSet alpha to 2/3 inside geom_histogram()\n\n\n\nlabs_ovrlp_hist <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\", \n  fill = \"Species\")\nggp2_ovrlp_hist <- ggplot(data = penguins,\n     aes(x = flipper_length_mm, \n         fill = species)) + \n     geom_histogram(alpha = 2/3) \nggp2_ovrlp_hist + \n  labs_ovrlp_hist\n\n\n\n\n\nGRAPH:\n\n\nHistograms work by dividing the variable provided to x into bins and counting the number of observations in each bin.\nExperiment with different binwidths when comparing distributions across groups.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nOverlapping frequency polygons are similar to overlapping histograms–they allow us to compare distributions of a continuous variable across the levels of a categorical variable.\nInstead of using bars, frequency polygons use lines to show the shape of the distribution.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nThe penguins data.\n\n\n\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap flipper_length_mm to the x and species to group\nMap species to the color aesthetic inside the geom_freqpoly()\n\n\n\nlabs_ovrlp_freq_poly <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\",\n  color = \"Species\")\nggp2_ovrlp_freq_poly <- ggplot(data = penguins, \n       aes(x = flipper_length_mm,\n           group = species)) + \n  geom_freqpoly(aes(color = species))\nggp2_ovrlp_freq_poly + \n  labs_ovrlp_freq_poly\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nWe can use dot-plots to compare distributions of a continuous variable across the levels of a categorical variable, but we need to adjust the way the dots are displayed.\nThe geom_dotplot() function has adjustable method and binposition arguments that allow it to function similar to a histogram or frequency polygon.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nRemove missing sex from penguins\n\n\n\npeng_dotplot <- filter(penguins, !is.na(sex))\nglimpse(peng_dotplot)\n\nRows: 333\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6…\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2…\n$ flipper_length_mm <int> 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 18…\n$ body_mass_g       <int> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3200, 3800…\n$ sex               <fct> male, female, female, female, male, female, male, fe…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap flipper_length_mm to x\nMap species to fill (inside factor())\nInside geom_dotplot, set method to \"histodot\", binwidth to 1, and binpositions to \"all\"\n\n\n\nlabs_ovrlp_dotplot <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\",\n  fill = \"Species\")\nggp2_ovrlp_dotplot <- ggplot(data = peng_dotplot, \n    aes(x = flipper_length_mm,\n        fill = factor(species))) +\n  geom_dotplot(\n    method = \"histodot\",\n    binwidth = 1,\n    binpositions = \"all\")\nggp2_ovrlp_dotplot + \n  labs_ovrlp_dotplot\n\n\n\n\n\nGRAPH:\n\n\n\nbinwidth = When method is “histodot”, this specifies bin width. Defaults to 1/30 of the range of the data\nbinpositions = “all” determines positions of the bins with all the data taken together; this is used for aligning dot stacks across multiple groups.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nWe can also use smaller dots (or points) to show the spread of values for a particular variable with bee-swarm plots\nInstall the ggbeeswarm package.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ndevtools::install_github(\"eclarke/ggbeeswarm\")\nlibrary(ggbeeswarm)\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nThe penguins data.\n\n\n\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap island to the x axis and color\nMap body_mass_g to the y axis\nAdd the ggbeeswarm::geom_beeswarm() layer (with alpha)\n\n\n\nlabs_beeswarm <- labs(\n  title = \"Adult Foraging Penguins\",\n  x = \"Penguin Species\",\n  y = \"Body mass (grams)\")\nggp2_beeswarm <- ggplot(data = penguins, \n       aes(x = species, \n           y = body_mass_g, \n           color = species)) + \n  ggbeeswarm::geom_beeswarm(\n      alpha = 2/3, \n    show.legend = FALSE) \nggp2_beeswarm + \n  labs_beeswarm\n\n\n\n\n\nGRAPH:\n\n\nAdjust the size/shape of the swarm using method = or the geom_quasirandom() function from ggbeeswarm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nThe geom_density() creates a smoothed version of the histogram and allows us to compare the distributions of a continuous variable across the levels of a categorical variable.\nWe can choose to overlap or \"stack\" the smoothed distributions.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nRemove missing sex from the penguins data\n\n\n\npeng_density <- filter(penguins, !is.na(sex))\nglimpse(peng_density)\n\nRows: 333\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6…\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2…\n$ flipper_length_mm <int> 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 18…\n$ body_mass_g       <int> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3200, 3800…\n$ sex               <fct> male, female, female, female, male, female, male, fe…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap the flipper_length_mm to the x and sex to fill\nAdd the geom_density()\nSet the alpha to 1/3 (to handle the overlapping areas)\n\n\n\nlabs_ovrlp_density <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\",\n  fill = \"Sex\")\nggp2_ovrlp_density <- ggplot(data = peng_density, \n       aes(x = flipper_length_mm, \n           fill = sex)) +\n      geom_density(alpha = 1/3) \nggp2_ovrlp_density + \n  labs_ovrlp_density\n\n\n\n\n\nGRAPH:\n\n\nA downside of density plots is the lack of interpretability of the y axis\nMake density area slightly transparent to handle over-plotting.\n\n\n\n\n\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap the flipper_length_mm to the x, add after_stat(count), and map sex to fill\nInside geom_density(), set position to \"stack\"\nSet the alpha to 1/3\n\n\n\nlabs_stack_density <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\", \n  fill = \"Sex\")\nggp2_stack_density <- ggplot(data = peng_density, \n       aes(x = flipper_length_mm, \n           after_stat(count),\n           fill = sex)) +\n      geom_density(position = \"stack\", \n                   alpha = 1/3) \nggp2_stack_density + \n  labs_stack_density\n\n\n\n\n\nGRAPH:\n\n\nAdding after_stat(count) uses the density * n instead of the default density which ‘preserves marginal densities’.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nIf we want to plot density curves but retain the interpretability of the axes, consider comparing multiple distributions using the ggridges package.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ndevtools::install_github(\"wilkelab/ggridges\")\nlibrary(ggridges)\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nRemove missing island from penguins\n\n\n\npeng_ridges <- filter(penguins, !is.na(island))\nglimpse(peng_ridges)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap bill_length_mm to the x axis\nMap island to the y axis and fill\nAdd the ggridges::geom_density_ridges() layer (with alpha set to 2/3)\nMove the legend to the bottom with theme(legend.position = \"bottom\")\n\n\n\nlabs_ridges <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Bill length (millimeters)\",\n  y = \"Island\", fill = \"Island\")\nggp2_ridges <- ggplot(data = peng_ridges,\n       aes(x = bill_length_mm, \n           y = island, \n        fill = island)) +\n  ggridges::geom_density_ridges(alpha = 2/3) + \n    theme(legend.position = \"bottom\")\nggp2_ridges + \n  labs_ridges\n\n\n\n\n\nGRAPH:\n\n\nRidgeline plots are excellent for comparing continuous distributions across groups.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nGrouped box-plots display five different statistical measures across a series of categories, or groups, of a discrete, ordinal, or interval variable.\nThe five statistical measures are 1) the first quartile, 2) the second quartile, and 3) the third quartile. The fourth and fifth values are the largest/smallest values no further than 1.5 X inter-quartile range from the hinges.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nRemove the missing island values from the penguins data.\n\n\n\npeng_box <- filter(penguins, !is.na(island))\nglimpse(peng_box)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap island to the x axis and to fill\nMap bill_length_mm to the y axis\nAdd geom_boxplot() and set the alpha to 2/3\n\n\n\nlabs_grp_boxplots <- labs(\n  title = \"Adult foraging penguins\", \n  subtitle = \"Palmer Archipelago, Antarctica\",\n  x = \"Island\", fill = \"Island\",\n  y = \"Bill length (millimeters)\")\nggp2_grp_boxplots <- ggplot(data = peng_box,\n       aes(x = island, \n           y = bill_length_mm, \n        fill = island)) +\n  geom_boxplot(alpha = 2/3) \nggp2_grp_boxplots + \n  labs_grp_boxplots\n\n\n\n\n\nGRAPH:\n\n\nWhen a categorical variable is supplied, the plot will contain a box for each level or group.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nA ‘violin plot’ is a variation of a density or ridgeline plot, where the distribution is plotted symmetrically creating a two-sided, smoothed distribution.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nRemove missing island from penguins\n\n\n\npeng_violin <- filter(penguins, !is.na(island))\nglimpse(peng_violin)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap island to the x, bill_length_mm to the y, and island to fill\nSet alpha to 2/3\n\n\n\nlabs_grp_violin <- labs(\n  title = \"Adult foraging penguins\", \n  subtitle = \"Palmer Archipelago, Antarctica\",\n  x = \"Island\", fill = \"Island\",\n  y = \"Bill length (millimeters)\")\nggp2_grp_violin <- ggplot(data = peng_violin,\n       aes(x = island, \n           y = bill_length_mm, \n        fill = island)) +\n  geom_violin(alpha = 2/3) \nggp2_grp_violin + \n  labs_grp_violin\n\n\n\n\n\nGRAPH:\n\n\nViolin plots can allow us to compare the ‘center’ and ‘spread’ of continuous variables across categorical groups."
  },
  {
    "objectID": "relationships.html",
    "href": "relationships.html",
    "title": "ggplot2 gallery",
    "section": "",
    "text": "Trends, correlations, and connections with ggplot2 (and friends!)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nScatter plots are used to display two continuous variables.\nIf one of the continuous variables is assumed to affect the other (i.e., outcome vs. predictor), place the outcome on the y axis and the predictor on the x axis.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nThe penguins data\n\n\n\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap bill_length_mm to the x axis\nMap flipper_length_mm to the y axis\nAdd geom_point()\n\n\n\nlabs_scatter <- labs(\n  title = \"Bill Length vs. Flipper Length\",\n  x = \"Bill Length (mm)\", y = \"Flipper length (mm)\")\nggp2_scatter <- penguins |>\n  ggplot(\n    aes(x = bill_length_mm, \n      y = flipper_length_mm)) +\n  geom_point()\n\nggp2_scatter + \n  labs_scatter\n\n\n\n\n\nGRAPH:\n\n\nIf multiple points occupy the same value position, use transparency (alpha) to improve visibility.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nTo display the relationship between two continuous variables across a third categorical variable. Use color to distinguish between categorical levels across the two continuous variable.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nThe penguins data.\n\n\n\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap bill_length_mm to the x axis\nMap flipper_length_mm to the y axis\nMap species to color inside the geom_point()\n\n\n\nlabs_grp_scatter <- labs(\n  title = \"Bill Length vs. Flipper Length\",\n  x = \"Bill Length (mm)\", y = \"Flipper length (mm)\", \n  color = \"Penguin species\")\n\nggp2_grp_scatter <- penguins |> \n  ggplot(\n    aes(x = bill_length_mm, \n        y = flipper_length_mm)) + \n  geom_point(aes(color = species)) \n\nggp2_grp_scatter + \n  labs_grp_scatter\n\n\n\n\n\nGRAPH:\n\n\nAdjust over-plotting with transparency (alpha)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nBubble graphs display relationships between three continuous variables.\nThe position on the x and y axis illustrates the relationship between the first two, and the size of the point (i.e., bubble) conveys the value of the third.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nThe penguins data\n\n\n\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap bill_length_mm to x axis\nMap flipper_length_mm to y axis\nMap body_mass_g to size\nSet alpha to 1/3\nAdd scale_size(), set the range to c(0.1, 10) and name to \"Body Mass (g)\"\nMove the legend to the bottom of the graph with theme(legend.position = \"bottom\")\n\n\n\nlabs_bubble <- labs(\n  title = \"Bill Length vs. Flipper Length\",\n  x = \"Bill Length (mm)\", y = \"Flipper length (mm)\", \n  size = \"Body Mass (g)\")\n\nggp2_bubble <- penguins |> \n  ggplot(\n    aes(x = bill_length_mm, y = flipper_length_mm)) + \n  geom_point(aes(size = body_mass_g), alpha = 1/3) + \n  scale_size(range = c(.1, 10), \n             name = \"Body Mass (g)\") + \n  theme(legend.position = \"bottom\")\n\nggp2_bubble + \n  labs_bubble\n\n\n\n\n\nGRAPH:\n\n\nOnce again, transparency (alpha) can be used to handle over-plotting\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nIn addition to size, the grouped bubble graph uses color to display differences across categorical levels.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nThe penguins data\n\n\n\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap bill_length_mm to the x axis and flipper_length_mm to the y axis\nInside geom_point()\n\nmap body_mass_g to size and species to fill\nset the alpha to 2/3, shape to 21, and color to \"black\"\n\nIn the scale_size()\n\nset range to c(.04, 8) and name to \"Body Mass (g)\"\n\n\n\n\nlabs_grp_bubble <- labs(\n  title = \"Bill Length vs. Flipper Length\",\n  x = \"Bill Length (mm)\", y = \"Flipper length (mm)\", \n  size = \"Body Mass (g)\")\n\nggp2_grp_bubble <- penguins |> \n  ggplot(aes(\n    x = bill_length_mm, y = flipper_length_mm)) + \n  geom_point(\n    aes(size = body_mass_g, fill = species), \n        alpha = 2/3, shape = 21, color = \"black\") + \n  scale_size(range = c(.04, 8), name = \"Body Mass (g)\") \n\nggp2_grp_bubble + \n  labs_grp_bubble\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nAn alluvial graph displays the changes in composition or flow over time or across multiple categories.\nWe can build bump charts in ggplot2 with the ggalluvial package:\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ndevtools::install_github(\"corybrunson/ggalluvial\")\nlibrary(ggalluvial)\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nBelow we create a wide example of the penguins data (as peng_wide)\n\n\n\npeng_wide <- penguins |> \n  drop_na() |> \n  count(year, island, sex, species) |> \n  mutate(year = factor(year)) |> \n  rename(freq = n)\nglimpse(peng_wide)\n\nRows: 30\nColumns: 5\n$ year    <fct> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 20…\n$ island  <fct> Biscoe, Biscoe, Biscoe, Biscoe, Dream, Dream, Dream, Dream, To…\n$ sex     <fct> female, female, male, male, female, female, male, male, female…\n$ species <fct> Adelie, Gentoo, Adelie, Gentoo, Adelie, Chinstrap, Adelie, Chi…\n$ freq    <int> 5, 16, 5, 17, 9, 13, 10, 13, 8, 7, 9, 22, 9, 23, 8, 9, 8, 9, 8…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels (with ggtitle(), ylab(), and labs())\nAdd scale_x_discrete() with the limits set to \"Year\", \"Island\" and \"Species\", and expand to 0.1 and 0.07\nAdd geom_alluvium() with fill set to the sex variable and geom_stratum()\nAdd geom_text(), with stat set to stratum and label set to after_stat(stratum) (inside aes())\n\n\n\nlabs_alluvial <- ggtitle(label = \"Palmer Penguins\", \n    subtitle = \"Stratified by year, island and species\")\nlabs_alluvial_y <- ylab(\"Frequency\") \nlabs_alluvial_fill <- labs(fill = \"Sex\")\n\nggp2_alluvial_w <- ggplot(data = peng_wide,\n  aes(axis1 = year, axis2 = island,\n      axis3 = species, y = freq)) +\n  scale_x_discrete(\n    limits = c(\"Year\", \"Island\", \"Species\"),\n    expand = c(0.1, 0.07)) +\n  geom_alluvium(aes(fill = sex)) +\n  geom_stratum() +\n  geom_text(stat = \"stratum\", \n    aes(label = after_stat(stratum)))\n\nggp2_alluvial_w + \n  labs_alluvial + \n  labs_alluvial_y + \n  labs_alluvial_fill\n\n\n\n\n\nGRAPH:\n\n\nThe ggalluvial functions can handle wide or long data.\n\n\n\n\n\n\n\n\n\n\n\n\nDataCodeGraph\n\n\n\nDATA:\n\n\nBelow we create peng_lodes from the penguins dataset using the to_lodes_form() from the ggalluvial package.\n\n\n\npeng_lodes <- penguins |> \n  select(Year = year, Island = island, \n         Species = species, Sex = sex) |> \n  drop_na() |> \n  count(Year, Island, Species, Sex) |> \n  mutate(Year = factor(Year)) |> \n  rename(Freqency = n) |> \n  ggalluvial::to_lodes_form(key = \"Measure\", axes = 1:3) \nglimpse(peng_lodes)\n\nRows: 90\nColumns: 5\n$ Sex      <fct> female, male, female, male, female, male, female, male, femal…\n$ Freqency <int> 5, 5, 16, 17, 9, 10, 13, 13, 8, 7, 9, 9, 22, 23, 8, 8, 9, 9, …\n$ alluvium <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ Measure  <fct> Year, Year, Year, Year, Year, Year, Year, Year, Year, Year, Y…\n$ stratum  <fct> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2…\n\n\n\n\n\n\nCODE:\n\n\nCreate the labels\nMap Measure to x, Frequency to y, stratum to stratum, alluvium to alluvium, and label to stratum.\nAdd the geom_alluvium() and map Sex to fill\nAdd the geom_stratum() and set the width to 0.45\nAdd geom_text() and set stat to \"stratum\"\n\n\n\nlabs_alluvial <- ggtitle(label = \"Palmer Penguins\", \n    subtitle = \"Stratified by year, island and species\")\n\nggp2_alluvial_lf <- ggplot(data = peng_lodes,\n  aes(x = Measure,\n      y = Freqency,\n      stratum = stratum,\n      alluvium = alluvium,\n      label = stratum)) +\n  ggalluvial::geom_alluvium(aes(fill = Sex)) +\n  ggalluvial::geom_stratum(width = 0.45) +\n  geom_text(stat = \"stratum\")\n\nggp2_alluvial_lf + \n  labs_alluvial\n\n\n\n\n\nGRAPH:\n\n\nConvert data to lodes form using to_lodes_form() from the ggalluvial package.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nBump charts show how numerical (ranked) values change over time for different categories (or groups). Differences are represented with connecting lines (along the y axis) that cover the full timescale (along the x axis).\nWe can build bump charts in ggplot2 with the ggbump package:\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ndevtools::install_github(\"davidsjoberg/ggbump\")\nlibrary(ggbump)\ninstall.packages(\"fivethirtyeight\")\nlibrary(fivethirtyeight) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nWe’ll use the fivethirtyeight::tv_hurricanes data, but slightly restructured and filtered.\n\n\n\nfivethirtyeight::tv_hurricanes |> \n  filter(date > as_date(\"2017-09-15\")) |> \n  pivot_longer(cols = -date, \n    names_to = 'hurricane', \n    values_to = 'value') |> \n  group_by(date) |>\n  mutate(rank = rank(value, \n    ties.method = \"random\")) |> \n  ungroup() -> tidy_hurricanes\nglimpse(tidy_hurricanes)\n\nRows: 40\nColumns: 4\n$ date      <date> 2017-09-16, 2017-09-16, 2017-09-16, 2017-09-16, 2017-09-17,…\n$ hurricane <chr> \"harvey\", \"irma\", \"maria\", \"jose\", \"harvey\", \"irma\", \"maria\"…\n$ value     <dbl> 0.0207, 0.1087, 0.0000, 0.0355, 0.0087, 0.1090, 0.0184, 0.03…\n$ rank      <int> 2, 4, 1, 3, 1, 4, 2, 3, 1, 3, 4, 2, 1, 3, 4, 2, 2, 3, 4, 1, …\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap date to the x, rank to the y, and hurricane to color\nAdd ggbump::geom_bump() and set size to 2\nMove legend to bottom with\n\n\n\nlabs_bump <- labs(title = \"TV News Hurricane Mentions\",   \n  subtitle = \"Between Sep 15-25th, 2017\", \n  x = \"Date\", y = \"Rank\", \n  color = \"Hurricanes\")\nggp2_bump <- ggplot(tidy_hurricanes, \n    aes(x = date, \n      y = rank, \n      color = hurricane)) +\n    ggbump::geom_bump(size = 2) + \n    theme(legend.position = \"bottom\")\n\nggp2_bump + \n  labs_bump\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the ggplot2 graph gallery!",
    "section": "",
    "text": "This Quarto website contains a series of graphs composed in ggplot2. Install ggplot2 using the code below:\nOr install it as part of the tidyverse:"
  },
  {
    "objectID": "index.html#graph-packages",
    "href": "index.html#graph-packages",
    "title": "Welcome to the ggplot2 graph gallery!",
    "section": "Graph Packages",
    "text": "Graph Packages\nMost of the graphs in this gallery can be built using on of ggplot2 ’s many geom_* functions. If a graph requires additional geoms or functions, the development version for these packages have been listed."
  },
  {
    "objectID": "index.html#galleries",
    "href": "index.html#galleries",
    "title": "Welcome to the ggplot2 graph gallery!",
    "section": "Galleries",
    "text": "Galleries\nThe graphs have been broken into separate categories:\n\nUnivariate Graphs\nThe following graphs are used to display single variable distributions:\n\nBar Graphs\nHistograms\nFrequency Polygons\nDot-Plots\nDensity Plots\nViolin Plots\nBox-Plots\n\n\n\nComparing Distributions\nThese graphs can be used to compare multiple variable distributions:\n\nOverlapping Histograms\nOverlapping Frequency Polygons\nOverlapping Dot-Plots\nBee-swarm Plots\nggbeeswarm package\n\n\nView code\n# Bee-swarm Plots\ndevtools::install_github(\"eclarke/ggbeeswarm\")\nlibrary(ggbeeswarm)\n\n\n\nOverlapping Densities\nRidgeline Plots\nggridges package\n\n\nView code\n# Ridgeline plots \ndevtools::install_github(\"wilkelab/ggridges\")\nlibrary(ggridges)\n\n\n\nBox-plots\nViolin plots\nRain-cloud plots\n\n\n\nComparing Amounts\nThe following graphs are used to display amounts:\n\nBar-graphs\nGrouped Bar-graphs\nStacked Bar-graphs\nDot/point plots\nWe cover dot-plots above in the distributions section.\n\nWaffle Charts\nggwaffle package\n\n\nView code\n# Waffle Charts\ndevtools::install_github(\"liamgilbey/ggwaffle\")\nlibrary(ggwaffle)\n\n\n\n\n\n\nComparing Proportions\nThe following graphs are used to compare proportions:\n\nPie Charts\nggpubr package\n\n\nView code\n# Pie Charts \ndevtools::install_github(\"kassambara/ggpubr\")\nlibrary(ggpubr)\n\n\n\nDiverging Bar-graphs\nHorizontal\nVertical\n\nStacked-densities\nMosaic Plots\nggmosaic package\n\n\nView code\n# Mosaic Charts \ndevtools::install_github(\"haleyjeppson/ggmosaic\")\nlibrary(ggmosaic)\n\n\n\nTreemaps\ntreemapify package\n\n\nView code\n# Treemaps\ndevtools::install_github(\"wilkox/treemapify\")\nlibrary(treemapify)\n\n\n\nParallel Sets\n\n\n\nRelationships\nThe following graphs are used to display relationships between two (or more) variables:\n\nScatter Plots\nGrouped Scatter plots\nBubble Charts\nGrouped Bubble Charts\nAlluvial Charts\nggalluvial package\n\n\nView code\n# Alluvial charts\ndevtools::install_github(\"corybrunson/ggalluvial\")\nlibrary(ggalluvial)\n\n\n\nBump Charts\nggbump package\n\n\nView code\n# Bump charts\ndevtools::install_github(\"davidsjoberg/ggbump\")\nlibrary(ggbump)\n\n\n\nSlope-graphs\nDensity Contours\n2D Bins\nHex Bins\nCorrelograms"
  },
  {
    "objectID": "index.html#data",
    "href": "index.html#data",
    "title": "Welcome to the ggplot2 graph gallery!",
    "section": "Data",
    "text": "Data\nThe following datasets have been used to create the graphs:"
  },
  {
    "objectID": "stat-graphs.html",
    "href": "stat-graphs.html",
    "title": "ggplot2 gallery",
    "section": "",
    "text": "Statistical graphs with ggplot2 (and friends!)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nDescription\nMore_description.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nDescription of data\n\n\n\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\n\n\n\nlabs_scatter <- labs(\n  title = \"Bill Length vs. Flipper Length\",\n  x = \"Bill Length (mm)\", y = \"Flipper length (mm)\")\nggp2_scatter <- penguins |>\n  ggplot(\n    aes(x = bill_length_mm, \n      y = flipper_length_mm)) +\n  geom_point()\n\nggp2_scatter + \n  labs_scatter\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "amounts.html",
    "href": "amounts.html",
    "title": "ggplot2 gallery",
    "section": "",
    "text": "Comparing Counts and Summaries with ggplot2 (and friends!)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nGrouped column graphs display calculated ‘summary’ values for a numerical variable across the levels of a second categorical variable. Color is used to make comparisons and distinguish between groups (or levels) of the categorical variable.\nIn ggplot2, we can create grouped column graphs with geom_co().\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"ggplot2movies\")\nlibrary(ggplot2movies) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nDescription of data\n\n\n\nmovies_grp_col <- ggplot2movies::movies |> \n    filter(!is.na(budget) & mpaa != \"\") |> \n    select(budget, mpaa)\nglimpse(movies_grp_col)\n\nRows: 1,813\nColumns: 2\n$ budget <int> 23000000, 16000000, 1100000, 37000000, 85000000, 42000000, 4000…\n$ mpaa   <chr> \"PG-13\", \"PG-13\", \"R\", \"PG-13\", \"R\", \"R\", \"PG\", \"PG-13\", \"R\", \"…\n\n\n\n\n\n\n\nCodeGraphSummary\n\n\n\nCODE:\n\n\nCreate the labels\nMap mpaa to x and budget to y\nInside geom_col(), map mpaa to fill and remove the legend with show.legend = FALSE\nFormat the y axis with scale_y_continuous() by setting labels to scales::dollar\n\n\n\nlabs_col <- labs(\n  title = \"IMDB movie information/user ratings\",\n  x = \"MPAA rating\", \n  y = \"Total budget in US dollars\")\nggp2_col <- ggplot(data = movies_grp_col,\n              aes(x = mpaa, \n                  y = budget)) + \n        geom_col(aes(fill = mpaa), \n          show.legend = FALSE) + \n        scale_y_continuous(labels = scales::dollar) \nggp2_col + \n  labs_col\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\nSUMMARY:\n\n\nIf we pass a categorical variable to the x (like mpaa) and a continuous variable to y (like budget), geom_col() will calculate the sum() of y by levels of x\n\n\n\nggplot2movies::movies |>\n    filter(!is.na(budget) & mpaa != \"\") |>\n    select(budget, mpaa) |>\n    group_by(mpaa) |>\n    summarise(tot_bud = sum(budget, na.rm = TRUE),\n        tot_bud = scales::dollar(tot_bud)) |>\n    ungroup() |>\n    select(MPAA = mpaa,\n        `Total budget` = tot_bud)\n\n\n\nWe can see the underlying summary of budget using dplyr’s group_by() and summarise() functions.\n\n\n\n\n\n\n \n  \n    MPAA \n    Total budget \n  \n \n\n  \n    NC-17 \n    $48,637,000 \n  \n  \n    PG \n    $7,728,300,000 \n  \n  \n    PG-13 \n    $21,955,784,000 \n  \n  \n    R \n    $21,078,510,606 \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\ngeom_col() allows us to display any summary statistic we can calculate for a numerical variable.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nFor example, the code below summarizes the average budget grouped by levels of mpaa rating in the movies dataset.\n\n\n\ninstall.packages(\"ggplot2movies\")\nlibrary(ggplot2movies) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nDescription of data\n\n\n\nmovies_sum_col <- ggplot2movies::movies |>\n    filter(!is.na(budget) & mpaa != \"\") |>\n    select(budget, mpaa) |>\n    group_by(mpaa) |>\n    summarise(avg_budget = mean(budget, na.rm = TRUE)) |>\n    ungroup()\nglimpse(movies_sum_col)\n\nRows: 4\nColumns: 2\n$ mpaa       <chr> \"NC-17\", \"PG\", \"PG-13\", \"R\"\n$ avg_budget <dbl> 6948143, 36454245, 41426008, 19810630\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap mpaa to the x and avg_budget to the y\nMap mpaa to fill inside the aes() of geom_col() and remove the legend with show.lengend = FALSE\nFormat the y axis with scale_y_continuous() by setting labels to scales::dollar\n\n\n\nlabs_col <- labs(\n  title = \"IMDB movie information/user ratings\",\n  x = \"MPAA rating\", \n  y = \"Average budget in US dollars\")\nggp2_col <- ggplot(data = movies_sum_col,\n              aes(x = mpaa, \n                  y = avg_budget)) + \n        geom_col(aes(fill = mpaa), \n          show.legend = FALSE) + \n        scale_y_continuous(labels = scales::dollar) \nggp2_col + \n  labs_col\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nWe can also use bars to look at numeric and categorical variables using geom_bar() by setting fill argument\nThis results in bars differentiated by color and ‘stacked’ on top of each other.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nRemove missing sex from penguins and filter to only \"Adelie\" penguins.\n\n\n\npenguins_ovrlp <- filter(penguins,\n                  !is.na(sex) & species == \"Adelie\")\nglimpse(penguins_ovrlp)\n\nRows: 146\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6…\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2…\n$ flipper_length_mm <int> 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 18…\n$ body_mass_g       <int> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3200, 3800…\n$ sex               <fct> male, female, female, female, male, female, male, fe…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap flipper_length_mm to the x and sex to fill\nAdd the geom_bar() layer\n\n\n\nlabs_bar_ovrlp <- labs(\n  title = \"Adelie adult foraging penguins\",\n  x = \"Flipper length (millimeters)\", \n  fill = \"Sex\")\nggp2_bar_ovrlp <- ggplot(data = penguins_ovrlp,\n          aes(x = flipper_length_mm, fill = sex)) +\n                geom_bar() \nggp2_bar_ovrlp + \n  labs_bar_ovrlp\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nTo compare amounts using bar size (length or height) in a side-to-side display, we can set the position in geom_bar() to \"dodge\" or \"dodge2\"\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nRemove any missing values from sex and species in the penguins data.\n\n\n\npenguins_dodge <- filter(penguins,\n                    !is.na(sex) & !is.na(species))\nglimpse(penguins_dodge)\n\nRows: 333\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6…\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2…\n$ flipper_length_mm <int> 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 18…\n$ body_mass_g       <int> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3200, 3800…\n$ sex               <fct> male, female, female, female, male, female, male, fe…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap species to the x and sex to fill\nInside the geom_bar() function, set position to \"dodge\"\n\n\n\nlabs_bar_dodge <- labs(\n  title = \"Adult foraging penguins\",\n  subtitle = \"position = 'dodge'\",\n  x = \"Penguin Species\",\n  fill = \"Penguin Sex\")\n\nggp2_bar_dodge <- ggplot(data = penguins_dodge,\n                    aes(x = species,\n                      fill = sex)) +\n                    geom_bar(position = \"dodge\")\nggp2_bar_dodge +\n  labs_bar_dodge\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\n\"dodge2\" preserves the total width of the elements and works without a grouping variable in a layer.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nRemove any missing values from sex and species in the penguins data.\n\n\n\npenguins_dodge2 <- filter(penguins,\n                    !is.na(sex) & !is.na(species))\nglimpse(penguins_dodge2)\n\nRows: 333\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6…\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2…\n$ flipper_length_mm <int> 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 18…\n$ body_mass_g       <int> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3200, 3800…\n$ sex               <fct> male, female, female, female, male, female, male, fe…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap species to x and sex to fill\nInside geom_bar(), set position to \"dodge2\"\n\n\n\nlabs_bar_dodge2 <- labs(\n  title = \"Adelie adult foraging penguins\",\n  subtitle = \"position = 'dodge2'\",\n  x = \"Species\",\n  fill = \"Penguin Sex\")\nggp2_bar_dodge2 <- ggplot(data = penguins_dodge2,\n                      aes(x = species,\n                        fill = sex)) +\n                      geom_bar(position = \"dodge2\")\nggp2_bar_dodge2 +\n  labs_bar_dodge2\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nWaffle charts use color to display the levels that make up the values in a categorical variable. The counts for each level are divided into separate colors into a square or grid display.\nWe’ll build a waffle chart using the ggwaffle package.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ndevtools::install_github(\"liamgilbey/ggwaffle\")\nlibrary(ggwaffle)\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nWaffle charts require a special data transformation with ggwaffle::waffle_iron()\nSet the group argument in ggwaffle::aes_d() as the categorical variable you want to see the relative counts for:\n\n\n\npenguins <- palmerpenguins::penguins\npenguins <- dplyr::mutate(penguins, \n              species = as.character(species))\nwaffle_peng <- ggwaffle::waffle_iron(penguins,\n                      aes_d(group = species))\n\nglimpse(waffle_peng)\n\nRows: 344\nColumns: 3\n$ y     <int> 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6…\n$ x     <int> 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3…\n$ group <chr> \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Ade…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nMap the x and y to the x and y axes\nMap group to fill\nAdd ggwaffle::geom_waffle()\nAdd ggwaffle::theme_waffle()\n\n\n\nlabs_waffle <- labs(\n  title = \"Waffle chart of palmer penguin species\",\n  x = \"\", y = \"\", fill = \"Species\")\nggp2_waffle <- ggplot(data = waffle_peng, \n       aes(x = x, \n           y = y, \n           fill = group)) + \n  ggwaffle::geom_waffle() \nggp2_waffle + \n  labs_waffle +\n  ggwaffle::theme_waffle()\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nHeatmaps display quantitative values across an intersection of two categorical (or discrete) variables.\nThe intersecting cells contain variations of color saturation (i.e., the grade of purity or vividness) to represent the numerical values between groups.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"fivethirtyeight\")\nlibrary(fivethirtyeight) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nFor the heatmap, we’re going to re-structure and filter the bob_ross data from the fivethirtyeight package.\n\n\n\nheatmap_ross <- fivethirtyeight::bob_ross |>\n  pivot_longer(-c(episode, season,\n    episode_num, title),\n    names_to = \"object\",\n    values_to = \"present\") |>\n  mutate(present = as.logical(present),\n    object = str_replace_all(object, \"_\", \" \")) |>\n  arrange(episode, object) |> \n  filter(object %in% c('conifer', 'trees', \n    'tree', 'snow', 'palm trees', 'grass', \n    'flowers', 'cactus', 'bushes', 'cirrus', \n    'cumulus', 'deciduous', 'clouds', 'fog')) |>\n  group_by(season, object) |>\n  summarise(occurrences = sum(present)) |>\n  ungroup()\n\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n\nglimpse(heatmap_ross)\n\nRows: 434\nColumns: 3\n$ season      <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2…\n$ object      <chr> \"bushes\", \"cactus\", \"cirrus\", \"clouds\", \"conifer\", \"cumulu…\n$ occurrences <int> 5, 0, 1, 4, 8, 0, 6, 0, 0, 2, 0, 2, 12, 12, 7, 0, 2, 7, 7,…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nAssign season to x, object to y, and occurrences to fill\nAdd the geom_tile()\n\n\n\nlabs_heatmap_tile <- labs(\n  title = \"Bob Ross' plants & clouds\", \n  x = \"Season\", \n  y = \"Plant & Cloud Objects\", \n  fill = \"Occurrences\")\nggp2_heatmap_tile <- ggplot(data = heatmap_ross, \n       aes(x = season, \n           y = object, \n           fill = occurrences)) + \n       geom_tile()\nggp2_heatmap_tile + \n  labs_heatmap_tile\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen would I use this graph?\n\nIn addition to geom_tile(), heatmaps can also be created with the geom_raster() function.\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\ninstall.packages(\"fivethirtyeight\")\nlibrary(fivethirtyeight) \nlibrary(ggplot2)\n\n\n\n\n\nDATA:\n\n\nWe’re going to use the same re-structured version of the fivethirtyeight::bob_ross data, heatmap_ross\n\n\n\nglimpse(heatmap_ross)\n\nRows: 434\nColumns: 3\n$ season      <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2…\n$ object      <chr> \"bushes\", \"cactus\", \"cirrus\", \"clouds\", \"conifer\", \"cumulu…\n$ occurrences <int> 5, 0, 1, 4, 8, 0, 6, 0, 0, 2, 0, 2, 12, 12, 7, 0, 2, 7, 7,…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate the labels\nAssign season to x, object to y, and occurrences to fill\nAdd the geom_raster()\n\n\n\nlabs_heatmap_raster <- labs(\n  title = \"Bob Ross' plants & clouds\", \n  x = \"Season\", \n  y = \"Plant/Cloud Object\", \n  fill = \"Occurrences\")\nggp2_heatmap_raster <- ggplot(data = heatmap_ross, \n       aes(x = season, \n           y = object, \n           fill = occurrences)) + \n       geom_raster()\nggp2_heatmap_raster + \n  labs_heatmap_raster\n\n\n\n\n\nGRAPH:"
  }
]