[
  {
    "objectID": "amt/cleveland_dot_plots.html",
    "href": "amt/cleveland_dot_plots.html",
    "title": "Cleveland Dot Plot",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nA Cleveland dot plot displays differences in a numerical variable for different levels of a categorical variable.\nTypically, the graph contains two points representing the numerical value on the y axis, differentiated by color. A line connecting the two points represents the difference between the two categorical levels (the width of the line is the size of the difference)."
  },
  {
    "objectID": "amt/cleveland_dot_plots.html#more-info",
    "href": "amt/cleveland_dot_plots.html#more-info",
    "title": "Cleveland Dot Plot",
    "section": "More info",
    "text": "More info\nCleveland dot plots are also helpful when comparing multiple differences on a common scale.\n\nDataCodeGraph\n\n\n\nDATA:\n\n\nRemove missing values from sex, bill_length_mm and bill_depth_mm, and group on sex and island to the calculate the median bill length and median bill depth. These variables need to have ‘showtime-ready’ names because they’ll be used in our facets. After un-grouping the data, pivot the new columns into a long (tidy) format with median_measure containing the name of the variable, and median_value containing the numbers.\nFinally, convert median_measure into a factor.\n\n\n\n\nCode\npeng_clev_dots2 <- palmerpenguins::penguins |>\n    dplyr::filter(!is.na(sex) & \n            !is.na(bill_length_mm) & \n                !is.na(bill_depth_mm)) |>\n    dplyr::group_by(sex, island) |>\n    dplyr::summarise(\n        `Median Bill Length` = median(bill_length_mm),\n        `Median Bill Depth` = median(bill_depth_mm)) |>\n    dplyr::ungroup() |> \n    tidyr::pivot_longer(cols = starts_with(\"Med\"), \n        names_to = \"median_measure\", \n        values_to = \"median_value\") |> \n    dplyr::mutate(median_measure = factor(median_measure))\nglimpse(peng_clev_dots2)\n\n\nRows: 12\nColumns: 4\n$ sex            <fct> female, female, female, female, female, female, male, m…\n$ island         <fct> Biscoe, Biscoe, Dream, Dream, Torgersen, Torgersen, Bis…\n$ median_measure <fct> Median Bill Length, Median Bill Depth, Median Bill Leng…\n$ median_value   <dbl> 44.90, 14.50, 42.50, 17.80, 37.60, 17.45, 48.50, 16.00,…\n\n\n\n\n\n\nCODE:\n\n\nRe-create labels\nMap the median_value to the x axis, and island to the y axis, but wrap island in forcats::fct_rev().\nAdd geom_line(), and map island to the group aesthetic. Set the linewidth to 0.75\nAdd geom_point() and map sex to color aesthetic. Set the size to 2.25\nAdd facet_wrap() and facet by median_measure, setting shrink to TRUE and scales to \"free_x\"\n\n\n\n\nCode\nlabs_clev_dots2 <- labs(\n    title = \"Penguin Measurements Differences\",\n    subtitle = \"Male and female penguins\",\n    x = \"Median Bill Length/Depth (mm)\",\n    y = \"Island\",\n    color = \"Sex\"\n)\n\nggp2_clev_dots2 <- ggplot(data = peng_clev_dots2,\n                mapping = aes(x = median_value, \n                              y = fct_rev(island))) +\n                    geom_line(aes(group = island), \n                        linewidth = 0.75) +\n                    geom_point(aes(color = sex), \n                        size = 2.25) +\n                    facet_wrap(. ~ median_measure, \n                        shrink = TRUE, \n                        scales = \"free_x\")\n\nggp2_clev_dots2 +\n    labs_clev_dots2\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "amt/waffle_chart.html",
    "href": "amt/waffle_chart.html",
    "title": "Waffle charts",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ndevtools::install_github(\"liamgilbey/ggwaffle\")\nlibrary(ggwaffle)\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nWaffle charts require a special data transformation with ggwaffle::waffle_iron()\nSet the group argument in ggwaffle::aes_d() as the categorical variable you want to see the relative counts for:\n\n\n\n\nCode\npenguins <- palmerpenguins::penguins\npenguins <- dplyr::mutate(penguins, \n              species = as.character(species))\nwaffle_peng <- ggwaffle::waffle_iron(penguins,\n                      aes_d(group = species))\n\nglimpse(waffle_peng)\n\n\nRows: 344\nColumns: 3\n$ y     <int> 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6…\n$ x     <int> 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3…\n$ group <chr> \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Ade…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap the x and y to the x and y axes\nMap group to fill\nAdd ggwaffle::geom_waffle()\nAdd ggwaffle::theme_waffle()\nMove the legend to the top with theme(legend.position = \"top\")\n\n\n\n\nCode\nlabs_waffle <- labs(\n  title = \"Waffle chart of palmer penguin species\",\n  x = \"\", y = \"\", fill = \"Species\")\nggp2_waffle <- ggplot(data = waffle_peng, \n       aes(x = x, \n           y = y, \n           fill = group)) + \n  ggwaffle::geom_waffle() +\n  theme(legend.position = \"top\")\nggp2_waffle + \n  labs_waffle +\n  ggwaffle::theme_waffle()\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "amt/overlapping_bar_graphs.html",
    "href": "amt/overlapping_bar_graphs.html",
    "title": "Overlapping bar-graphs",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nIf we’d like to use two set of overlapping bars to display numerical values for different categorical variable levels, we can use the fill argument in geom_bar() or geom_col()\nThis results in bars differentiated by color and ‘stacked’ on top of each other."
  },
  {
    "objectID": "amt/overlapping_bar_graphs.html#side-to-side-bar-graphs",
    "href": "amt/overlapping_bar_graphs.html#side-to-side-bar-graphs",
    "title": "Overlapping bar-graphs",
    "section": "Side-to-side bar graphs",
    "text": "Side-to-side bar graphs\ngeom_bar() has additional options for arranging overlapping bars. We can set the position argument to \"dodge\" or \"dodge2, depending on how we’d like the data displayed.\n\nDatadodgedodge2Compare\n\n\n\nDATA:\n\n\nWe’ll be using the penguins_dodge dataset (with missing values removed from species and sex, and limited to \"Dream\" island)\n\n\n\n\nCode\npenguins_dodge <- filter(penguins,\n                      !is.na(species) & \n                        !is.na(sex) &\n                            island == \"Dream\")\nglimpse(penguins_dodge)\n\n\nRows: 123\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Dream, Dream, Dream, Dream, Dream, Dream, Dream, Dre…\n$ bill_length_mm    <dbl> 39.5, 37.2, 39.5, 40.9, 36.4, 39.2, 38.8, 42.2, 37.6…\n$ bill_depth_mm     <dbl> 16.7, 18.1, 17.8, 18.9, 17.0, 21.1, 20.0, 18.5, 19.3…\n$ flipper_length_mm <int> 178, 178, 188, 184, 195, 196, 190, 180, 181, 184, 18…\n$ body_mass_g       <int> 3250, 3900, 3300, 3900, 3325, 4150, 3950, 3550, 3300…\n$ sex               <fct> female, male, female, male, female, male, male, fema…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\ndodge:\n\n\n\n\nposition = \"dodge\" preserves the vertical position of a geom while adjusting the horizontal position\nrequires the grouping variable to be be specified in the global or ⁠geom_⁠ layer\n\n\nCreate labels\nMap species to the x and island to group and fill\nInside the geom_bar() function, set position to \"dodge\"\n\n\n\n\nCode\nlabs_bar_dodge <- labs(\n  title = \"Adult foraging penguins\",\n  subtitle = \"Penguins on Dream island\",\n  x = \"Sex\",\n  y = \"Count\",\n  fill = \"Species\",\n  caption = \"position = 'dodge'\")\nggp2_bar_dodge <- ggplot(data = penguins_dodge,\n                    aes(x = sex, \n                        group = species, \n                        fill = species)) +\n                    geom_bar(\n                        position = \"dodge\")\nggp2_bar_dodge +\n  labs_bar_dodge\n\n\n\n\n\n\n\n\n\n\n\n\n\ndodge2:\n\n\n\n\nworks without a grouping variable in a layer\nworks with bars and rectangles\nuseful for arranging graphs with variable widths.\n\n\nCreate labels\nMap species to x and island to fill\nInside geom_bar(), set position to \"dodge2\"\n\n\n\n\nCode\nlabs_bar_dodge2 <- labs(\n  title = \"Adult foraging penguins\",\n  subtitle = \"Penguins on Dream island\",\n  x = \"Sex\",\n  y = \"Count\",\n  fill = \"Species\",\n  caption = \"position = 'dodge2'\")\nggp2_bar_dodge2 <- ggplot(data = penguins_dodge,\n                    aes(x = sex, \n                        fill = species)) +\n                    geom_bar(\n                        position = \"dodge2\")\nggp2_bar_dodge2 +\n  labs_bar_dodge2\n\n\n\n\n\n\n\n\n\n\n\n\n\nCOMPARE:"
  },
  {
    "objectID": "amt/grp_bar_graphs.html",
    "href": "amt/grp_bar_graphs.html",
    "title": "Grouped bar-graphs",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nRemove the missing values and reduce the palmerpenguins::penguins dataset to only body_mass_g and island, then group the data by island and calculate the mean body_mass_g (as avg_body_mass_g).\n\n\n\n\nCode\npeng_grp_col <- palmerpenguins::penguins |>\n    dplyr::select(body_mass_g, island) |> \n    tidyr::drop_na() |> \n    dplyr::group_by(island) |>\n    dplyr::summarise(\n        avg_body_mass_g = mean(body_mass_g)\n        ) |>\n    dplyr::ungroup()\nglimpse(peng_grp_col)\n\n\nRows: 3\nColumns: 2\n$ island          <fct> Biscoe, Dream, Torgersen\n$ avg_body_mass_g <dbl> 4716.018, 3712.903, 3706.373\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap island to the x and avg_body_mass_g to the y\nMap island to fill inside the aes() of geom_col()\n\n\n\n\nCode\nlabs_grp_col <- labs(\n    title = \"Average Penguin Mass\",\n    subtitle = \"What's the average mass of penguins per Island?\",\n    x = \"Island\",\n    y = \"Average penguin body mass (g)\")\nggp2_grp_col <- ggplot(data = peng_grp_col,\n              aes(x = island, \n                  y = avg_body_mass_g)) + \n        geom_col(aes(fill = island),\n            show.legend = FALSE)\nggp2_grp_col + \n    labs_grp_col\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "amt/heatmaps.html",
    "href": "amt/heatmaps.html",
    "title": "Heatmaps",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nHeatmaps display quantitative values across an intersection of two categorical (or discrete) variables.\nThe intersecting cells contain variations of color saturation (i.e., the grade of purity or vividness) to represent the numerical values between groups.\nHeatmap legends should be positioned on top or bottom and justified horizontally to preserve shape and improve readability."
  },
  {
    "objectID": "amt/heatmaps.html#more-info",
    "href": "amt/heatmaps.html#more-info",
    "title": "Heatmaps",
    "section": "More info",
    "text": "More info\nIn addition to geom_tile(), heatmaps can also be created with the geom_raster() function.\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nAssign season to x, object to y, and occurrences to fill\nAdd the geom_raster()\nMove the legend to the bottom with theme(legend.position = \"bottom\")\n\n\n\n\nCode\nlabs_heatmap_raster <- labs(\n  title = \"Bob Ross' plants & clouds\", \n  x = \"Episode\", \n  y = \"Plant/Cloud Object\", \n  fill = \"Occurrences\")\nggp2_heatmap_raster <- ggplot(data = heatmap_ross, \n       aes(x = season, \n           y = object, \n           fill = occurrences)) + \n       geom_raster() + \n    theme(legend.position = \"bottom\")\nggp2_heatmap_raster + \n  labs_heatmap_raster\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "amt/sum_bar_graphs.html",
    "href": "amt/sum_bar_graphs.html",
    "title": "Summary bar-graphs",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nSummary bar-graphs display the sum (or total) of a numerical variable across the levels of a second categorical variable. Color is used to make comparisons and distinguish between groups (or levels) of the categorical variable.\nIn ggplot2, we can create summary bar-graphs with geom_bar()."
  },
  {
    "objectID": "amt/sum_bar_graphs.html#more-info",
    "href": "amt/sum_bar_graphs.html#more-info",
    "title": "Summary bar-graphs",
    "section": "More Info",
    "text": "More Info\nNote that we didn’t have to write any code to calculate the total body_mass_g (displayed on the y axis) by island.\nThat’s because ggplot2 does this for us!\n\n\n_bar() vs. _col():\n\ngeom_bar() will map a categorical variable to the x or y and display counts for the discrete levels (see stat_count() for more info)\n\n\n\ngeom_col() will map both x and y aesthetics, and is used when we want to display numerical (quantitative) values across the levels of a categorical variable. geom_col() assumes these values have been created in their own column (see stat_identity() for more info)\n\n\n\nSummaryIdentity vs. Count\n\n\n\nSUMMARY:\n\n\nIf we pass a categorical variable to the x (like island) and a continuous variable to y (like body_mass_kg), geom_col() will calculate the sum() of y by levels of x\n\n\nWe can see the underlying summary of budget using dplyr’s group_by() and summarise() functions.\n\n\n\n\nCode\npalmerpenguins::penguins |> \n    dplyr::select(body_mass_g, island) |> \n    tidyr::drop_na() |> \n    # divide the mass value by 1000\n    dplyr::mutate(\n        body_mass_kg = body_mass_g / 1000\n    ) |> \n    dplyr::group_by(island) |>\n    dplyr::summarise(\n       `Total Penguin Body Mass (kg)` = sum(body_mass_kg)) |>\n    dplyr::ungroup() |> \n    dplyr::select(`Island` = island, \n        `Total Penguin Body Mass (kg)`)\n\n\n\n\n\n\n\n\n \n  \n    Island \n    Total Penguin Body Mass (kg) \n  \n \n\n  \n    Biscoe \n    787.575 \n  \n  \n    Dream \n    460.400 \n  \n  \n    Torgersen \n    189.025 \n  \n\n\n\n\n\n\n\n\n\nSTATS:\n\n\nThe geom_bar() geom will also create grouped bar-graphs, but we have to switch the stat argument to \"identity\".\n\n\n\n\nCode\nggplot(data = peng_sum_col,\n    aes(x = island,\n        y = body_mass_kg)) +\n    geom_col(aes(fill = island), \n        show.legend = FALSE,\n        stat = \"identity\")  +\n    labs_sum_col"
  },
  {
    "objectID": "dist/ridgeline_plots.html",
    "href": "dist/ridgeline_plots.html",
    "title": "Ridgeline Plots",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nRemove missing island from penguins\n\n\n\n\nCode\npeng_ridges <- filter(penguins, !is.na(island))\nglimpse(peng_ridges)\n\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap bill_length_mm to the x axis\nMap island to the y axis and fill\nAdd the ggridges::geom_density_ridges() layer (with alpha set to 2/3)\nRemove the legend with show.legend = FALSE\n\n\n\n\nCode\nlabs_ridges <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Bill length (millimeters)\",\n  y = \"Island\", fill = \"Island\")\nggp2_ridges <- ggplot(data = peng_ridges,\n       aes(x = bill_length_mm, \n           y = island, \n        fill = island)) +\n  ggridges::geom_density_ridges(alpha = 2/3, \n      show.legend = FALSE)\nggp2_ridges + \n  labs_ridges\n\n\n\n\n\n\n\n\n\nGRAPH:\n\n\nRidgeline plots are excellent for comparing continuous distributions across groups."
  },
  {
    "objectID": "dist/bee_swarm_plots.html",
    "href": "dist/bee_swarm_plots.html",
    "title": "Bee-swarm Plots",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nWe can also use smaller dots (or points) to show the spread of values for a particular variable with bee-swarm plots\nInstall the ggbeeswarm package."
  },
  {
    "objectID": "dist/bee_swarm_plots.html#more-info",
    "href": "dist/bee_swarm_plots.html#more-info",
    "title": "Bee-swarm Plots",
    "section": "More info",
    "text": "More info\n\nMethodSide\n\n\n\nMETHOD:\n\n\nUse method to adjust the shape of the beeswarm (swarm, compactswarm, hex, square, center, or centre)\n\n\n\n\nSet the point shape to 21 to control the fill and color\n\n\n\n\nCode\nggp2_compact_swarm <- ggplot(data = peng_beeswarm,\n    mapping = aes(x = species,\n                  y = bill_ratio,\n                color = species)) +\n    ggbeeswarm::geom_beeswarm(\n      aes(fill = species),\n        method = 'compactswarm', \n        dodge.width = 0.5,\n        shape = 21,\n        color = \"#ffffff\",\n        alpha = 2/3, size = 1.75,\n        show.legend = FALSE) \nggp2_compact_swarm + \n    # add labels\n    labs_beeswarm\n\n\n\n\n\n\n\n\n\n\n\n\n\nSIDE:\n\n\nFor a beeswarm that falls across the vertical axis, use the side argument.\n\n\n\n\nCode\nggp2_rside_swarm <- ggplot(data = peng_beeswarm,\n    mapping = aes(x = species,\n                  y = bill_ratio,\n                color = species)) +\n    ggbeeswarm::geom_beeswarm(\n      aes(fill = species),\n        method = 'compactswarm', \n        side = 1, # right/upwards\n        dodge.width = 0.5,\n        shape = 21,\n        color = \"#ffffff\",\n        alpha = 2/3, size = 1.75,\n        show.legend = FALSE) \nggp2_rside_swarm + \n    # add labels\n    labs_beeswarm"
  },
  {
    "objectID": "dist/grouped_violin_plots.html",
    "href": "dist/grouped_violin_plots.html",
    "title": "Grouped Violin-Plots",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nA ‘violin plot’ is a variation of a density or ridgeline plot, where the distribution is plotted symmetrically, creating a two-sided, smoothed distribution."
  },
  {
    "objectID": "dist/grouped_violin_plots.html#more-info",
    "href": "dist/grouped_violin_plots.html#more-info",
    "title": "Grouped Violin-Plots",
    "section": "More info",
    "text": "More info\n\nQuartilesKernelBandwidth\n\n\n\ndraw_quantiles:\n\n\n\nChange the shape of the line with linetype and linewidth.\n\nWe can include lines for the 25th, 50th, and 75th quartiles using the draw_quantiles argument.\n\n\n\n\nCode\nggplot(data = peng_violin,\n       aes(x = island, \n           y = bill_length_mm, \n        fill = island)) +\n  geom_violin(draw_quantiles = c(0.25, 0.5, 0.75),\n      alpha = 1/2, \n      linewidth = 0.5, \n      show.legend = FALSE) \n\n\n\n\n\n\n\n\n\n\n\n\n\nkernel:\n\n\nThe kernel argument let’s us change the “kernel density estimate” used to create the violin shape. The possible kernel density estimates are \"gaussian\", \"epanechnikov\", \"rectangular\", \"triangular\", \"biweight\", \"cosine\", and \"optcosine\"\n\n\n\n\nCode\nggplot(data = peng_violin,\n       aes(x = island, \n           y = bill_length_mm, \n        fill = island)) +\n  geom_violin(alpha = 1/2, \n      linewidth = 0.5, \n      kernel = \"rectangular\",\n      show.legend = FALSE) \n\n\n\n\n\n\n\n\n\n\n\n\n\nbw:\n\n\nWe can directly adjust the shape of the violin with the bw argument, which is the standard deviation of the smoothing kernel. The trim argument trim(s) the tails of the violins to the range of the data.\n\n\n\n\nCode\n# bw of 0.5\ngrp_violin_bw0p5 <- ggplot(data = peng_violin,\n       aes(x = island, \n           y = bill_length_mm, \n        fill = island)) +\n  geom_violin(bw = 0.5, \n      alpha = 2/3, \n      trim = TRUE,\n      show.legend = FALSE) \ngrp_violin_bw0p5 + \n    labs_grp_violin + \n    labs(caption = \"bw = 0.5\")\n# bw of 4.5\ngrp_violin_bw4p5 <- ggplot(data = peng_violin,\n       aes(x = island, \n           y = bill_length_mm, \n        fill = island)) +\n  geom_violin(bw = 4.5, \n      alpha = 2/3, \n      trim = TRUE,\n      show.legend = FALSE) \ngrp_violin_bw4p5 + \n    labs_grp_violin + \n    labs(caption = \"bw = 4.5\")"
  },
  {
    "objectID": "dist/grouped_box_plots.html",
    "href": "dist/grouped_box_plots.html",
    "title": "Grouped Box-plots",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nGrouped box-plots display five different statistical measures across a series of categories, or groups, of a discrete, ordinal, or interval variable.\nThe five statistical measures are 1) the first quartile, 2) the second quartile, and 3) the third quartile. The fourth and fifth values are the largest/smallest values no further than 1.5 X inter-quartile range from the hinges."
  },
  {
    "objectID": "dist/grouped_box_plots.html#more-info",
    "href": "dist/grouped_box_plots.html#more-info",
    "title": "Grouped Box-plots",
    "section": "More info",
    "text": "More info\n\nNotchesOutliers\n\n\n\nNOTCHES:\n\n\nAdd notches to the box-plot using the notch = TRUE and notchwidth arguments.\n\n\n\n\nCode\nggp2_grp_box_notch <- ggplot(data = peng_box,\n       aes(x = island, \n           y = bill_length_mm, \n        fill = island)) +\n  geom_boxplot(\n      notch = TRUE, \n      notchwidth = 0.85, \n      alpha = 2/3, \n      show.legend = FALSE) \nggp2_grp_box_notch + \n    labs_grp_boxplots\n\n\n\n\n\n\n\n\n\n\n\n\n\nOUTLIERS:\n\n\nBox-plots display outliers using points, and we can change the color these using the outlier.colour argument. Inside the geom_boxplot(), we map island to color and set outlier.colour to NULL:\n\n\n\n\nCode\nggp2_grp_box_outliers <- ggplot(data = peng_box,\n       aes(x = island, \n           y = bill_length_mm,\n           fill = island)) +\n  geom_boxplot(aes(color = island),\n      outlier.colour = NULL, \n      outlier.size = 2,\n      notch = TRUE, \n      notchwidth = 0.85, \n      alpha = 2/3, \n      show.legend = FALSE) \nggp2_grp_box_outliers + \n    labs_grp_boxplots"
  },
  {
    "objectID": "dist/overlapping_frequency_polygons.html",
    "href": "dist/overlapping_frequency_polygons.html",
    "title": "Overlapping Frequency Polygons",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nThe penguins data.\n\n\n\n\nCode\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap flipper_length_mm to the x and species to group\nMap species to the color aesthetic inside the geom_freqpoly()\n\n\n\n\nCode\nlabs_ovrlp_freq_poly <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\",\n  color = \"Species\")\nggp2_ovrlp_freq_poly <- ggplot(data = penguins, \n       aes(x = flipper_length_mm,\n           group = species)) + \n  geom_freqpoly(aes(color = species))\nggp2_ovrlp_freq_poly + \n  labs_ovrlp_freq_poly\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "dist/overlapping_histograms.html",
    "href": "dist/overlapping_histograms.html",
    "title": "Overlapping Histograms",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nThe penguins data\n\n\n\n\nCode\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap flipper_length_mm to the x axis and species to fill\nSet alpha to 2/3 inside geom_histogram()\n\n\n\n\nCode\nlabs_ovrlp_hist <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\", \n  fill = \"Species\")\nggp2_ovrlp_hist <- ggplot(data = penguins,\n     aes(x = flipper_length_mm, \n         fill = species)) + \n     geom_histogram(alpha = 2/3) \nggp2_ovrlp_hist + \n  labs_ovrlp_hist\n\n\n\n\n\n\n\n\n\nGRAPH:\n\n\nHistograms work by dividing the variable provided to x into bins and counting the number of observations in each bin.\n\n\n\nExperiment with different binwidths when comparing distributions across groups."
  },
  {
    "objectID": "dist/raincloud_plots.html",
    "href": "dist/raincloud_plots.html",
    "title": "Raincloud Plots",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRaincloud plots are a combination of density graph, a box-plot, and a beeswarm (or jitter) plot, and are used to compare distributions of quantitative/numerical variables across the levels of a categorical (or discrete) grouping variable.\nThe user-written package for creating raincloud plots (raincloudplots), or they can be built using the ggdist and package and geoms from ggplot2."
  },
  {
    "objectID": "dist/raincloud_plots.html#raincloudplots",
    "href": "dist/raincloud_plots.html#raincloudplots",
    "title": "Raincloud Plots",
    "section": "raincloudplots",
    "text": "raincloudplots\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nUse the raincloudplots::raincloud_1x1() to build the plot, assigning peng_1x1 to data_1x1\n- assign colors and fills\n- set the size (of the points) and alpha (for opacity)\n\n\n\n\nCode\nggp2_raincloud <- raincloudplots::raincloud_1x1(\n    data_1x1 = peng_1x1,\n    colors = (c('#0bd3d3', '#f890e7')),\n    fills = (c('#0bd3d3', '#f890e7')),\n    size = 0.8,\n    alpha = 3/4,\n    ort = 'h'\n) \n\nggp2_raincloud_x <- ggp2_raincloud +\n    ggplot2::scale_x_continuous(\n        breaks = c(1, 2),\n        labels = c(\"2008\", \"2009\"),\n        limits = c(0, 3))\n\nggp2_raincloud_x + \n    ggplot2::labs(title = \"Flipper length of Palmer penguins\",\n        subtitle = \"Years 2008 & 2009\", \n         x = \"Year\", y = \"Flipper length (mm)\")\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "dist/raincloud_plots.html#more-info",
    "href": "dist/raincloud_plots.html#more-info",
    "title": "Raincloud Plots",
    "section": "More info",
    "text": "More info\n\nDataBox-plotDensityPoints\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nWe’ll use the peng_raincloud data (with the missing values removed from species and body_mass_g).\n\n\n\n\nCode\n# remove missing\npeng_raincloud <- palmerpenguins::penguins |> \n    filter(!is.na(species) & !is.na(body_mass_g))\nglimpse(peng_raincloud)\n\n\nRows: 342\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0…\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2…\n$ flipper_length_mm <int> 181, 186, 195, 193, 190, 181, 195, 193, 190, 186, 18…\n$ body_mass_g       <int> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3475, 4250…\n$ sex               <fct> male, female, female, female, male, female, male, NA…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\nggplot2::geom_boxplot()\n\n\nCreate labels\nFor the first layer, we create a box-plot with geom_boxplot(), but include notches and remove the outliers.\n\n\n\n\nCode\nlabs_raincloud_2 <- ggplot2::labs(\n    title = \"Flipper length of Palmer penguins\",\n         x = \"Flipper length (mm)\",\n         y = \"Species\")\nggp2_box <- ggplot(peng_raincloud,\n    aes( x = flipper_length_mm, y = species)) + \n  geom_boxplot(aes(fill = species),\n    notch = TRUE, \n    notchwidth = 0.9,\n    width = .15, \n    outlier.shape = NA,\n    show.legend = FALSE)\nggp2_box + \n    labs_raincloud_2\n\n\n\n\n\n\n\n\n\n\n\n\n\nggdist::stat_halfeye()\n\n\nWe then add a horizontal density curve with ggdist::stat_halfeye(), mapping species to fill, and adjusting the size and shape of the density curve and shifting it slightly above the box-plot.\n\n\n\n\nCode\nggp2_stat_halfeye <- ggp2_box +\n  ggdist::stat_halfeye(aes(fill = species),\n    adjust = 0.6, # shape = adjust * density estimator\n    .width = 0, # can use probabilities or 0\n    point_colour = NA, # removes the point in center\n    orientation = \"horizontal\", # like the box-plot\n    height = 0.5, # height of curve\n    justification = -0.3, # shift vertically above box\n    show.legend = FALSE # don't need this \n) \nggp2_stat_halfeye + \n    labs_raincloud_2\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2::geom_point()\n\n\nThe final layer is a geom_point(), mapping fill to species and setting position to position_jitter(). Additional adjustments to the points include:\n\nUsing shape = 21, we can color the outside of the point (white makes it appear to glow).\nManually set the height, which refers to the vertical area for the points\n\n\n\n\n\nCode\nggp2_jitter <- ggp2_stat_halfeye + \n    geom_point(aes(fill = species),\n        position = position_jitter(\n          seed = 321, \n          height = .07),\n            shape = 21, \n            color = \"#ffffff\", \n            alpha = 1/3, size = 1.8,\n            show.legend = FALSE) \nggp2_jitter + \n    labs_raincloud_2"
  },
  {
    "objectID": "dist/raincloud_plots.html#even-more-info",
    "href": "dist/raincloud_plots.html#even-more-info",
    "title": "Raincloud Plots",
    "section": "Even more info",
    "text": "Even more info\n\nMore examples#TidyTuesday exampleMore resources\n\n\n\nCédric Scherer covered raincloud plots in this great write-up for #TidyTuesday.\nCédric also covers some alternative methods for plotting the points (I particularly like using bands instead of points when displaying the rainclouds vertically).\nWe can switch to this layout by applying ggplot2::coord_flip() to the ggp2_stat_halfeye layer, then adding geom_point() with shape set to 95\n\n\n\n\nCode\nggp2_stat_halfeye + \n    ggplot2::coord_flip() + \nggplot2::geom_point(\n    shape = 95,\n    size = 8,\n    alpha = .2\n  ) + \n    theme(legend.position = \"none\") + \n    labs_raincloud_2\n\n\n\n\n\n\n\n\n\n\n\n\n\nPolished Graph\n\n\nThe code to re-create the #TidyTuesday graph is contained in this gist.\n\n\n\n\n\n\n\n\n\nMORE RESOURCES\n\n\n\nRaincloud plots: a multi-platform tool for robust data visualization. 1\nShape and point sizes in R. 2\nRainCloudPlots package on GitHub. 3"
  },
  {
    "objectID": "dist/overlapping_dot_plots.html",
    "href": "dist/overlapping_dot_plots.html",
    "title": "Overlapping Dot-Plots",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nRemove missing sex from penguins\n\n\n\n\nCode\npeng_dotplot <- dplyr::filter(penguins, !is.na(sex))\ndplyr::glimpse(peng_dotplot)\n\n\nRows: 333\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6…\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2…\n$ flipper_length_mm <int> 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 18…\n$ body_mass_g       <int> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3200, 3800…\n$ sex               <fct> male, female, female, female, male, female, male, fe…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap flipper_length_mm to x\nMap species to fill (inside factor())\nInside geom_dotplot, set method to \"histodot\", binwidth to 1.35, and binpositions to \"all\"\n\n\n\n\nCode\nlabs_ovrlp_dotplot <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\",\n  y = \"Count\",\n  fill = \"Species\")\nggp2_ovrlp_dotplot <- ggplot(data = peng_dotplot, \n    aes(x = flipper_length_mm,\n        fill = factor(species))) +\n  geom_dotplot(\n    method = \"histodot\",\n    binwidth = 1.35,\n    binpositions = \"all\")\nggp2_ovrlp_dotplot + \n  labs_ovrlp_dotplot\n\n\n\n\n\n\n\n\n\nGRAPH:\n\n\n\n\nbinwidth = When method is “histodot”, this specifies bin width. Defaults to 1/30 of the range of the data\nbinpositions = “all” determines positions of the bins with all the data taken together; this is used for aligning dot stacks across multiple groups."
  },
  {
    "objectID": "dist/overlapping_stacked_density_plots.html",
    "href": "dist/overlapping_stacked_density_plots.html",
    "title": "Overlapping Density Plot",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nDensity plots are smoothed version(s) of histogram(s). They can are great for comparing the distributions of a continuous variable across the levels of a categorical variable.\ngeom_density() creates a kernel density estimate. The default position argument is \"identity\", which takes the data as is. However, we can change position to \"stack\" to display overlapping distributions."
  },
  {
    "objectID": "dist/overlapping_stacked_density_plots.html#more-info",
    "href": "dist/overlapping_stacked_density_plots.html#more-info",
    "title": "Overlapping Density Plot",
    "section": "More info",
    "text": "More info\nggplot2 has multiple options for overlapping density plots, so which one to use will depend on how you’d like to display the relative distributions in your data. We’ll cover three options below:\n\nposition = \"stack\"after_stat(count)position = \"fill\"\n\n\n\nSTACK:\n\n\nIf we change the position to \"stack\" we can see the smoothed estimates are ‘stacked’ on top each other (and the y axis shifts slightly).\n\n\n\n\nCode\nlabs_stack_density <- labs(\n    title = \"Adult foraging penguins\",\n    x = \"Flipper length (millimeters)\",\n    fill = \"Sex\")\nggp2_stack_density <- ggplot(data = peng_density,\n    mapping = aes(x = flipper_length_mm,\n               fill = sex)) +\n    geom_density(position = \"stack\",\n                 alpha = 1 / 3)\nggp2_stack_density +\n    labs_stack_density\n\n\n\n\n\n\n\nSetting position to 'stack' loses marginal densities\n\n\n\n\n\n\n\n\n\n\nAFTER STAT:\n\n\nIf we include after_stat(count) as one of our mapped aesthetics, the mapping is postponed until after statistical transformation, and uses the density * n instead of the default density.\n\n\n\n\nCode\nlabs_after_stat_density <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\", \n  fill = \"Sex\")\nggp2_after_stat_density <- ggplot(data = peng_density, \n       aes(x = flipper_length_mm, \n           after_stat(count),\n           fill = sex)) +\n      geom_density(position = \"stack\", \n                   alpha = 1/3) \nggp2_after_stat_density + \n  labs_after_stat_density\n\n\n\n\n\n\n\nAdding after_stat(count) ‘preserves marginal densities.’, which result in more a interpretable y axis (depending on the audience)\n\n\n\n\n\n\n\n\n\n\nFILL:\n\n\nUsing after_stat(count) with position = \"fill\" creates in a conditional density estimate.\n\n\n\n\nCode\nlabs_fill_density <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\", \n  fill = \"Sex\")\nggp2_fill_density <- ggplot(data = peng_density, \n       aes(x = flipper_length_mm, \n           after_stat(count),\n           fill = sex)) +\n      geom_density(position = \"fill\", \n                   alpha = 1/3) \nggp2_fill_density + \n  labs_fill_density\n\n\n\n\n\n\n\nThis results in a y axis ranging from 0-1, and the area filled with the relative proportional values."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "Welcome! This website contains a collection of graphs composed in using ggplot2 (and friends!).\nInstall ggplot2 using the code below:\nOr install ggplot2 as part of the tidyverse:"
  },
  {
    "objectID": "index.html#the-data",
    "href": "index.html#the-data",
    "title": "Overview",
    "section": "The Data",
    "text": "The Data\nTo improve reproducibility, the majority of the graphs are built using the palmerpenguins::penguins data.\n\n\n\n…so…many…PENGUINS!\n\n\n\n\nArtwork by @allison_horst\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\n\n\nSome of the graphs use datasets from the fivethirtyeight package.\n\n\nCode\ninstall.packages(\"fivethirtyeight\")\nlibrary(fivethirtyeight)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExpand to view the data in the fivethirtyeight package\n\n\n\n\n\n\nTo view a table of available datasets in the fivethirtyeight package, view the Data Frame Name and Article Title columns in the datasets_master table:\n\n\n\n\n\n\n\n\n\n\n\n\n\nA few of the graphs are built using the ggplot2movies::movies data.\n\n\n\n\n\n\n\n\n\nCode\ninstall.packages(\"ggplot2movies\")\nlibrary(ggplot2movies)"
  },
  {
    "objectID": "index.html#graph-categories",
    "href": "index.html#graph-categories",
    "title": "Overview",
    "section": "Graph Categories",
    "text": "Graph Categories\nGraphs have been categorized into the following types:\n\nUnivariate graphs\n\nAmounts\nProportions\n\nComparing Distributions\n\nRelationships\n\nSome graphs would justifiably belong in more than one category, and wherever this is the cases, I’ve tried to include other uses in the notes."
  },
  {
    "objectID": "index.html#the-graphs-code-style-structure",
    "href": "index.html#the-graphs-code-style-structure",
    "title": "Overview",
    "section": "The Graphs (code style & structure)",
    "text": "The Graphs (code style & structure)\nThe gallery follows a Rule of Least Power Principle, in the sense that “a language with a straightforward syntax may be easier to analyze than an otherwise equivalent one with more complex structure.”\nIn other words, assuming the reader has some understanding of R and the tidyverse, the code for each graph is meant to be read and understood without having to run it.\nEach graph has the same four sections and structure: Packages, Data, Code, and Graph\n\n\n\n\n\n\nExpand to view the graph code structure\n\n\n\n\n\n\nPackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\nDescription of data\n\n\n\n\nCode\ndf <- tibble::tibble(X = sample(x = 1:100, 10, FALSE),\n                     Y = rlnorm(10, 1, 3))\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCode for creating graph\n\n\n\n\nCode\n# labels\nlabs_graph <- ggplot2::labs(title = \"Title\", \n                            subtitle = \"subtitle\", \n                            x = \"X\", y = \"Y\")\n# layers\nggp2_graph <- ggplot2::ggplot(data = df, \n    mapping = aes(x = X, y = Y)) + \n    ggplot2::geom_blank()\n# graph\nggp2_graph + \n    labs_graph\n\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\nAll objects have the following naming conventions:\n\n\nGraph labels have the labs_ prefix\nGraph layers have a ggp2_ prefix\n\n\nCode Style:\nI’ve attempted to balance brevity and clarity, but with the assumption that its best to err on the latter. I’ve also followed the general principle that if a graph can be easily built using one of ggplot2 ’s geom_* functions, that method is shown first.\nIf the graph can’t be built with ggplot2’s geoms and requires additional packages/geoms/functions, instructions for installing the development version for these packages has been provided.\nExtensions:\nBelow are the graphs requiring additional packages/extensions:\n\nWaffle charts\nggwaffle package\n\n\nCode\n# Waffle Charts\ndevtools::install_github(\"liamgilbey/ggwaffle\")\nlibrary(ggwaffle)\n\n\n\nPie Charts\nggpubr package\n\n\nCode\n# Pie Charts \ndevtools::install_github(\"kassambara/ggpubr\")\nlibrary(ggpubr)\n\n\n\nMosaic Plots\nggmosaic package\n\n\nCode\n# Mosaic Charts \ndevtools::install_github(\"haleyjeppson/ggmosaic\")\nlibrary(ggmosaic)\n\n\n\nTreemaps\ntreemapify package\n\n\nCode\n# Treemaps\ndevtools::install_github(\"wilkox/treemapify\")\nlibrary(treemapify)\n\n\n\nBee-swarm Plots\nggbeeswarm package\n\n\nCode\n# Bee-swarm Plots\ndevtools::install_github(\"eclarke/ggbeeswarm\")\nlibrary(ggbeeswarm)\n\n\n\nRidgeline Plots\nggridges package\n\n\nCode\n# Ridgeline plots \ndevtools::install_github(\"wilkelab/ggridges\")\nlibrary(ggridges)\n\n\n\nRain-cloud plots\nraincloudplots and ggdist packages\n\n\nCode\n# Rain-cloud plots \nremotes::install_github('jorvlan/raincloudplots')\nremotes::install_github('mjskay/ggdist')\nlibrary(raincloudplots)\nlibrary(ggdist)\n\n\n\nAlluvial charts\nggalluvial package\n\n\nCode\n# Alluvial charts\ndevtools::install_github(\"corybrunson/ggalluvial\")\nlibrary(ggalluvial)\n\n\n\nBump charts\nggbump package\n\n\nCode\n# Bump charts\ndevtools::install_github(\"davidsjoberg/ggbump\")\nlibrary(ggbump)\n\n\n\nParallel Sets\nggforce package\n\n\nCode\n# Bump charts\ndevtools::install_github(\"thomasp85/ggforce\")\nlibrary(ggforce)"
  },
  {
    "objectID": "index.html#theme",
    "href": "index.html#theme",
    "title": "Overview",
    "section": "Theme",
    "text": "Theme\nThe theme used in the graphs is custom and uses combined elements from ggplot2::theme_minimal() and ggplot2::theme_void(). View it here"
  },
  {
    "objectID": "geoms/geom_bar.html",
    "href": "geoms/geom_bar.html",
    "title": "geom_bar()",
    "section": "",
    "text": "PackagesPlot Data\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\n\n\n\n\n\nPLOT DATA:\n\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nRemove the missing values from island and sex from palmerpenguins::penguins\n\n\n\n\nCode\npeng_bar <- palmerpenguins::penguins |> \n    dplyr::filter(!is.na(island) & !is.na(sex))\nglimpse(peng_bar)\n\n\nRows: 333\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6…\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2…\n$ flipper_length_mm <int> 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 18…\n$ body_mass_g       <int> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3200, 3800…\n$ sex               <fct> male, female, female, female, male, female, male, fe…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\n\n\n\n\n\nBAR\n\n\n\n\n\n\nBuildDataPlot\n\n\n\nBUILD:\n\n\n\n\nCode\nggp2_bar_x <- ggp2_bar_base + \n    geom_bar(mapping = aes(x = island))\nbld_bar_x <- ggplot2::ggplot_build(ggp2_bar_x)\nnames(bld_bar_x)\n\n\n[1] \"data\"   \"layout\" \"plot\"  \n\n\nCode\nbar_x_data <- bld_bar_x[[\"data\"]][[1]]\nglimpse(bar_x_data)\n\n\nRows: 3\nColumns: 16\n$ y           <dbl> 163, 123, 47\n$ count       <dbl> 163, 123, 47\n$ prop        <dbl> 1, 1, 1\n$ x           <mppd_dsc> 1, 2, 3\n$ flipped_aes <lgl> FALSE, FALSE, FALSE\n$ PANEL       <fct> 1, 1, 1\n$ group       <int> 1, 2, 3\n$ ymin        <dbl> 0, 0, 0\n$ ymax        <dbl> 163, 123, 47\n$ xmin        <mppd_dsc> 0.55, 1.55, 2.55\n$ xmax        <mppd_dsc> 1.45, 2.45, 3.45\n$ colour      <lgl> NA, NA, NA\n$ fill        <chr> \"grey35\", \"grey35\", \"grey35\"\n$ linewidth   <dbl> 0.5, 0.5, 0.5\n$ linetype    <dbl> 1, 1, 1\n$ alpha       <lgl> NA, NA, NA\n\n\n\n\n\n\nDATA:\n\n\nExtract the data from the ggplot2 object.\n\n\n\n\nCode\nselect(bar_x_data, fill)\n\n\n    fill\n1 grey35\n2 grey35\n3 grey35\n\n\n\n\n\n\nPLOT:\n\n\n\n\nCode\nbld_bar_x[[\"plot\"]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFILL\n\n\n\n\n\n\nBuildDataPlot\n\n\n\nBUILD:\n\n\n\n\nCode\nggp2_bar_fill <- ggp2_bar_base + \n    geom_bar(mapping = aes(x = island, \n        fill = island), show.legend = FALSE)\nbld_bar_fill <- ggplot2::ggplot_build(ggp2_bar_fill)\nnames(bld_bar_fill)\n\n\n[1] \"data\"   \"layout\" \"plot\"  \n\n\nCode\nbar_fill_data <- bld_bar_fill[[\"data\"]][[1]]\nglimpse(bar_fill_data)\n\n\nRows: 3\nColumns: 16\n$ fill        <chr> \"#F8766D\", \"#00BA38\", \"#619CFF\"\n$ y           <dbl> 163, 123, 47\n$ count       <dbl> 163, 123, 47\n$ prop        <dbl> 1, 1, 1\n$ x           <mppd_dsc> 1, 2, 3\n$ flipped_aes <lgl> FALSE, FALSE, FALSE\n$ PANEL       <fct> 1, 1, 1\n$ group       <int> 1, 2, 3\n$ ymin        <dbl> 0, 0, 0\n$ ymax        <dbl> 163, 123, 47\n$ xmin        <mppd_dsc> 0.55, 1.55, 2.55\n$ xmax        <mppd_dsc> 1.45, 2.45, 3.45\n$ colour      <lgl> NA, NA, NA\n$ linewidth   <dbl> 0.5, 0.5, 0.5\n$ linetype    <dbl> 1, 1, 1\n$ alpha       <lgl> NA, NA, NA\n\n\nCode\nggp2_bar_fill2 <- ggp2_bar_base + \n    geom_bar(mapping = aes(x = island, \n        fill = sex)) \nbld_bar_fill2 <- ggplot2::ggplot_build(ggp2_bar_fill2)\nnames(bld_bar_fill2)\n\n\n[1] \"data\"   \"layout\" \"plot\"  \n\n\nCode\nbar_fill2_data <- bld_bar_fill2[[\"data\"]][[1]]\nglimpse(bar_fill2_data)\n\n\nRows: 6\nColumns: 16\n$ fill        <chr> \"#F8766D\", \"#00BFC4\", \"#F8766D\", \"#00BFC4\", \"#F8766D\", \"#0…\n$ y           <dbl> 163, 83, 123, 62, 47, 23\n$ count       <dbl> 80, 83, 61, 62, 24, 23\n$ prop        <dbl> 1, 1, 1, 1, 1, 1\n$ x           <mppd_dsc> 1, 1, 2, 2, 3, 3\n$ flipped_aes <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE\n$ PANEL       <fct> 1, 1, 1, 1, 1, 1\n$ group       <int> 1, 2, 3, 4, 5, 6\n$ ymin        <dbl> 83, 0, 62, 0, 23, 0\n$ ymax        <dbl> 163, 83, 123, 62, 47, 23\n$ xmin        <mppd_dsc> 0.55, 0.55, 1.55, 1.55, 2.55, 2.55\n$ xmax        <mppd_dsc> 1.45, 1.45, 2.45, 2.45, 3.45, 3.45\n$ colour      <lgl> NA, NA, NA, NA, NA, NA\n$ linewidth   <dbl> 0.5, 0.5, 0.5, 0.5, 0.5, 0.5\n$ linetype    <dbl> 1, 1, 1, 1, 1, 1\n$ alpha       <lgl> NA, NA, NA, NA, NA, NA\n\n\n\n\n\n\nDATA:\n\n\nExtract the data from the ggplot2 object.\n\n\n\n\nCode\ndplyr::select(bar_fill_data, x, y, fill)\n\n\n  x   y    fill\n1 1 163 #F8766D\n2 2 123 #00BA38\n3 3  47 #619CFF\n\n\nCode\ndplyr::count(bar_fill2_data, x, y, fill) |> \n    tidyr::pivot_wider(names_from = x,\n        values_from = n)\n\n\n# A tibble: 6 × 5\n      y fill      `1`   `2`   `3`\n  <dbl> <chr>   <int> <int> <int>\n1    83 #00BFC4     1    NA    NA\n2   163 #F8766D     1    NA    NA\n3    62 #00BFC4    NA     1    NA\n4   123 #F8766D    NA     1    NA\n5    23 #00BFC4    NA    NA     1\n6    47 #F8766D    NA    NA     1\n\n\n\n\n\n\nPLOT:\n\n\n\n\nCode\nbld_bar_fill[[\"plot\"]]\n\n\n\n\n\nCode\nbld_bar_fill2[[\"plot\"]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDODGE\n\n\n\n\n\n\nBuildDataPlot\n\n\n\nBUILD:\n\n\n\n\nCode\nggp2_bar_dodge <- ggp2_bar_base + \n    geom_bar(mapping = \n            aes(x = island, fill = sex),\n                position = \"dodge\") \nbld_bar_dodge <- ggplot2::ggplot_build(ggp2_bar_dodge)\nnames(bld_bar_dodge)\n\n\n[1] \"data\"   \"layout\" \"plot\"  \n\n\nCode\nbar_dodge_data <- bld_bar_dodge[[\"data\"]][[1]]\nglimpse(bar_dodge_data)\n\n\nRows: 6\nColumns: 16\n$ fill        <chr> \"#F8766D\", \"#00BFC4\", \"#F8766D\", \"#00BFC4\", \"#F8766D\", \"#0…\n$ y           <dbl> 80, 83, 61, 62, 24, 23\n$ count       <dbl> 80, 83, 61, 62, 24, 23\n$ prop        <dbl> 1, 1, 1, 1, 1, 1\n$ x           <mppd_dsc> 0.775, 1.225, 1.775, 2.225, 2.775, 3.225\n$ flipped_aes <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE\n$ PANEL       <fct> 1, 1, 1, 1, 1, 1\n$ group       <int> 1, 2, 3, 4, 5, 6\n$ ymin        <dbl> 0, 0, 0, 0, 0, 0\n$ ymax        <dbl> 80, 83, 61, 62, 24, 23\n$ xmin        <mppd_dsc> 0.55, 1.00, 1.55, 2.00, 2.55, 3.00\n$ xmax        <mppd_dsc> 1.00, 1.45, 2.00, 2.45, 3.00, 3.45\n$ colour      <lgl> NA, NA, NA, NA, NA, NA\n$ linewidth   <dbl> 0.5, 0.5, 0.5, 0.5, 0.5, 0.5\n$ linetype    <dbl> 1, 1, 1, 1, 1, 1\n$ alpha       <lgl> NA, NA, NA, NA, NA, NA\n\n\n\n\n\n\nDATA:\n\n\nExtract the data from the ggplot2 object.\n\n\n\n\nCode\nselect(bar_dodge_data, x, y, fill)\n\n\n      x  y    fill\n1 0.775 80 #F8766D\n2 1.225 83 #00BFC4\n3 1.775 61 #F8766D\n4 2.225 62 #00BFC4\n5 2.775 24 #F8766D\n6 3.225 23 #00BFC4\n\n\n\n\n\n\nPLOT:\n\n\n\n\nCode\nbld_bar_dodge[[\"plot\"]]"
  },
  {
    "objectID": "uni/frequency_polygons.html",
    "href": "uni/frequency_polygons.html",
    "title": "Frequency Polygons",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nThe penguins data\n\n\n\n\nCode\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap flipper_length_mm to the x axis\nAdd the geom_freqpoly() layer\n\n\n\n\nCode\nlabs_freqpoly <- labs(\n  title = \"Adult foraging penguins\",\n  subtitle = \"Distribution of flipper length\",\n  x = \"Flipper length (millimeters)\")\nggp2_freqpoly <- ggplot(data = penguins,\n      aes(x = flipper_length_mm)) + \n    geom_freqpoly()\nggp2_freqpoly + \n  labs_freqpoly\n\n\n\n\n\n\n\n\n\nGRAPH:\n\n\n\nExperiment to see how many bins fit your variable’s distribution"
  },
  {
    "objectID": "uni/histograms.html",
    "href": "uni/histograms.html",
    "title": "Histograms",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nThe penguins data.\n\n\n\n\nCode\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nAssign flipper_length_mm to the x\nAdd the geom_histogram()\nAdjust the bins accordingly\n\n\n\n\nCode\nlabs_histogram <- labs(\n  title = \"Adult foraging penguins\",\n  subtitle = \"Distribution of flipper length\",\n  x = \"Flipper length (millimeters)\")\n\nggp2_hist <- ggplot(data = penguins,\n     aes(x = flipper_length_mm)) + \n     geom_histogram() \n\nggp2_hist + \n  labs_histogram\n\n\n\n\n\n\n\n\n\nGRAPH:\n\n\n\n\nThe standard number of bins is 30, but ‘you should always override this value, exploring multiple widths to find the best to illustrate the stories in your data.’"
  },
  {
    "objectID": "uni/dot_plots.html",
    "href": "uni/dot_plots.html",
    "title": "Dot-plots",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nThe penguins data\n\n\n\n\nCode\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap flipper_length_mm to the x axis\nAdd the geom_dotplot() layer\nAdjust the dotsize\n\n\n\n\nCode\nlabs_dotplot <- labs(\n  title = \"Adult foraging penguins\",\n  subtitle = \"Distribution of flipper length\",\n  x = \"Flipper length (millimeters)\")\nggp2_dotplot <- ggplot(data = penguins,\n      aes(x = flipper_length_mm)) + \n    geom_dotplot(dotsize = 0.5) \nggp2_dotplot + \n  labs_dotplot\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "uni/density_plots.html",
    "href": "uni/density_plots.html",
    "title": "Density Plots",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nThe penguins data.\n\n\n\n\nCode\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap flipper_length_mm to the x axis\nAdd the geom_density() layer\n\n\n\n\nCode\nlabs_density <- labs(\n  title = \"Adult foraging penguins\",\n  subtitle = \"Distribution of flipper length\",\n  x = \"Flipper length (millimeters)\")\nggp2_density <- ggplot(data = penguins, \n        aes(x = flipper_length_mm)) + \n      geom_density() \n\nggp2_density +\n  labs_density\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "uni/box_plots.html",
    "href": "uni/box_plots.html",
    "title": "Box-Plots",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nWe’ll be using the penguins data from palmerpenguins.\n\n\n\n\nCode\npenguins <- palmerpenguins::penguins \nglimpse(penguins)\n\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\n\nAssign a blank character string (\"\") to the x axis in labs()\n\nMap flipper_length_mm to the y axis and an empty string (\"\") to the x axis\nAdd the geom_boxplot() layer\n\n\n\n\nCode\nlabs_boxplot <- labs(\n  title = \"Adult foraging penguins\",\n  subtitle = \"Distribution of flipper length\",\n  x = \"\",\n  y = \"Flipper length (millimeters)\")\nggp2_boxplot <- ggplot(data = penguins,\n           aes(x = \"\", \n               y = flipper_length_mm)) +\n        geom_boxplot() \nggp2_boxplot + \n  labs_boxplot\n\n\n\n\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\n\nMore Info\nBelow we provide more information on interpreting box-plots.\n\nmovies dataGraphInterpretCompare\n\n\n\nWe’ll use the ggplot2movies::movies data to create a box-plot of the each movie length\n\n\n\n\nCode\ninstall.packages(\"ggplot2movies\")\nlibrary(ggplot2movies) \nlibrary(ggplot2)\n\n\n\n\nFilter ggplot2movies::movies to only include films after the made after 2000, and remove missing values from mpaa and budget\n\n\n\n\nCode\nmovies_box <- ggplot2movies::movies |> \n                dplyr::filter(year > 2000 & \n                                mpaa != \"\" & \n                                    !is.na(budget))\nhead(movies_box)\n\n\n# A tibble: 6 × 24\n  title      year length budget rating votes    r1    r2    r3    r4    r5    r6\n  <chr>     <int>  <int>  <int>  <dbl> <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 100 Mile…  2002     98  1.1e6    5.6   181   4.5   4.5   4.5   4.5  14.5  24.5\n2 13 Going…  2004     98  3.7e7    6.4  7859   4.5   4.5   4.5   4.5   4.5  14.5\n3 15 Minut…  2001    120  4.2e7    6.1 10866   4.5   4.5   4.5   4.5  14.5  24.5\n4 2 Fast 2…  2003    107  7.6e7    5.1  9556  14.5   4.5   4.5   4.5  14.5  14.5\n5 2046       2004    129  1.2e7    7.6  2663   4.5   4.5   4.5   4.5   4.5   4.5\n6 21 Grams   2003    124  2  e7    8   21857   4.5   4.5   4.5   4.5   4.5   4.5\n# … with 12 more variables: r7 <dbl>, r8 <dbl>, r9 <dbl>, r10 <dbl>,\n#   mpaa <chr>, Action <int>, Animation <int>, Comedy <int>, Drama <int>,\n#   Documentary <int>, Romance <int>, Short <int>\n\n\n\n\n\n\nBelow we create a box-plot of the length variable using the methods described above:\n\n\n\n\nCode\nlabs_boxplot <- labs(\n  title = \"IMDB Movie information and user ratings\",\n  y = \"Movie length (min)\", x = \"\")\nggp2_boxplot <- ggplot(data = movies_box, \n           aes(x = \" \", \n               y = length)) +\n        geom_boxplot() \n\nggp2_boxplot + \n  labs_boxplot\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe table below shows the 25th percentile, the median, the 75th percentile, the IQR, and a histogram of the length variable from the movies_box dataset.\n\n\n\n\n\n\n \n  \n    25th \n    Median \n    75th \n    IQR \n    Histogram \n  \n \n\n  \n    92 \n    100 \n    113 \n    21 \n    ▁▇▅▁▁ \n  \n\n\n\n\n\n\n\nThe figure below displays how each element in the box-plot represents each of the statistics using lines and points.\n\n\n\n\n\n\n\n\n\nIn ggplot2, values that fall more than 1.5 times the IQR are displayed as individual points (aka outliers). The lines extending from the bottom and top of the main box represent the last non-outlier value in the distribution.\n\n\n\n\nCompare the geom_point(), geom_freqpoly(), geom_histogram(), and geom_density() graphs of length from movie_box below to the geom_boxplot():"
  },
  {
    "objectID": "uni/violin_plot.html",
    "href": "uni/violin_plot.html",
    "title": "Violin Plots",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nThe penguins data.\n\n\n\n\nCode\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\n\nPlace an empty string (\"\") in the x argument\n\nMap and empty string (\"\") to the x and flipper_length_mm to the y\nAdd geom_violin()\n\n\n\n\nCode\nlabs_violin <- labs(\n  title = \"Adult foraging penguins\",\n  subtitle = \"Distribution of flipper length\",\n  x = \"\",\n  y = \"Flipper length (millimeters)\")\nggp2_violin <- ggplot(data = penguins,\n       aes(x = '', \n           y = flipper_length_mm)) +\n       geom_violin() \nggp2_violin + \n  labs_violin\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "uni/bar_graphs.html",
    "href": "uni/bar_graphs.html",
    "title": "Bar-graphs",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nA bar-graph (or bar-chart) is typically used to display counts for the discrete levels of a categorical variable, like political affiliation, hair color, or race/ethnicity (or species of penguin!).\nBar charts can be arranged vertically or horizontally, but the length of the bar represents the ‘count’ for each level value.\nIn ggplot2, bar charts can be built using geom_bar() (see also: geom_col())."
  },
  {
    "objectID": "uni/bar_graphs.html#more-info",
    "href": "uni/bar_graphs.html#more-info",
    "title": "Bar-graphs",
    "section": "More info",
    "text": "More info\n\nstat = \"count\"geom_col()\n\n\n\nstat_count():\n\n\nThe default stat argument in geom_bar() is set to \"count\", which counts the number of cases at each x position, so it’s ideal for categorical variables (or factors). The stat_count() function can also be used to create bar-graphs using the geom argument.\nThe link between geom_[geom_name](stat = \"[stat_name]\") and stat_[stat_name](geom = \"[geom_name]\") is shown below:\n\n\n\n\nCode\nggp2_geom_bar <- ggplot(data = penguins_bar,\n       aes(x = species)) +\n    geom_bar(aes(fill = species), \n        stat = \"count\") + \n    labs(title = \"geom_bar(stat = 'count')\")\nggp2_geom_bar\nggp2_stat_count <- ggplot(data = penguins_bar,\n       aes(x = species)) +\n    stat_count(aes(fill = species), \n        geom = \"bar\") + \n    labs(title = \"stat_count(geom = 'bar')\")\nggp2_stat_count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_col:\n\n\nTo create a bar-graph with geom_col(), the count variable needs to be computed before being mapped into the graph y aesthetic.\n\n\n\n\nCode\npenguins_bar |> \n    # create column of counts \n    dplyr::count(species, name = \"count\") |> \n    # map into x and y\n    ggplot(mapping = aes(x = species, y = count)) +\n    geom_col(aes(fill = species), \n        show.legend = FALSE) + \n    labs_bar +\n    labs(caption = \"*created with geom_col()\")\n# compare to geom_bar()\nggp2_bar +\n  labs_bar"
  },
  {
    "objectID": "rela/scatter_plot.html",
    "href": "rela/scatter_plot.html",
    "title": "Scatter-Plots",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nThe penguins data\n\n\n\n\nCode\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap bill_length_mm to the x axis\nMap flipper_length_mm to the y axis\nAdd geom_point()\n\n\n\n\nCode\nlabs_scatter <- labs(\n  title = \"Bill Length vs. Flipper Length\",\n  x = \"Bill Length (mm)\", y = \"Flipper length (mm)\")\nggp2_scatter <- penguins |>\n  ggplot(\n    aes(x = bill_length_mm, \n      y = flipper_length_mm)) +\n  geom_point()\n\nggp2_scatter + \n  labs_scatter\n\n\n\n\n\n\n\n\n\nGRAPH:\n\n\nIf multiple points occupy the same value position, use transparency (alpha) to improve visibility."
  },
  {
    "objectID": "rela/correlograms.html",
    "href": "rela/correlograms.html",
    "title": "Correlograms",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\n# install.packages(\"palmerpenguins\")\n# library(palmerpenguins) \n# library(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\n\n\nCode\n# penguins <- palmerpenguins::penguins\n# glimpse(penguins)\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "rela/bubble_charts.html",
    "href": "rela/bubble_charts.html",
    "title": "Bubble Charts",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nThe penguins data\n\n\n\n\nCode\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap bill_length_mm to x axis\nMap flipper_length_mm to y axis\nMap body_mass_g to size\nSet alpha to 1/3\nAdd scale_size(), set the range to c(0.1, 10) and name to \"Body Mass (g)\"\nMove the legend to the bottom of the graph with theme(legend.position = \"bottom\")\n\n\n\n\nCode\nlabs_bubble <- labs(\n  title = \"Bill Length vs. Flipper Length\",\n  x = \"Bill Length (mm)\", y = \"Flipper length (mm)\", \n  size = \"Body Mass (g)\")\n\nggp2_bubble <- penguins |> \n  ggplot(\n    aes(x = bill_length_mm, y = flipper_length_mm)) + \n  geom_point(aes(size = body_mass_g), alpha = 1/3) + \n  scale_size(range = c(.1, 10), \n             name = \"Body Mass (g)\") + \n  theme(legend.position = \"bottom\")\n\nggp2_bubble + \n  labs_bubble\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "rela/alluvial_charts.html",
    "href": "rela/alluvial_charts.html",
    "title": "Alluvial Charts",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ndevtools::install_github(\"corybrunson/ggalluvial\")\nlibrary(ggalluvial)\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nBelow we create a wide example of the penguins data (as peng_wide)\n\n\n\n\nCode\npeng_wide <- penguins |> \n  tidyr::drop_na() |> \n  dplyr::count(year, island, sex, species) |> \n  dplyr::mutate(year = factor(year)) |> \n  dplyr::rename(freq = n)\nglimpse(peng_wide)\n\n\nRows: 30\nColumns: 5\n$ year    <fct> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 20…\n$ island  <fct> Biscoe, Biscoe, Biscoe, Biscoe, Dream, Dream, Dream, Dream, To…\n$ sex     <fct> female, female, male, male, female, female, male, male, female…\n$ species <fct> Adelie, Gentoo, Adelie, Gentoo, Adelie, Chinstrap, Adelie, Chi…\n$ freq    <int> 5, 16, 5, 17, 9, 13, 10, 13, 8, 7, 9, 22, 9, 23, 8, 9, 8, 9, 8…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels (with ggtitle(), ylab(), and labs())\nAdd scale_x_discrete() with the limits set to \"Year\", \"Island\" and \"Species\", and expand to 0.1 and 0.07\nAdd geom_alluvium() with fill set to the sex variable and geom_stratum()\nAdd geom_text(), with stat set to stratum and label set to after_stat(stratum) (inside aes())\n\n\n\n\nCode\nlabs_alluvial <- ggtitle(label = \"Palmer Penguins\", \n    subtitle = \"Stratified by year, island and species\")\nlabs_alluvial_y <- ylab(\"Frequency\") \nlabs_alluvial_fill <- labs(fill = \"Sex\")\n\nggp2_alluvial_w <- ggplot(data = peng_wide,\n  aes(axis1 = year, axis2 = island,\n      axis3 = species, y = freq)) +\n  scale_x_discrete(\n    limits = c(\"Year\", \"Island\", \"Species\"),\n    expand = c(0.1, 0.07)) +\n  geom_alluvium(aes(fill = sex)) +\n  geom_stratum() +\n  geom_text(stat = \"stratum\", \n    aes(label = after_stat(stratum)),\n      size = 3)\n\nggp2_alluvial_w + \n  labs_alluvial + \n  labs_alluvial_y + \n  labs_alluvial_fill\n\n\n\n\n\n\n\n\n\nGRAPH:\n\n\nThe ggalluvial functions can handle wide or long data.\n\n\n\n\n\n\n\n\n\n\n\n\nMore info\n\nDataCodeGraph\n\n\n\nDATA:\n\n\nBelow we create peng_lodes from the penguins dataset using the to_lodes_form() from the ggalluvial package.\n\n\n\n\nCode\npeng_lodes <- penguins |> \n  dplyr::select(Year = year, Island = island, \n         Species = species, Sex = sex) |> \n  tidyr::drop_na() |> \n  dplyr::count(Year, Island, Species, Sex) |> \n  dplyr::mutate(Year = factor(Year)) |> \n  dplyr::rename(Freqency = n) |> \n  ggalluvial::to_lodes_form(key = \"Measure\", axes = 1:3) \nglimpse(peng_lodes)\n\n\nRows: 90\nColumns: 5\n$ Sex      <fct> female, male, female, male, female, male, female, male, femal…\n$ Freqency <int> 5, 5, 16, 17, 9, 10, 13, 13, 8, 7, 9, 9, 22, 23, 8, 8, 9, 9, …\n$ alluvium <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ Measure  <fct> Year, Year, Year, Year, Year, Year, Year, Year, Year, Year, Y…\n$ stratum  <fct> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2…\n\n\n\n\n\n\nCODE:\n\n\nCreate labels\nMap Measure to x, Frequency to y, stratum to stratum, alluvium to alluvium, and label to stratum.\nAdd the geom_alluvium() and map Sex to fill\nAdd the geom_stratum() and set the width to 0.45\nAdd geom_text() and set stat to \"stratum\"\n\n\n\n\nCode\nlabs_alluvial <- ggtitle(label = \"Palmer Penguins\", \n    subtitle = \"Stratified by year, island and species\")\n\nggp2_alluvial_lf <- ggplot(data = peng_lodes,\n  aes(x = Measure,\n      y = Freqency,\n      stratum = stratum,\n      alluvium = alluvium,\n      label = stratum)) +\n  ggalluvial::geom_alluvium(aes(fill = Sex)) +\n  ggalluvial::geom_stratum(width = 0.45) +\n  geom_text(stat = \"stratum\", size = 2.5)\n\nggp2_alluvial_lf + \n  labs_alluvial\n\n\n\n\n\n\n\n\n\nGRAPH:\n\n\nConvert data to lodes form using to_lodes_form() from the ggalluvial package."
  },
  {
    "objectID": "rela/slope_graphs.html",
    "href": "rela/slope_graphs.html",
    "title": "Slope graphs",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nSlope graphs show changes in a numeric value (displayed on the y axis) typically over two points in time (along the x axis). The values for each group or unit of measurement are connected by lines, and any differences between the two time points are represented by the slope of the lines (hence the name, ‘slope chart’).\nWe can build slope graphs in ggplot2 using the geom_line() and geom_point() functions."
  },
  {
    "objectID": "rela/slope_graphs.html#more-info",
    "href": "rela/slope_graphs.html#more-info",
    "title": "Slope graphs",
    "section": "More info",
    "text": "More info\nWe can also use faceting with slope graphs to add a third categorical variable.\n\nDataCodeGraph\n\n\n\nDATA:\n\n\nWe’ll be using the penguins dataset again, but group remove the missing values and group it by year, island, and sex.\n\n\n\n\nCode\npeng_grp_slope <- palmerpenguins::penguins |>\n    dplyr::select(year, sex, island,\n                  contains(\"mm\")) |> \n    tidyr::drop_na() |> \n    dplyr::filter(year != 2007) |>\n    dplyr::group_by(year, sex, island) |>\n    dplyr::summarise(across(\n        .cols = contains(\"mm\"), \n        .fns = mean, \n            na.rm = TRUE, \n        .names = \"avg_{.col}\")) |>\n    dplyr::ungroup()\nglimpse(peng_grp_slope)\n\n\nRows: 12\nColumns: 6\n$ year                  <int> 2008, 2008, 2008, 2008, 2008, 2008, 2009, 2009, …\n$ sex                   <fct> female, female, female, male, male, male, female…\n$ island                <fct> Biscoe, Dream, Torgersen, Biscoe, Dream, Torgers…\n$ avg_bill_length_mm    <dbl> 42.78387, 41.42353, 36.61250, 46.35000, 46.08824…\n$ avg_bill_depth_mm     <dbl> 15.02903, 17.52941, 17.40000, 16.64062, 19.26471…\n$ avg_flipper_length_mm <dbl> 205.3226, 190.9412, 190.0000, 213.7812, 199.1176…\n\n\n\n\n\n\nCODE:\n\n\nCreate labels\nMap year to the x, avg_bill_depth_mm to y, and island to group\nAdd a geom_line() layer, mapping island to color, and setting the size to 2\nAdd a geom_point() layer, mapping color to island, and setting size to 4\nWe’ll adjust the x axis with scale_x_continuous(), manually setting the breaks and moving the position to the \"top\" of the graph\nWe’ll duplicate the the y axis with sec.axis, setting dup_axis() to the same name of the previous y label.\nFinally, we facet the graph by sex, adjust the size of the text, and move the legend to the \"bottom\" of the graph.\n\n\n\n\nCode\nlabs_grp_slope <- labs(\n    title = \"Changes in Bill Depth of Palmer Penguins\", \n    subtitle = \"Years 2008 & 2009\",\n    x = \"\", \n    color = \"Island\")\n\nggp2_grp_slope <- ggplot(data = peng_grp_slope, \n    mapping = aes(x = year,\n                  y = avg_bill_depth_mm, \n              group = island)) +\n    geom_line(aes(color = island), \n                size = 2, show.legend = FALSE) +\n    geom_point(aes(color = island), \n                size = 4) + \n    scale_x_continuous(\n                breaks = c(2008, 2009), \n                position = \"top\") + \n    scale_y_continuous(name = \"Bill Depth (mm)\",\n                sec.axis = dup_axis(\n                            name = \"Bill Depth (mm)\")) + \n    facet_wrap(. ~ sex, \n                ncol = 2) +\n    theme_minimal(base_size = 14) +\n    theme(legend.position = \"bottom\",\n        axis.text.x = element_text(size = 9),\n        axis.text.y = element_text(size = 9),\n        strip.text = element_text(size = 10))\n\nggp2_grp_slope + \n    labs_grp_slope\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "rela/parallel_sets.html",
    "href": "rela/parallel_sets.html",
    "title": "Parallel Sets",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ndevtools::install_github(\"thomasp85/ggforce\")\ninstall.packages(\"palmerpenguins\")\nlibrary(ggforce)\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nWe’re going to remove the missing values from palmerpenguins::penguins, count the categorical variables (island, sex, species), and rename the n column (produced by the count() function) to value.\nggforce has a special gather_set_data() function that changes tidy data into a tidy(er) format\n\n\n\n\nCode\npeng_wide <- palmerpenguins::penguins |> \n  drop_na() |> \n  count(island, species, sex) |> \n  rename(value = n)\npara_set_peng <- ggforce::gather_set_data(\n                            data = peng_wide, \n                            x = 1:3)\ndplyr::glimpse(para_set_peng)\n\n\nRows: 30\nColumns: 7\n$ island  <fct> Biscoe, Biscoe, Biscoe, Biscoe, Dream, Dream, Dream, Dream, To…\n$ species <fct> Adelie, Adelie, Gentoo, Gentoo, Adelie, Adelie, Chinstrap, Chi…\n$ sex     <fct> female, male, female, male, female, male, female, male, female…\n$ value   <int> 22, 22, 58, 61, 27, 28, 34, 34, 24, 23, 22, 22, 58, 61, 27, 28…\n$ id      <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, …\n$ x       <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3,…\n$ y       <fct> Biscoe, Biscoe, Biscoe, Biscoe, Dream, Dream, Dream, Dream, To…\n\n\n\n\n\n\n\nCodeGraphSets Labels\n\n\n\nCODE:\n\n\nCreate labels\nMap x to x, id to id, y to split, and value to value\nIn the geom_parallel_sets() function, map sex to fill and manually set the alpha (opacity) and the axis.width\nIn the geom_parallel_sets_axes() function, set the axis.width to the same value as the geom_parallel_sets() above\nFor labeling, adjust the size manually and set the color to something that stands out against the black vertical axes\nManually label the x axis with scale_x_continuous(), setting the breaks and labels to the variable names in the peng_wide dataset\nFinally, remove the x title with axis.title.x = element_blank()\n\n\n\n\nCode\nlabs_psets <- labs(\n        title = \"Categories of Palmer Penguins\", \n        y = \"Count\", fill = \"Sex\")\n\nggp2_psets <- ggplot(data = para_set_peng, \n    mapping = aes(x = x, \n        id = id, \n        split = y, \n        value = value)) +\n  geom_parallel_sets(aes(fill = sex), \n        alpha = 0.3, \n        axis.width = 0.07) \n\nggp2_psets_axes <- ggp2_psets +\n  geom_parallel_sets_axes(\n        axis.width = 0.07) \n\nggp2_psets_labs <- ggp2_psets_axes +\n  geom_parallel_sets_labels(\n        size = 2.0, \n        color = '#ffffff') +\n  scale_x_continuous(\n        breaks = c(1, 2, 3), \n        labels = c(\"Island\", \"Species\", \"Sex\")) +\n  theme(axis.title.x = element_blank())\n\nggp2_psets_labs +\n    labs_psets\n\n\n\n\n\n\n\n\n\nGRAPH:\n\n\n\n\n\n\n\n\n\n\n\nPARALLEL SETS LABELS:\n\n\nIf the categories have long names, use the angle, nudge_x/nudge_y and hjust/vjust in geom_parallel_sets_labels() to adjust the size, location, and color of the labels.\nManually setting the limits of the x axis in scale_x_continuous() will also give more room for the labels.\n\n\n\n\nCode\nggp2_psets_axes + \n  geom_parallel_sets_labels(\n      size = 3.2, \n      colour = '#000000',\n      angle = 0, \n      nudge_x = 0.1, \n      hjust = 0) + \n  scale_x_continuous(\n        limits = c(0.9, 3.2),\n        breaks = c(1, 2, 3), \n        labels = c(\"Island\", \"Species\", \"Sex\")) + \n  theme(axis.title.x = element_blank()) + \n    labs_psets"
  },
  {
    "objectID": "rela/bump_charts.html",
    "href": "rela/bump_charts.html",
    "title": "Bump Charts",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ndevtools::install_github(\"davidsjoberg/ggbump\")\nlibrary(ggbump)\ninstall.packages(\"fivethirtyeight\")\nlibrary(fivethirtyeight) \nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\n\n\n\nWe’ll use the fivethirtyeight::tv_hurricanes data, but slightly restructured and filtered.\n\n\n\n\nCode\nfivethirtyeight::tv_hurricanes |> \n  filter(date > as_date(\"2017-09-15\")) |> \n  pivot_longer(cols = -date, \n    names_to = 'hurricane', \n    values_to = 'value') |> \n  group_by(date) |>\n  mutate(rank = rank(value, \n    ties.method = \"random\")) |> \n  ungroup() -> tidy_hurricanes\nglimpse(tidy_hurricanes)\n\n\nRows: 40\nColumns: 4\n$ date      <date> 2017-09-16, 2017-09-16, 2017-09-16, 2017-09-16, 2017-09-17,…\n$ hurricane <chr> \"harvey\", \"irma\", \"maria\", \"jose\", \"harvey\", \"irma\", \"maria\"…\n$ value     <dbl> 0.0207, 0.1087, 0.0000, 0.0355, 0.0087, 0.1090, 0.0184, 0.03…\n$ rank      <int> 2, 4, 1, 3, 1, 4, 2, 3, 1, 3, 4, 2, 1, 3, 4, 2, 2, 3, 4, 1, …\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap date to the x, rank to the y, and hurricane to color\nAdd ggbump::geom_bump() and set size to 2\nMove legend to bottom with theme(legend.position = \"bottom\")\n\n\n\n\nCode\nlabs_bump <- labs(title = \"TV News Hurricane Mentions\",   \n  subtitle = \"Between Sep 15-25th, 2017\", \n  x = \"Date\", y = \"Rank\", \n  color = \"Hurricanes\")\nggp2_bump <- ggplot(tidy_hurricanes, \n    aes(x = date, \n      y = rank, \n      color = hurricane)) +\n    ggbump::geom_bump(size = 2) + \n    theme(legend.position = \"bottom\")\n\nggp2_bump + \n  labs_bump\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "rela/density_contours.html",
    "href": "rela/density_contours.html",
    "title": "Density Contours",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nDensity contours (or 2-D density plots) are helpful for displaying differences in values between two numeric (continuous) variables.\nIn topographical maps, contour lines are drawn around areas of equal elevation above sea-level. In density contours, the contour lines are drawn around the areas our data occupy (essentially replacing sea-level as ‘an area without any x or y values.’)\nSpecifically, the contour lines outline areas on the graph with differing point densities, and semi-transparent colors (gradient) can be added to further highlight the separate regions."
  },
  {
    "objectID": "rela/density_contours.html#layer-by-layer",
    "href": "rela/density_contours.html#layer-by-layer",
    "title": "Density Contours",
    "section": "Layer-by-layer",
    "text": "Layer-by-layer\nWe’re going to break down how to create the density contour layer-by-layer using the stat_density_2d() function (which allows us to access some of the inner-workings of geom_density_2d())\n\nBaseStatFillPoints\n\n\n\nBASE:\n\n\nCreate a new set of labels\nBuild a base layer:\n\nMap bill_length_mm to x and flipper_length_mm to y\nExpand the x and y values with expand_limits() (using the values we created above)\n\n\n\n\n\nCode\nlabs_sdens_2d <- labs(\n  title = \"Bill Length vs. Flipper Length\",\n  x = \"Bill Length (mm)\",\n  y = \"Flipper length (mm)\",\n  color = \"Species\"\n)\n# base\nbase_sdens_2d <- ggplot(\n  data = peng_dnsty_2d,\n  mapping = aes(\n    x = bill_length_mm,\n    y = flipper_length_mm\n  )\n) +\n  expand_limits(\n    x = c(x_min, x_max),\n    y = c(y_min, y_max)\n  )\nbase_sdens_2d +\n  labs_sdens_2d\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTAT:\n\n\nAdd the stat_density_2d() layer:\n\nInside aes(), use after_stat() to map level to fill (from Help, “Evaluation after stat transformation will have access to the variables calculated by the stat, not the original mapped values.”)\nSet the geom to \"polygon\"\nChange the color to black (#000000)\nadjust the linewidth to 0.35\n\n\n\n\n\nCode\nstat_sdens_2d <- base_sdens_2d +\n  stat_density_2d(\n    aes(fill = after_stat(level)),\n    geom = \"polygon\",\n    color = \"#000000\",\n    linewidth = 0.35\n  )\nstat_sdens_2d +\n  labs_sdens_2d\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFILL:\n\n\nWhere did levels come from?\nYou probably noticed the stat_density_2d() produced a legend with level, and a series of values for the color gradient. These numbers are difficult to interpret directly, but you can think of them as ‘elevation changes’ in point density. Read more here on SO.\n\n\nNow that we have a color gradient for our contour lines, we can adjust it’s the range of colors using scale_fill_gradient()\n\nlow is the color for the low values of level\n\nhigh is the color for the high values of level\n\nguide let’s us control the legend\n\nWe’ll set these to white (\"#ffffff\") and dark gray (\"#404040\")\n\n\n\n\nCode\nfill_sdens_2d <- stat_sdens_2d +\n  scale_fill_gradient(\n    low = \"#ffffff\",\n    high = \"#404040\",\n    guide = \"legend\"\n  )\nfill_sdens_2d +\n  labs_sdens_2d\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOINTS:\n\n\nThe dark areas in the contour lines are the areas with higher value density, but why don’t we test that by adding some data points?\nAdd a geom_point() layer\n\nInside aes(), map species to color (this will tell us if the three dark areas represent differences in the three species in the dataset)\nset size to 2\nChange the alpha to 2/3\n\n\n\n\n\nCode\n# geom_point()\npnts_sdens_2d <- fill_sdens_2d +\n  geom_point(aes(color = species),\n    size = 2,\n    alpha = 2 / 3\n  )\n# final\npnts_sdens_2d +\n  labs_sdens_2d"
  },
  {
    "objectID": "rela/density_contours.html#adding-groups",
    "href": "rela/density_contours.html#adding-groups",
    "title": "Density Contours",
    "section": "Adding groups",
    "text": "Adding groups\nIn the previous plot, we used the species variable in the geom_point() layer to identify the points using color. In the section below, we’ll show more methods of displaying groups with density contour lines.\n\nGroupsFacets\n\n\n\nGROUPS:\n\n\nRe-create the labels\nBuild a geom_density_2d() layer:\n\nMap bill_length_mm to x and flipper_length_mm to y\nExpand the limits using our adjusted min/max x and y values\nAdd the geom_density_2d(), mapping species to color\n\nBuild the geom_point() layer:\n\nMap species to color\nset the alpha and remove the legend\n\n\n\n\n\nCode\nlabs_dnsty_2d_grp <- labs(\n  title = \"Bill Length vs. Flipper Length\",\n  x = \"Bill Length (mm)\",\n  y = \"Flipper length (mm)\",\n  color = \"Species\"\n)\n\nggp2_dnsty_2d_grp <- ggplot(\n  data = peng_dnsty_2d,\n  mapping = aes(\n    x = bill_length_mm,\n    y = flipper_length_mm\n  )\n) +\n  expand_limits(\n    x = c(x_min, x_max),\n    y = c(y_min, y_max)\n  ) +\n  geom_density_2d(aes(color = species))\n\n\nggp2_dnsty_2d_pnts <- ggp2_dnsty_2d_grp +\n  geom_point(aes(color = species),\n    alpha = 2 / 3,\n    show.legend = FALSE\n  )\n\nggp2_dnsty_2d_pnts +\n  labs_dnsty_2d_grp\n\n\n\n\n\n\n\n\n\n\n\n\n\nFACETING:\n\n\nRe-create the labels\nBuild the base/limits:\n\nMap bill_length_mm to x and flipper_length_mm to y\nExpand the limits using our adjusted min/max x and y values\n\nBuild the geom_density_2d_filled() layer:\n\nAdd the geom_density_2d_filled(), setting linewidth to 0.30 and contour_var to \"ndensity\"\n\nAdd the scale_discrete_manual():\n\nset aesthetics to \"fill\"\nProvide a set of color values (this plot needed 10 values, and I grabbed them all from color-hex.\n\nFacet:\n\nAdd facet_wrap(), and place species in the vars()\n\n\n\n\n\nCode\nlabs_dnsty_2d_facet <- labs(\n  title = \"Bill Length vs. Flipper Length\",\n  subtitle = \"By Species\",\n  x = \"Bill Length (mm)\",\n  y = \"Flipper length (mm)\"\n)\nggp2_dnsty_2d_facet <- ggplot(\n  data = peng_dnsty_2d,\n  mapping = aes(\n    x = bill_length_mm,\n    y = flipper_length_mm\n  )\n) +\n  expand_limits(\n    x = c(x_min, x_max),\n    y = c(y_min, y_max)\n  ) +\n  geom_density_2d_filled(\n    linewidth = 0.30,\n    contour_var = \"ndensity\"\n  ) +\n  scale_discrete_manual(\n    aesthetics = \"fill\",\n    values = c(\n      \"#18507a\", \"#2986cc\", \"#3e92d1\", \"#539ed6\", \"#69aadb\",\n      \"#7eb6e0\", \"#a9ceea\", \"#bedaef\", \"#d4e6f4\", \"#e9f2f9\"\n    )\n  ) +\n  facet_wrap(vars(species))\n\nggp2_dnsty_2d_facet +\n  labs_dnsty_2d_facet"
  },
  {
    "objectID": "rela/density_contours.html#more-2-d-densities",
    "href": "rela/density_contours.html#more-2-d-densities",
    "title": "Density Contours",
    "section": "More 2-D densities",
    "text": "More 2-D densities\nIn the previous section, we defined the color values used in geom_density_2d_filled() with scale_discrete_manual(). Below we give an example using the default colors:\n\nFillLines\n\n\n\nFill:\n\n\nRe-create the labels\nBuild the base/limits:\n\nMap bill_length_mm to x and flipper_length_mm to y\nExpand the limits using our adjusted min/max x and y values\n\nAdd the geom_density_2d() layer\nAdd the geom_density_2d_filled(), setting alpha to 0.8\n\n\n\n\nCode\nlabs_dnsty_2d <- labs(\n  title = \"Bill Length vs. Flipper Length\",\n  x = \"Bill Length (mm)\",\n  y = \"Flipper length (mm)\"\n)\n\nggp2_dnsty_2d <- ggplot(\n  data = peng_dnsty_2d,\n  mapping = aes(\n    x = bill_length_mm,\n    y = flipper_length_mm\n  )\n) +\n  # use our stored values\n  expand_limits(\n    x = c(x_min, x_max),\n    y = c(y_min, y_max)\n  ) +\n  geom_density_2d()\n\nggp2_dnsty_2d_fill <- ggp2_dnsty_2d +\n  geom_density_2d_filled(alpha = 0.8)\n\nggp2_dnsty_2d_fill +\n  labs_dnsty_2d\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLINES:\n\n\nWe can also outline the contours by adding color to the lines using another geom_density_2d() layer:\n\nset linewidth to 0.30\nset color to \"#ffffff\"\n\n\n\n\n\nCode\nggp2_dnsty_2d_fill_lns <- ggp2_dnsty_2d_fill +\n  geom_density_2d(\n    linewidth = 0.30,\n    color = \"#ffffff\"\n  )\nggp2_dnsty_2d_fill_lns +\n  labs_dnsty_2d"
  },
  {
    "objectID": "rela/hex_bins.html",
    "href": "rela/hex_bins.html",
    "title": "Hexagon bin map",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nHex-bins are a very similar to 2-D histograms, but instead of dividing the graph area into a grid, it’s divided into hexagons. The number of points inside each per hexagon determine it’s color."
  },
  {
    "objectID": "rela/hex_bins.html#more-options",
    "href": "rela/hex_bins.html#more-options",
    "title": "Hexagon bin map",
    "section": "More options",
    "text": "More options\n\nBinsScaleOptions\n\n\n\nBINS:\n\n\nBelow we change the bins to 20 and 15 and save these layers as ggp2_hex_b20 and ggp2_hex_b15.\nDecreasing the number of bins increases the size of the hexagons (and makes them larger).\n\n\n\n\nCode\nggp2_hex_b20 <- ggplot(data = penguins_hex,\n    aes(x = bill_length_mm, y = flipper_length_mm)) +\n    geom_hex(bins = 20)\nggp2_hex_b20 +\n    labs_hex\nggp2_hex_b15 <- ggplot(data = penguins_hex,\n    aes(x = bill_length_mm, y = flipper_length_mm)) +\n    geom_hex(bins = 15)\nggp2_hex_b15 +\n    labs_hex\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSCALES:\n\n\n\n\nGet a full list of available color palette’s using hcl_palettes(type = \"sequential\")\n\n\nWe can adjust the color scale using scale_color_discrete_sequential() and setting aesthetics to \"fill\".\nIf the hexagons overlap, we can use the alpha to make them slightly transparent.\n\n\n\n\nCode\nlabs_hex2 <- labs(\n    title = \"Adult Foraging Penguins\", \n    subtitle = \"Near Palmer Station, Antarctica\", \n    x = \"Bill length (mm)\", \n    y = \"Flipper length (mm)\",\n    fill = \"Sex\")\nggplot(data = penguins_hex, \n    aes(x = bill_length_mm, \n        y = flipper_length_mm)) + \n    geom_hex(aes(fill = sex), \n             bins = 15, \n             alpha = 3/4) + \n    scale_color_discrete_sequential(\n        aesthetics = \"fill\", \n        rev = FALSE,\n        palette = \"Viridis\") +\n    labs_hex2\n\n\n\n\n\n\n\n\n\n\n\n\n\nOPTIONS:\n\n\n\nBins can be set with bins (a single number) or binwidth (a numeric vector of c(x, y))\n\nbinwidth allows us to manually adjust the size of the hexagons.\nlinewidth is also helpful when using alpha for overlapping values.\n\n\n\n\nCode\nlabs_hex3 <- labs(\n    title = \"Adult Foraging Penguins\", \n    subtitle = \"Near Palmer Station, Antarctica\", \n    x = \"Bill length (mm)\", \n    y = \"Flipper length (mm)\",\n    fill = \"Species\")\n\nggplot(data = penguins_hex, \n    aes(x = bill_length_mm, \n        y = flipper_length_mm, \n        fill = species)) + \n    geom_hex(binwidth = c(1.2, 4),\n        linewidth = 0.5, \n        alpha = 3/4,\n        color = \"#000000\") + \n    scale_color_discrete_sequential(\n        aesthetics = \"fill\", \n        palette = \"Dark Mint\") +\n    labs_hex3"
  },
  {
    "objectID": "rela/grouped_scatter_plots.html",
    "href": "rela/grouped_scatter_plots.html",
    "title": "Grouped Scatter-Plots",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nThe penguins data\n\n\n\n\nCode\npenguins <- palmerpenguins::penguins\nglimpse(penguins)\n\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap bill_length_mm to the x axis\nMap flipper_length_mm to the y axis\nMap species to color inside the geom_point()\n\n\n\n\nCode\nlabs_grp_scatter <- labs(\n  title = \"Bill Length vs. Flipper Length\",\n  x = \"Bill Length (mm)\", \n  y = \"Flipper length (mm)\", \n  color = \"Species\")\n\nggp2_grp_scatter <- penguins |> \n  ggplot(\n    aes(x = bill_length_mm, \n        y = flipper_length_mm)) + \n  geom_point(aes(color = species)) \n\nggp2_grp_scatter + \n  labs_grp_scatter\n\n\n\n\n\n\n\n\n\nGRAPH:\n\n\nAdjust over-plotting with transparency (alpha)"
  },
  {
    "objectID": "rela/bins_2d.html",
    "href": "rela/bins_2d.html",
    "title": "2D Histograms",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nStandard histograms separate a variable’s values into discrete groups, or ‘bins,’ which are arranged in increasing order across the x axis. The y axis displays the frequency (or count) of values within each bin.\nVertical bars capture the variable’s distribution using the height of the bar to represent the number of values per ‘bin’, and the number of bars corresponds with the bin value (or ‘bin-width’).\nWhen we extend this display to two numerical/quantitative variables, the bins are used to divide the total graph area into a grid, and color is used to display the variation in frequency (or count) of both variable values that fall within each intersecting square."
  },
  {
    "objectID": "rela/bins_2d.html#more-info",
    "href": "rela/bins_2d.html#more-info",
    "title": "2D Histograms",
    "section": "More info",
    "text": "More info\n\nBinsScaleOptions\n\n\n\nBINS:\n\n\n\nThe value for bins will be vary depending on the variable values–there is no correct number. If the number of bins is too low, the density may hide important nuances between the variables. If the number of bins is too high, the noise might drown out the signal.\n\nBelow we change the bins to 15 and save this layer as ggp2_2dbins15:\n\n\n\n\nCode\nggp2_base <- ggplot(data = penguins_2dhist, \n    mapping = aes(x = bill_length_mm, \n                  y = flipper_length_mm)) \nggp2_2dbins15 <- ggp2_base + \n                    geom_bin2d(bins = 15) \nggp2_2dbins15 + \n     labs_2dhist \n\n\n\n\n\n\n\n\n\n\n\n\n\nSCALES:\n\n\nscale_fill_continuous_sequential() comes with a variety of palettes to choose from (run hcl_palettes(type = \"sequential\") to view the full list).\nWe can also reverse the order of the fill color scale with rev (TRUE or FALSE).\n\n\n\n\nCode\nggp2_2dbins15 + \n    scale_fill_continuous_sequential(\n        palette = \"Mako\", \n        rev = TRUE) +\n    labs_2dhist \nggp2_2dbins15 + \n    scale_fill_continuous_sequential(\n        palette = \"Mako\", \n        rev = FALSE) +\n    labs_2dhist \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOPTIONS:\n\n\n\nIf you set the point shape to 21, you have control over both color and fill.\n\nIn the previous example we showed how to reverse the color scale for the palette in scale_fill_continuous_sequential(). Below we reverse the color scale, but also manually set which colors on the scale we want to begin with (i.e., smallest data value) and which color we want to end with (i.e., the largest data value). Possible values range from 0 - 1.\nWe also add a geom_point() layer.\n\n\n\n\nCode\nggp2_2dbins15 + \n    scale_fill_continuous_sequential(\n        palette = \"SunsetDark\",\n        rev = TRUE,\n        begin = 0.7, end = 0.2) +\n    geom_point(color = \"#007bff\",\n        fill = \"#FFFFFF\", shape = 21,\n        size = 2.2, alpha = 0.75) +\n    labs_2dhist"
  },
  {
    "objectID": "rela/grouped_bubble_charts.html",
    "href": "rela/grouped_bubble_charts.html",
    "title": "Grouped Bubble Graph",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nGrouped bubble graphs use position, color, and size to display the relationships between four variables (three numerical/quantitative, one categorical).\nThe position on the x and y axis captures the relationship between two numerical variables. The size and color of the points display a third numerical variable across the levels of a (fourth) categorical variable."
  },
  {
    "objectID": "rela/grouped_bubble_charts.html#more-info",
    "href": "rela/grouped_bubble_charts.html#more-info",
    "title": "Grouped Bubble Graph",
    "section": "More info",
    "text": "More info\nWe can change the shape of the points for more control of the color and fill.\n\nShapeColor\n\n\n\nSHAPE:\n\n\nInside geom_point(), we can set shape to 21, and color to \"#000000\" to outline the points in black\n\n\n\n\nCode\nggp2_grp_bubble_s21 <- penguins |> \n  ggplot(aes(\n    x = bill_length_mm, y = flipper_length_mm)) + \n  geom_point(\n    aes(size = body_mass_g, fill = species), \n        alpha = 2/3, shape = 21, color = \"#000000\") + \n  scale_size(range = c(.04, 6)) \n\nggp2_grp_bubble_s21 + \n  labs_grp_bubble\n\n\n\n\n\n\n\n\n\n\n\n\n\nCOLOR:\n\n\nInside the aes() of geom_point(), we can set shape to 21, and map color to \"species\" to outline the points in the same colors as fill\n\n\n\n\nCode\nggp2_grp_bubble_s21_color <- penguins |> \n  ggplot(aes(\n    x = bill_length_mm, y = flipper_length_mm)) + \n  geom_point(\n    aes(size = body_mass_g, \n        fill = species, \n        color = species), \n        alpha = 2/3, shape = 21) + \n  scale_size(range = c(.04, 6)) \n\nggp2_grp_bubble_s21_color + \n  labs_grp_bubble"
  },
  {
    "objectID": "prp/stacked_filled_density_graphs.html",
    "href": "prp/stacked_filled_density_graphs.html",
    "title": "Stacked densities",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nRemove missing sex from the penguins data\n\n\n\n\nCode\npeng_density <- filter(palmerpenguins::penguins, !is.na(sex))\nglimpse(peng_density)\n\n\nRows: 333\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6…\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2…\n$ flipper_length_mm <int> 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 18…\n$ body_mass_g       <int> 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3200, 3800…\n$ sex               <fct> male, female, female, female, male, female, male, fe…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap the flipper_length_mm to the x and add after_stat(count)\nMap sex to fill\nInside the geom_density() function, set position to \"fill\"\n\n\n\n\nCode\nlabs_fill_density <- labs(\n  title = \"Adult foraging penguins\",\n  x = \"Flipper length (millimeters)\",\n  fill = \"Sex\")\nggp2_fill_density <- ggplot(data = peng_density, \n       aes(x = flipper_length_mm, \n           after_stat(count),\n          fill = sex)) +\n      geom_density(position = \"fill\") \nggp2_fill_density + \n  labs_fill_density\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "prp/pie_charts.html",
    "href": "prp/pie_charts.html",
    "title": "Pie Charts",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ninstall.packages(\"ggpubr\")\nlibrary(ggpubr)\ninstall.packages(\"ggplot2movies\")\nlibrary(ggplot2movies) \nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\n\n\n\nRemove the missing values and \"NC-17\" from mpaa and summarise the count and percent.\n\n\n\n\nCode\nmovie_pie <- ggplot2movies::movies |>\n  filter(mpaa != \"\" & mpaa != \"NC-17\") |> \n  group_by(mpaa) |> \n  summarise(cnt = n()) |> \n  mutate(\n    perc = round(cnt / sum(cnt), 3),\n    mpaa = factor(mpaa, \n          levels = c(\"PG\", \"PG-13\", \"R\")))\nglimpse(movie_pie)\n\n\nRows: 3\nColumns: 3\n$ mpaa <fct> PG, PG-13, R\n$ cnt  <int> 528, 1003, 3377\n$ perc <dbl> 0.108, 0.204, 0.688\n\n\n\n\n\n\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nAssign \"perc\" to x\nAssign labs to label\nAssign \"in\" to lab.pos\nAssign \"white\" to lab.font and color\nAssign \"mpaa\" to fill\nRemove legend with theme(legend.position = \"none\")\n\n\n\n\nCode\nlabs <- paste0(movie_pie$mpaa, \" (\", \n               (100*movie_pie$perc), \"%)\")\nlabs_pie <- labs(\n  title = \"Percent MPAA ratings for IMDB movies\",\n  x = \"Percent MPAA rating\")\n\nggp2_pie <- ggpubr::ggpie(movie_pie, \n          x = \"perc\", label = labs, \n          lab.pos = \"in\", lab.font = \"#ffffff\",\n          fill = \"mpaa\", color = \"#ffffff\") + \n    theme(legend.position = \"none\")  \n    \nggp2_pie + \n  labs_pie\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "prp/treemaps.html",
    "href": "prp/treemaps.html",
    "title": "Treemaps",
    "section": "",
    "text": "PackagesData\n\n\n\nPACKAGES:\n\n\nInstall packages.\n\n\n\n\nCode\ndevtools::install_github(\"wilkox/treemapify\")\ninstall.packages(\"palmerpenguins\")\nlibrary(treemapify) \nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\n\n\n\n\n\nDATA:\n\n\n\n\n\n\nArtwork by @allison_horst\n\n\n\nFilter the missing values from sex, group the data by species, island, and sex, then count the species and island (then ungroup()).\n\n\n\n\nCode\ntreemap_peng <- penguins |> \n    dplyr::select(species, island, sex) |>\n    tidyr::drop_na() |>\n    dplyr::group_by(species, island, sex) |>\n    dplyr::count(species, island, sex) |>\n    ungroup()\nglimpse(treemap_peng)\n\n\nRows: 10\nColumns: 4\n$ species <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Chinstrap, Chi…\n$ island  <fct> Biscoe, Biscoe, Dream, Dream, Torgersen, Torgersen, Dream, Dre…\n$ sex     <fct> female, male, female, male, female, male, female, male, female…\n$ n       <int> 22, 22, 27, 28, 24, 23, 34, 34, 58, 61\n\n\n\n\n\n\n\nBasic TreemapSubgroupSubgroup 2\n\n\n\nBASIC TREEMAP:\n\n\nCreate labels\n\nMap the n to area, sex to fill and label, species to subgroup, and island to subgroup2\nAdd geom_treemap()\nAdd geom_treemap_text()\n\nplace: this controls where the boxes start\n\ncolor: text color\n\nmin.size: the minimum font size (when re-sizing)\n\nalpha: opacity\n\nfontface: itlalic/bond\n\nfamily: \"sans\"/\"sansserif\"/\"mono\"\n\n\n\n\n\n\nCode\nlabs_treemap <- labs(\n  title = \"Species, island, and sex of adult penguins\",\n    fill = \"Sex\")\nggp2_treemap <- ggplot(treemap_peng, \n       aes(area = n, \n           fill = sex, \n           label = sex,\n           subgroup = species,\n           subgroup2 = island)) +\n       treemapify::geom_treemap() +\n       treemapify::geom_treemap_text(\n           place = \"bottomright\",\n           color = \"#d0d0d0\",\n           min.size = 0,\n           alpha = 0.90,\n           fontface = \"italic\",\n           family = \"sans\") \nggp2_treemap + \n  labs_treemap\n\n\n\n\n\n\n\n\n\n\n\n\n\nSUBGROUP:\n\n\nggplot2 build layers in the order they’re written, so it’s advised to build the subgroups in order from “from deepest to shallowest”, with subgroups2 first (ending on subgroup)\n\nAdd geom_treemap_subgroup2_border()\n\nSet the size and color\n\nAdd geom_treemap_subgroup2_text()\n\nplace: this controls where the boxes start\n\ncolor: text color\n\nmin.size: the minimum font size (when re-sizing)\n\nalpha: opacity\n\nfontface: itlalic/bond\n\nfamily: \"sans\"/\"sansserif\"/\"mono\"\n\n\nSee full list of arguments here.\n\n\n\n\nCode\nggp2_tm_subgroup <- ggp2_treemap +\n    treemapify::geom_treemap_subgroup2_border(\n           color = \"#282b2d\",\n           size = 4.0) + \n       treemapify::geom_treemap_subgroup2_text(\n           place = \"center\",\n           alpha = 0.65,\n           color = \"#282b2d\",\n           min.size = 0,\n           family = \"sans\")\nggp2_tm_subgroup +\n  labs_treemap\n\n\n\n\n\n\n\n\n\n\n\n\n\nSUBGROUP 2:\n\n\nAdd geom_treemap_subgroup_border()\n\nSet the size and color\n\nAdd geom_treemap_subgroup_text()\n\nplace: this controls where the boxes start\n\ncolor: text color\n\nmin.size: the minimum font size (when re-sizing)\n\nalpha: opacity\n\nfontface: itlalic/bond\n\nfamily: \"sans\"/\"sansserif\"/\"mono\"\n\n\n\n\n\nCode\nggp2_tm_subgroup2 <- ggp2_tm_subgroup + \n       treemapify::geom_treemap_subgroup_border(\n           color = \"#ffffff\", \n           size = 4) + \n       treemapify::geom_treemap_subgroup_text(\n           place = \"topleft\",\n           alpha = 0.65,\n           grow = TRUE,\n           color = \"#ffffff\",\n           min.size = 0,\n           family = \"mono\",\n           fontface = \"bold\")\n\nggp2_tm_subgroup2 + \n  labs_treemap"
  },
  {
    "objectID": "prp/diverging_bar_graphs.html",
    "href": "prp/diverging_bar_graphs.html",
    "title": "Diverging Bar-graphs",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nIf you have two proportions that contain positive and negative values, consider using diverging bars with geom_bar().\nUnlike a standard or stacked bar graphs, diverging bar graphs display positive and negative quantities on both sides of a reference or baseline value (zero in this example). Color, length and position are used to compare the quantities across categorical levels (and within variable values).\n\n\n\n\n\n\n\n\n\nFor example, we can use the length of the bar from the reference line to compare disapproval estimates across all months (i.e., comparing red bars to each other).\n\n\n\n\n\n\n\n\n\nWe can also compare approval vs. disapproval for each month (i.e., compare the blue vs. red bars to each other within each month)."
  },
  {
    "objectID": "prp/diverging_bar_graphs.html#vertical-diverging-bar-graphs",
    "href": "prp/diverging_bar_graphs.html#vertical-diverging-bar-graphs",
    "title": "Diverging Bar-graphs",
    "section": "Vertical diverging Bar-graphs",
    "text": "Vertical diverging Bar-graphs\nFor vertically arranged bars, we switch the x and y axis variables.\n\nCodeGraph\n\n\n\nCODE:\n\n\nCreate labels\nMap the month_avg to the x and month to the y\nInside geom_bar()\n\nmap poll to fill\nuse stat = \"identity\" and width = .5\n\nAdd scale_y_continuous() to manually set the limits and format the axis with scales::percent\n\n\n\n\nCode\nlabs_geom_bar_diverg_vert <- labs(\n  title = \"Trump Approval Ratings\",\n  subtitle = \"From 'How Popular is Donald Trump'\",\n  x = \"Monthly average percent\",\n  y = \"Month\",\n  fill = \"Estimate\")\nggp2_bar_diverg_vert <- ggplot(\n  data = trump_approval_diverg,\n      aes(x = month_avg, y =  month)) +\n  geom_bar(\n      aes(fill = poll), \n        stat = \"identity\", width = .5) + \n  scale_x_continuous(limits = c(-1, 1), \n        labels = scales::percent)\nggp2_bar_diverg_vert + \n  labs_geom_bar_diverg_vert\n\n\n\n\n\n\n\n\n\nGRAPH:"
  },
  {
    "objectID": "prp/stream_plots.html",
    "href": "prp/stream_plots.html",
    "title": "Stream plots",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nStream graphs display how a numerical variable (typically on the y axis) changes over time (on the x axis) across levels of a categorical variable. These graphs are handy if the numerical value varies wildly (or isn’t always present) over the time measurement.\nCategorical groups are differentiated by color layers, with the area of the layer representing the change in y value. In ggplot2, we can create stream graphs using ggstream."
  },
  {
    "objectID": "prp/stream_plots.html#more-info",
    "href": "prp/stream_plots.html#more-info",
    "title": "Stream plots",
    "section": "More info",
    "text": "More info\nThe ggstream package has multiple arguments for adjusting the shape and look of the categorical levels (and text labels).\n\nTypeSorting\n\n\n\nTYPE:\n\n\nMap mpaa to fill (wrapped in forcats::fct_rev())\nWe can adjust the look of the graph by setting the type argument in geom_stream()\n\ntype: change type from \"mirror\" (the default) to \"proportional\"\n\nAdjust colors:\n\nscale_fill_manual(): Add colors as a named vector to values\n\n\n\n\n\nCode\nggp2_stream_prp <- ggplot(data = movies_stream, \n    mapping = aes(x = year, \n                  y = avg_budget, \n                  fill = forcats::fct_rev(mpaa))) + \n    ggstream::geom_stream(type = \"proportional\") + \n    scale_y_continuous(labels = scales::percent) + \n  scale_fill_manual(\n      values = c(\"PG-13\" = \"#0bd3d3\", \n                 \"PG\" = \"#f890e7\", \n                 \"R\" = \"#fa7b3c\", \n                 \"NC-17\" = \"#772953\"))\nggp2_stream_prp + \n    labs_stream + \n    labs(fill = \"mpaa\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nSORTING:\n\n\nTo change how the categorical areas are sorted, adjust the sorting argument to either \"none\", \"onset\", or \"inside_out\"\n\nsorting: set the sorting method to \"inside_out\" in both ggstream::geom_stream() and ggstream::geom_stream_label()\n\ntype: change the type to \"ridge\" in both ggstream::geom_stream() and ggstream::geom_stream_label()\n\nWe can also add text labels using ggstream::geom_stream_label():\n\nMap mpaa (wrapped in forcats::fct_rev()) to label globally\n\nInside ggstream::geom_stream_label():\n\nset color to white (\"#ffffff\") and the size to 2.7\n\nRemove the legend with show.legend = FALSE\n\n\nColors:\n\nUse scale_colour_manual() and scale_fill_manual() to manually set the values using a named vector\n\nFinally, change the y axis to US dollars using scale_y_continuous() and scales::dollar\n\n\n\n\nCode\nggp2_stream_srt <- ggplot(data = movies_stream, \n    mapping = aes(x = year, \n                  y = avg_budget, \n                  fill = fct_rev(mpaa),\n                  label = fct_rev(mpaa))) + \n    ggstream::geom_stream(\n        type = \"ridge\", \n        sorting = \"inside_out\") + \n    ggstream::geom_stream_label(\n        type = \"ridge\", \n        sorting = \"inside_out\", \n        color = \"#ffffff\", \n        size = 2.7,\n        show.legend = FALSE) +\n    scale_colour_manual(\n      values = c(\"PG-13\" = \"#0bd3d3\", \n                 \"PG\" = \"#f890e7\", \n                 \"R\" = \"#fa7b3c\", \n                 \"NC-17\" = \"#772953\")) +\n    scale_fill_manual(\n      values = c(\"PG-13\" = \"#0bd3d3\", \n                 \"PG\" = \"#f890e7\", \n                 \"R\" = \"#fa7b3c\", \n                 \"NC-17\" = \"#772953\")) + \n    scale_y_continuous(labels = scales::dollar) \n    \nggp2_stream_srt + \n    labs_stream + \n    labs(fill = \"mpaa\")"
  },
  {
    "objectID": "prp/mosaic_plot.html",
    "href": "prp/mosaic_plot.html",
    "title": "Mosaic Plots",
    "section": "",
    "text": "Graph info\n\n\n\n\n\n\nShould I use this graph?\n\n\n\n\n\n\n\n\n\n\n\nA mosaic plot is similar to a stacked bar-graph, but instead of only relying on height and color to display the relative amount for each value, mosaic plots also use width.\nMosaic plot legends should be positioned on top or bottom and justified horizontally to preserve shape and improve readability.\nWe can build mosaic plots using the ggmosaic package."
  },
  {
    "objectID": "prp/mosaic_plot.html#more-info",
    "href": "prp/mosaic_plot.html#more-info",
    "title": "Mosaic Plots",
    "section": "More info",
    "text": "More info\nI recommend reading the ggmosaic vignette, particularly the sections on ordering and conditioning.\n\nTwo variablesFacets\n\n\n\nTWO VARIABLES:\n\n\nBelow is another example of a two-variable mosaic plot, mapping the product() variables as unruly_child and recline_rude, and the fill variable as recline_rude.\nOnce again we can see the counts for each category in the cross-tabulation:\n\n\n\n\n\n\n\n \n  \n    unruly_child \n    No \n    Somewhat \n    Very \n  \n \n\n  \n    Very \n    193 \n    119 \n    39 \n  \n  \n    Somewhat \n    204 \n    123 \n    24 \n  \n  \n    No \n    102 \n    38 \n    7 \n  \n\n\n\n\n\n\n\n\nCode\n# build 2-variable mosiac plot\nlabs_mosaic_2var <- labs(\n  title = \"In general...is it rude to...\", \n  subtitle = \"2-Variable plot\",\n  x = \"... recline your seat on a plane?\",\n  y = \"...knowingly bring unruly children on a plane?\",\n  fill = \"recline_rude responses\")\n\nggp2_mosaic_2var <- ggplot(data = fly_mosaic) +\n  geom_mosaic(aes(\n    x = product(unruly_child, recline_rude),\n    fill = recline_rude)) +\n  ggmosaic::theme_mosaic(base_size = 10) + \n  theme(legend.position = \"bottom\")\n  \nggp2_mosaic_2var + \n    labs_mosaic_2var\n\n\n\n\n\n\n\n\n\n\n\nFor conditional variables, we map the product() variable as unruly_child and the fill variable as baby, but include a conds variable (as product(recline_rude)).\n\n\n\n\nCode\n# build conditional mosiac plot\nlabs_mosaic_cond <- labs(\n  title = \"In general...is it rude to...\", \n  subtitle = \"Conditional plot\",\n  x = \"...recline your seat on a plane?\",\n  y = \"...knowingly bring unruly children on a plane?\",\n  fill = \"unruly_child responses\")\nggp2_mosaic_cond <- ggplot(data = fly_mosaic) +\n  geom_mosaic(aes(\n    x = product(unruly_child), # product variable\n    fill = unruly_child,\n    conds = product(recline_rude))) + # conditional variable\n  ggmosaic::theme_mosaic(base_size = 10) + \n  theme(legend.position = \"bottom\")\n\nggp2_mosaic_cond + \n    labs_mosaic_cond\n\n\n\n\n\n\n\n\n\n\n\n\n\nFACETS:\n\n\nAnother option for including a conditioning variable is including facets. In the example below we use recline_rude in both x and fill (we don’t need to wrap recline_rude in product() because it’s the only variable).\nThe divider argument let’s us control the spine partitions (vertically and horizontally). Below are the two vertical orientation options for the divider argument.\n\n\n\n\n\n\n\n\n\n\n\nThe two horizontal orientation options make the axis text harder to read, so these need to be manipulated manually."
  }
]