---
title: "Distributions"
format:
  html:
    dpi: 320
    fig-format: retina
    fig-asp: 0.618
    toc: true
    toc-location: left
    toc-title: Contents
    html-math-method: katex
    css: styles.css
    theme:
      light: materia    
      dark: superhero
      
      
execute:
  warning: false
  message: false
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(lubridate)
library(scales)
library(knitr)
library(kableExtra)
library(colorblindr)
library(downlit)
library(xml2)
library(reactable)
library(ggalluvial)
# options ----
options(
  repos = "https://cloud.r-project.org",
  dplyr.print_min = 6, 
  dplyr.print_max = 6, 
  scipen = 9999)
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))
```

# DISTRIBUTIONS

Comparing distributions across groups with `ggplot2` (and friends!)

## OVERLAPPING HISTOGRAM

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

Overlapping histograms allow us to compare distributions across the groups of a categorical (or ordinal) variable.

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_ovrlp_hist
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
The `penguins` data
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_ovrlp_hist
#| eval: true
#| echo: true
penguins <- palmerpenguins::penguins
glimpse(penguins)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map `flipper_length_mm` to the `x` axis and `species` to `fill` 

Set `alpha` to `2/3` inside `geom_histogram()`


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_ovrlp_hist
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_ovrlp_hist <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)", 
  fill = "Species")
ggp2_ovrlp_hist <- ggplot(data = penguins,
     aes(x = flipper_length_mm, 
         fill = species)) + 
     geom_histogram(alpha = 2/3) 
ggp2_ovrlp_hist + 
  labs_ovrlp_hist
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:** 
:::

::: {style="font-size: 0.85em;"}
Histograms work by dividing the variable provided to `x` [*into bins and counting the number of observations in each bin.*](https://ggplot2.tidyverse.org/reference/geom_histogram.html)

Experiment with different `binwidth`s when comparing distributions across groups. 
:::

```{r}
#| label: create_graph_ovrlp_hist
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_ovrlp_hist <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)", 
  fill = "Species")
ggp2_ovrlp_hist <- ggplot(data = penguins,
     aes(x = flipper_length_mm, 
         fill = species)) + 
     geom_histogram(alpha = 2/3) 
ggp2_ovrlp_hist + 
  labs_ovrlp_hist
```

::::

## OVERLAPPING FREQUENCY POLYGONS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

Overlapping frequency polygons are similar to overlapping histograms--they allow us to compare distributions of a continuous variable across the levels of a categorical variable.

Instead of using bars, frequency polygons use lines to show the shape of the distribution. 

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_ovrlp_freq_poly
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
The `penguins` data.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_ovrlp_freq_poly
#| eval: true
#| echo: true
penguins <- palmerpenguins::penguins
glimpse(penguins)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map `flipper_length_mm` to the `x` and `species` to `group`  

Map `species` to the `color` aesthetic *inside* the `geom_freqpoly()`


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_ovrlp_freq_poly
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_ovrlp_freq_poly <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)",
  color = "Species")
ggp2_ovrlp_freq_poly <- ggplot(data = penguins, 
       aes(x = flipper_length_mm,
           group = species)) + 
  geom_freqpoly(aes(color = species))
ggp2_ovrlp_freq_poly + 
  labs_ovrlp_freq_poly
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_ovrlp_freq_poly
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_ovrlp_freq_poly <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)",
  color = "Species")
ggp2_ovrlp_freq_poly <- ggplot(data = penguins, 
       aes(x = flipper_length_mm,
           group = species)) + 
  geom_freqpoly(aes(color = species))
ggp2_ovrlp_freq_poly + 
  labs_ovrlp_freq_poly
```

::::

## OVERLAPPING DOT-PLOTS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

We can use dot-plots to compare distributions of a continuous variable across the levels of a categorical variable, but we need to adjust the way the dots are displayed. 

The `geom_dotplot()` function has adjustable `method` and `binposition` arguments that allow it to function similar to a histogram or frequency polygon. 

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_ovrlp_dot_plots
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Remove missing `sex` from `penguins`
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_ovrlp_dot_plots
#| eval: true
#| echo: true
peng_dotplot <- filter(penguins, !is.na(sex))
glimpse(peng_dotplot)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map `flipper_length_mm` to `x`

Map `species` to `fill` (*inside* `factor()`)

Inside `geom_dotplot`, set `method` to `"histodot"`, `binwidth` to `1`, and `binpositions` to `"all"`


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_ovrlp_dot_plots
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_ovrlp_dotplot <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)",
  fill = "Species")
ggp2_ovrlp_dotplot <- ggplot(data = peng_dotplot, 
    aes(x = flipper_length_mm,
        fill = factor(species))) +
  geom_dotplot(
    method = "histodot",
    binwidth = 1,
    binpositions = "all")
ggp2_ovrlp_dotplot + 
  labs_ovrlp_dotplot
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.85em;"}
- `binwidth` = [*When method is "histodot", this specifies bin width. Defaults to 1/30 of the range of the data*](https://ggplot2.tidyverse.org/reference/geom_dotplot.html)

- `binpositions` = [*"all" determines positions of the bins with all the data taken together; this is used for aligning dot stacks across multiple groups.*](https://ggplot2.tidyverse.org/reference/geom_dotplot.html)
:::

```{r}
#| label: create_graph_ovrlp_dot_plots
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_ovrlp_dotplot <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)",
  fill = "Species")
ggp2_ovrlp_dotplot <- ggplot(data = peng_dotplot, 
    aes(x = flipper_length_mm,
        fill = factor(species))) +
  geom_dotplot(
    method = "histodot",
    binwidth = 1,
    binpositions = "all")
ggp2_ovrlp_dotplot + 
  labs_ovrlp_dotplot
```

::::

## BEE-SWARM PLOTS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

We can also use smaller dots (or points) to show the spread of values for a particular variable with bee-swarm plots

Install the [`ggbeeswarm` package](https://github.com/eclarke/ggbeeswarm).

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_beeswarm
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
devtools::install_github("eclarke/ggbeeswarm")
library(ggbeeswarm)
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
The `penguins` data.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_beeswarm
#| eval: true
#| echo: true
penguins <- palmerpenguins::penguins
glimpse(penguins)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map `island` to the `x` axis and `color`

Map `body_mass_g` to the `y` axis

Add the `ggbeeswarm::geom_beeswarm()` layer (with `alpha`)


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_beeswarm
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_beeswarm <- labs(
  title = "Adult Foraging Penguins",
  x = "Penguin Species",
  y = "Body mass (grams)")
ggp2_beeswarm <- ggplot(data = penguins, 
       aes(x = species, 
           y = body_mass_g, 
           color = species)) + 
  ggbeeswarm::geom_beeswarm(
      alpha = 2/3, 
    show.legend = FALSE) 
ggp2_beeswarm + 
  labs_beeswarm
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.85em;"}
Adjust the size/shape of the swarm using `method =` or the  `geom_quasirandom()` function from `ggbeeswarm`
:::

```{r}
#| label: create_graph_beeswarm
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_beeswarm <- labs(
  title = "Adult Foraging Penguins",
  x = "Penguin Species",
  y = "Body mass (grams)")
ggp2_beeswarm <- ggplot(data = penguins, 
       aes(x = species, 
           y = body_mass_g, 
           color = species)) + 
  ggbeeswarm::geom_beeswarm(
      alpha = 2/3, 
    show.legend = FALSE) 
ggp2_beeswarm + 
  labs_beeswarm
```

::::

## OVERLAPPING (OR STACKED) DENSITY PLOTS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

The `geom_density()` creates a [*smoothed version of the histogram*](https://ggplot2.tidyverse.org/reference/geom_density.html) and allows us to compare the distributions of a continuous variable across the levels of a categorical variable.


We can choose to overlap or `"stack"` the smoothed distributions.

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_ovrlp_density
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Remove missing `sex` from the `penguins` data
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_ovrlp_density
#| eval: true
#| echo: true
peng_density <- filter(penguins, !is.na(sex))
glimpse(peng_density)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map the `flipper_length_mm` to the `x` and `sex` to `fill` 

Add the `geom_density()`  

Set the `alpha` to `1/3` (to handle the overlapping areas)

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_ovrlp_density
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_ovrlp_density <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)",
  fill = "Sex")
ggp2_ovrlp_density <- ggplot(data = peng_density, 
       aes(x = flipper_length_mm, 
           fill = sex)) +
      geom_density(alpha = 1/3) 
ggp2_ovrlp_density + 
  labs_ovrlp_density
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.85em;"}
*A downside of density plots is the lack of interpretability of the **y** axis*

Make density area slightly transparent to handle over-plotting.
:::

```{r}
#| label: create_graph_ovrlp_density
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_ovrlp_density <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)",
  fill = "Sex")
ggp2_ovrlp_density <- ggplot(data = peng_density, 
       aes(x = flipper_length_mm, 
           fill = sex)) +
      geom_density(alpha = 1/3) 
ggp2_ovrlp_density + 
  labs_ovrlp_density
```

::::

### STACKED DENSITY PLOTS 

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map the `flipper_length_mm` to the `x`, add  `after_stat(count)`, and map `sex` to `fill` 

*Inside* `geom_density()`, set `position` to `"stack"`

Set the `alpha` to `1/3`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_stack_density
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_stack_density <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)", 
  fill = "Sex")
ggp2_stack_density <- ggplot(data = peng_density, 
       aes(x = flipper_length_mm, 
           after_stat(count),
           fill = sex)) +
      geom_density(position = "stack", 
                   alpha = 1/3) 
ggp2_stack_density + 
  labs_stack_density
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:** 
:::

::: {style="font-size: 0.85em;"}
Adding `after_stat(count)` uses the *`density * n` instead of the default density* which [*'preserves marginal densities'*](https://ggplot2.tidyverse.org/reference/geom_density.html#computed-variables).
:::

```{r}
#| label: create_graph_stack_density
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_stack_density <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)", 
  fill = "Sex")
ggp2_stack_density <- ggplot(data = peng_density, 
       aes(x = flipper_length_mm, 
           after_stat(count),
           fill = sex)) +
      geom_density(position = "stack", 
                   alpha = 1/3) 
ggp2_stack_density + 
  labs_stack_density
```

::::

## RIDGELINE PLOTS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

If we want to plot density curves but retain the interpretability of the axes, consider comparing multiple distributions using the [`ggridges` package](https://wilkelab.org/ggridges/).

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_ridgelines
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
devtools::install_github("wilkelab/ggridges")
library(ggridges)
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Remove missing `island` from `penguins`
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_ridgelines
#| eval: true
#| echo: true
peng_ridges <- filter(penguins, !is.na(island))
glimpse(peng_ridges)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map `bill_length_mm` to the `x` axis

Map `island` to the `y` axis and `fill`

Add the `ggridges::geom_density_ridges()` layer (with `alpha` set to `2/3`)

Move the legend to the bottom with `theme(legend.position = "bottom")`


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_ridgelines
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_ridges <- labs(
  title = "Adult foraging penguins",
  x = "Bill length (millimeters)",
  y = "Island", fill = "Island")
ggp2_ridges <- ggplot(data = peng_ridges,
       aes(x = bill_length_mm, 
           y = island, 
        fill = island)) +
  ggridges::geom_density_ridges(alpha = 2/3) + 
    theme(legend.position = "bottom")
ggp2_ridges + 
  labs_ridges
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.85em;"}
Ridgeline plots are excellent for comparing continuous distributions across groups. 
:::

```{r}
#| label: create_graph_ridgelines
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_ridges <- labs(
  title = "Adult foraging penguins",
  x = "Bill length (millimeters)",
  y = "Island", fill = "Island")
ggp2_ridges <- ggplot(data = peng_ridges,
       aes(x = bill_length_mm, 
           y = island, 
        fill = island)) +
  ggridges::geom_density_ridges(alpha = 2/3) + 
    theme(legend.position = "bottom")
ggp2_ridges + 
  labs_ridges
```

::::

## GROUPED BOX-PLOTS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

Grouped box-plots display five different statistical measures across a series of categories, or groups, of a discrete, ordinal, or interval variable.

The five statistical measures are 1) the first quartile, 2) the second quartile, and 3) the third quartile. The fourth and fifth values are the largest/smallest values no further than 1.5 X inter-quartile range from the hinges.

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_grp_boxplots
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Remove the missing `island` values from the `penguins` data.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_grp_boxplots
#| eval: true
#| echo: true
peng_box <- filter(penguins, !is.na(island))
glimpse(peng_box)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map `island` to the `x` axis and to `fill`

Map `bill_length_mm` to the `y` axis

Add `geom_boxplot()` and set the `alpha` to `2/3`


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_grp_boxplots
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_grp_boxplots <- labs(
  title = "Adult foraging penguins", 
  subtitle = "Palmer Archipelago, Antarctica",
  x = "Island", fill = "Island",
  y = "Bill length (millimeters)")
ggp2_grp_boxplots <- ggplot(data = peng_box,
       aes(x = island, 
           y = bill_length_mm, 
        fill = island)) +
  geom_boxplot(alpha = 2/3) 
ggp2_grp_boxplots + 
  labs_grp_boxplots
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.85em;"}
When a categorical variable is supplied, the plot will contain a box for each level or group.
:::

```{r}
#| label: create_graph_grp_boxplots
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_grp_boxplots <- labs(
  title = "Adult foraging penguins", 
  subtitle = "Palmer Archipelago, Antarctica",
  x = "Island", fill = "Island",
  y = "Bill length (millimeters)")
ggp2_grp_boxplots <- ggplot(data = peng_box,
       aes(x = island, 
           y = bill_length_mm, 
        fill = island)) +
  geom_boxplot(alpha = 2/3) 
ggp2_grp_boxplots + 
  labs_grp_boxplots
```

::::

## GROUPED VIOLIN PLOTS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

A ‘violin plot’ is a variation of a density or ridgeline plot,  where the distribution is plotted symmetrically creating a two-sided, smoothed distribution.

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_grp_violin
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Remove missing `island` from `penguins`
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_grp_violin
#| eval: true
#| echo: true
peng_violin <- filter(penguins, !is.na(island))
glimpse(peng_violin)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map `island` to the `x`, `bill_length_mm` to the `y`, and  `island` to `fill` 

Set `alpha` to `2/3`


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_grp_violin
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_grp_violin <- labs(
  title = "Adult foraging penguins", 
  subtitle = "Palmer Archipelago, Antarctica",
  x = "Island", fill = "Island",
  y = "Bill length (millimeters)")
ggp2_grp_violin <- ggplot(data = peng_violin,
       aes(x = island, 
           y = bill_length_mm, 
        fill = island)) +
  geom_violin(alpha = 2/3) 
ggp2_grp_violin + 
  labs_grp_violin
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.85em;"}
Violin plots can allow us to compare the 'center' and 'spread' of continuous variables across categorical groups.
:::

```{r}
#| label: create_graph_grp_violin
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_grp_violin <- labs(
  title = "Adult foraging penguins", 
  subtitle = "Palmer Archipelago, Antarctica",
  x = "Island", fill = "Island",
  y = "Bill length (millimeters)")
ggp2_grp_violin <- ggplot(data = peng_violin,
       aes(x = island, 
           y = bill_length_mm, 
        fill = island)) +
  geom_violin(alpha = 2/3) 
ggp2_grp_violin + 
  labs_grp_violin
```

::::

<!--

## Graph_Description

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::
<br>

Description

<br>

More_description.
::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Description of data
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_
#| eval: true
#| echo: true
penguins <- palmerpenguins::penguins
glimpse(penguins)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_scatter <- labs(
  title = "Bill Length vs. Flipper Length",
  x = "Bill Length (mm)", y = "Flipper length (mm)")
ggp2_scatter <- penguins |>
  ggplot(
    aes(x = bill_length_mm, 
      y = flipper_length_mm)) +
  geom_point()

ggp2_scatter + 
  labs_scatter
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_scatter <- labs(
    title = "Bill Length vs. Flipper Length",
    x = "Bill Length (mm)", 
    y = "Flipper length (mm)")
ggp2_scatter <- penguins |> 
  ggplot(aes(x = bill_length_mm,
      y = flipper_length_mm)) + 
  geom_point() 
ggp2_scatter + 
  labs_scatter
```

::::

-->