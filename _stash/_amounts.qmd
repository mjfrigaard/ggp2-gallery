---
title: "ggplot2 graph gallery"
author: "Comparing Amounts"
format:
  revealjs:
    height: 900
    width: 1600
    code-line-numbers: true
    theme: [night, slides.scss]
    background-transition: fade
    transition: slide
    transition-speed: fast
    highlight-style: ayu-mirage
    
code-link: true
execute:
  echo: true
  freeze: auto
---

```{r setup, include=FALSE}
library(tidyverse)
library(scales)
library(knitr)
library(kableExtra)
library(colorblindr)
library(downlit)
library(xml2)
library(reactable)
library(ggwaffle)
# options ----
options(
  reactable.theme = reactable::reactableTheme(
    color = "hsl(233, 9%, 87%)",
    backgroundColor = "hsl(233, 9%, 19%)",
    borderColor = "hsl(233, 9%, 22%)",
    stripedColor = "hsl(233, 12%, 22%)",
    highlightColor = "hsl(233, 12%, 24%)",
    inputStyle = list(backgroundColor = "hsl(233, 9%, 25%)")
  ),
  dplyr.print_min = 6, 
  dplyr.print_max = 6, 
  scipen = 99999)
# ggplot2 theme ----
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 18))
# funs ----
ds538 <- readr::read_rds("data/ds538.rds")
# movies_data ----
movies_data <- readr::read_rds("data/movies_data.rds")
```

# Load packages

<br>


:::: columns
::: {.column width="49%"}
Data packages:

<br>

::: {style="font-size: 0.80em; color:"}
```{r}
#| eval: true
#| echo: true
#| label: packages-data
library(tidyverse)
library(palmerpenguins)
library(fivethirtyeight)
# install.packages('fivethirtyeightdata', 
# repos = 'https://fivethirtyeightdata.github.io/drat/', 
# type = 'source')
library(ggplot2movies)
```
:::

:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
Graph packages:

<br>

::: {style="font-size: 0.80em; color:"}
```{r}
#| eval: true
#| echo: true
#| label: packages-graphs
# install.packages("devtools")
# devtools::install_github("liamgilbey/ggwaffle")
library(ggwaffle)
```
:::
:::
::::


# palmerpenguins

<br>

*You can learn more about the `penguins` data on the [package website](https://allisonhorst.github.io/palmerpenguins/)*

<br>

:::: columns
::: {.column width="38%"}
```{r}
#| eval: false
#| echo: true
#| label: penguins
penguins <- palmerpenguins::penguins
glimpse(penguins)
```
:::

::: {.column width="2%"}
:::

::: {.column width="60%"}
```{r}
#| eval: true
#| echo: false
#| label: penguins-glimpse
penguins <- palmerpenguins::penguins
glimpse(penguins, 50)
```
:::
::::

# fivethirtyeight

<br>

*All datasets from the [`fivethirtyeight` package](https://fivethirtyeight-r.netlify.app/) are listed below with descriptions*

<br>

Access them using: 

```{r}
#| label: fivethirtyeight-namespace
#| eval: false
#| echo: true
fivethirtyeight::
```

. . .

```{r}
#| label: fivethirtyeight-kable
#| eval: true
#| echo: false
#| message: false
#| warning: false
kableExtra::kable_material_dark(
  kable_input = knitr::kable(
    head(ds538)
    ), font_size = 25
  )
```

# ggplot2movies

<br>

*We're using `movies_data` (derived version of the [`ggplot2movies::movies`](https://github.com/hadley/ggplot2movies))*

<br>

::: columns
::: {.column width="38%"}
```{r movies_data}
#| eval: false
#| echo: true
#| label: movies_data
#| message: false
#| warning: false
glimpse(movies_data)
```
:::

::: {.column width="2%"}

:::

::: {.column width="60%"}
```{r glimpse-movies_data, echo=FALSE}
#| eval: true
#| echo: false
#| label: movies_data-glimpse
#| message: false
#| warning: false
glimpse(movies_data, 50)
```
:::
:::



# COMPARING AMOUNTS 

<br>

::: {.fragment fragment-index=1}
Comparing Counts
:::

::: {.fragment fragment-index=2}
and Summaries
:::

::: {.fragment fragment-index=3}
::: {style="font-size: 1.00em; color: #ffac00;"}
with `ggplot2`
:::
:::

# GROUPED COLUMN GRAPHS

<br>

. . .

::: {style="font-size: 1.25em; color: #ffd500;"}
***When would I use this graph?***
:::

<br>

. . .

<br>

Grouped (or summarized) column graphs display calculated 'summary' values for a numerical variable across the levels of a second categorical variable. Color is used to make comparisons and distinguish between groups (or levels) of the categorical variable.

. . .

<br>

In `ggplot2`,  we can create grouped column graphs with `geom_co()`. 


## GROUPED COLUMN GRAPHS

:::::: panel-tabset

### Code


:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::


::: {style="font-size: 0.80em;"}
The `movies_data`:
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: data_show_sum_bar
#| eval: false
glimpse(movies_data)
```

```{r}
#| label: data_run_sum_bar
#| eval: true
#| echo: false 
glimpse(movies_data, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}
::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.70em;"}

1. Create the labels

2. Map `mpaa` to `x` and `budget` to `y`

3. Inside `geom_col()`, map `mpaa` to `fill` and remove the legend with `show.legend = FALSE`

4. Format the `y` axis with `scale_y_continuous()` by setting `labels` to [`scales::dollar`](https://scales.r-lib.org/reference/label_dollar.html)

:::

::: {style="font-size: 0.80em;"}
```{r}
#| label: graph_code_sum_bar
#| code-line-numbers: "1-12|1-4|6-7|8|9|10|11-12"
#| eval: false
#| echo: true 
labs_col <- labs(
  title = "IMDB movie information/user ratings",
  x = "MPAA rating", 
  y = "Total budget in US dollars")
ggp2_col <- ggplot(data = movies_data,
              aes(x = mpaa, 
                  y = budget)) + 
        geom_col(aes(fill = mpaa), 
          show.legend = FALSE) + 
        scale_y_continuous(labels = scales::dollar) 
ggp2_col + 
  labs_col
```
:::
:::
::::

### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.75em;"}

`geom_col()` requires *both* `x` and `y` aesthetics, whereas `geom_bar()` *only* allows an `x` aesthetic. 


:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: graph_create_sum_bar
#| eval: true
#| echo: false
labs_col <- labs(
  title = "IMDB movie information/user ratings",
  x = "MPAA rating", 
  y = "Total budget in US dollars")
ggp2_col <- ggplot(data = movies_data,
              aes(x = mpaa, 
                  y = budget)) + 
        geom_col(aes(fill = mpaa), 
          show.legend = FALSE) + 
        scale_y_continuous(labels = scales::dollar) 
ggp2_col + 
  labs_col
```
:::
::::

### Summary 

:::: columns
::: {.column width="48%"}
::: {style="font-size: 0.75em;"}
If we pass a categorical variable to the `x` (like `mpaa`) and a continuous variable to `y` (like `budget`), `geom_col()` will calculate the sum of `y` by levels of `x`.
:::

```{r}
#| label: movies_sum_budget_show
#| echo: true
#| eval: false
movies_data |> 
  group_by(mpaa) |> 
  summarise(
      tot_bud = sum(budget, na.rm = TRUE),
      tot_bud = scales::dollar(tot_bud)) |> 
  ungroup() |> 
  select(MPAA = mpaa, 
        `Total budget` = tot_bud)
```

:::

::: {.column width="2%"}
:::

::: {.column width="50%"}

::: {style="font-size: 0.75em;"}
 We can see the underlying summary of `budget` using `dplyr`'s `group_by()` and `summarise()` functions.
:::

```{r}
#| label: movies_sum_budget_run
#| echo: false
#| eval: true
movies_sum_budget <- movies_data |> 
  group_by(mpaa) |> 
  summarise(
      tot_bud = sum(budget, na.rm = TRUE),
      tot_bud = scales::dollar(tot_bud)) |> 
  ungroup() |> 
  select(MPAA = mpaa, 
        `Total budget` = tot_bud)
knitr::kable(movies_sum_budget)
```
:::
::::
::::::


## MORE GROUPED COLUMN GRAPHS

:::::: panel-tabset

### Code

:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA**
:::

::: {style="font-size: 0.70em;"}
`geom_col()` allows us to display any summary statistic we can calculate for a numerical variable. For example, the code below summarizes the average `budget` grouped by levels of `mpaa` rating in the `movies_data` dataset. 
:::

::: {style="font-size: 0.85em;"}
```{r}
#| eval: false
#| label: data_show_grouped_bars
movies_col <- movies_data |> 
  group_by(mpaa) |> 
  summarise(
      avg_budget = mean(budget, na.rm = TRUE)) |> 
  ungroup()
glimpse(movies_col)
```

```{r}
#| label: data_run_grouped_bars
#| eval: true
#| echo: false 
movies_col <- movies_data |> 
  group_by(mpaa) |> 
  summarise(
      avg_budget = mean(budget, na.rm = TRUE)) |> 
  ungroup()
glimpse(movies_col, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH**
:::

::: {style="font-size: 0.70em;"}
1. Create the labels

2. Map `mpaa` to the `x` and `avg_budget` to the `y`

4. Map `mpaa` to `fill` *inside* the `aes()` of `geom_col()` and remove the legend with `show.lengend = FALSE`

5. Format the `y` axis with `scale_y_continuous()` by setting `labels` to [`scales::dollar`](https://scales.r-lib.org/reference/label_dollar.html)
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: grouped_bars
#| code-line-numbers: "1-12|1-4|6|7|8|9|10|11-12"
#| eval: false
#| echo: true 
labs_col <- labs(
  title = "IMDB movie information/user ratings",
  x = "MPAA rating", 
  y = "Average budget in US dollars")
ggp2_col <- ggplot(data = movies_col,
              aes(x = mpaa, 
                  y = avg_budget)) + 
        geom_col(aes(fill = mpaa), 
          show.legend = FALSE) + 
        scale_y_continuous(labels = scales::dollar) 
ggp2_col + 
  labs_col
```
:::

:::

::::


### Graph

:::: columns
::: {.column width="20%"}

::: {style="font-size: 0.75em;"}
If the categorical levels have long names, consider flipping the `x` and `y` axes (i.e., place the quantitative value on the `x` axis and the categorical variable on the `y`). 
:::

:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: create_grouped_bars
#| eval: true
#| echo: false
labs_col <- labs(
  title = "IMDB movie information/user ratings",
  x = "MPAA rating", 
  y = "Average budget in US dollars")
ggp2_col <- ggplot(data = movies_col,
              aes(x = mpaa, 
                  y = avg_budget)) + 
        geom_col(aes(fill = mpaa), 
          show.legend = FALSE) + 
        scale_y_continuous(labels = scales::dollar) 
ggp2_col + 
  labs_col
```
:::

::::

::::::


# OVERLAPPING BAR GRAPHS

<br>

. . .

::: {style="font-size: 1.25em; color: #ffd500;"}
***When would I use this graph?***
:::

<br>

. . .

<br>

We can also use bars to look at numeric and categorical variables using `geom_bar()` by setting `fill` argument

. . .

<br>

This results in bars differentiated by color and 'stacked' on top of each other. 


## OVERLAPPING (STACKED) BAR GRAPHS

:::::: panel-tabset


### Code


:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA**
:::

::: {style="font-size: 0.70em;"}
Remove missing `sex` from `penguins` and filter to only `"Adelie"` penguins.
:::

::: {style="font-size: 0.85em;"}
```{r}
#| eval: false
#| label: data_show_ovrlp_bars
penguins_ovrlp <- filter(penguins,
                  !is.na(sex) & species == "Adelie")
glimpse(penguins_ovrlp)
```

```{r}
#| label: data_run_ovrlp_bars
#| eval: true
#| echo: false 
penguins_ovrlp <- filter(penguins,
                  !is.na(sex) & species == "Adelie")
glimpse(penguins_ovrlp, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH**
:::

::: {style="font-size: 0.70em;"}
1. Create the labels

2. Map `flipper_length_mm` to the `x` and `sex` to `fill`

3. Add the `geom_bar()` layer
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: ovrlp_bars
#| code-line-numbers: "1-9|1-4|6|7|8-9"
#| eval: false
#| echo: true 
labs_bar_ovrlp <- labs(
  title = "Adelie adult foraging penguins",
  x = "Flipper length (millimeters)", 
  fill = "Sex")
ggp2_bar_ovrlp <- ggplot(data = penguins_ovrlp,
          aes(x = flipper_length_mm, fill = sex)) +
                geom_bar() 
ggp2_bar_ovrlp + 
  labs_bar_ovrlp
```
:::
:::
::::

### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.75em;"}

The `geom_bar()` function doesn't accept a `y` aesthetic, so the overlapping bars for each sub-group are differentiated with color by setting the `fill` aesthetic. 

:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: create_ovrlp_bars
#| eval: true
#| echo: false
labs_bar_ovrlp <- labs(
  title = "Adelie adult foraging penguins",
  x = "Flipper length (millimeters)", 
  fill = "Sex")
ggp2_bar_ovrlp <- ggplot(data = penguins_ovrlp,
          aes(x = flipper_length_mm, fill = sex)) +
                geom_bar() 
ggp2_bar_ovrlp + 
  labs_bar_ovrlp
```
:::
::::

::::::

# SIDE-TO-SIDE BAR GRAPHS

<br>

. . .

::: {style="font-size: 1.25em; color: #ffd500;"}
***When would I use this graph?***
:::

<br>

. . .

<br>

To compare amounts using bar size (length or height) in a side-to-side display, we can set the `position` in `geom_bar()` to `"dodge"` or `"dodge2"`


## DODGE BAR GRAPHS

:::::: panel-tabset

### Code


:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::


::: {style="font-size: 0.70em;"}
Remove any missing values from `sex` and `species` in the `penguins` data. 
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: data_show_dodge
#| eval: false
penguins_dodge <- filter(penguins,
                    !is.na(sex) & !is.na(species))
glimpse(penguins_dodge)
```

```{r}
#| label: data_run_dodge
#| eval: true
#| echo: false 
penguins_dodge <- filter(penguins,
                    !is.na(sex) & !is.na(species))
glimpse(penguins_dodge, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}
::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.70em;"}

1. Create the labels

2. Map `species` to the `x` and `sex` to `fill`

3. Inside the `geom_bar()` function, set position to `"dodge"`

:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: graph_code_dodge
#| code-line-numbers: "1-12|1-5|8-9|10|11-12"
#| eval: false
#| echo: true 
labs_bar_dodge <- labs(
  title = "Adult foraging penguins",
  subtitle = "position = 'dodge'",
  x = "Penguin Species",
  fill = "Penguin Sex")

ggp2_bar_dodge <- ggplot(data = penguins_dodge,
                    aes(x = species,
                      fill = sex)) +
                    geom_bar(position = "dodge")
ggp2_bar_dodge +
  labs_bar_dodge
```
:::
:::
::::

### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.75em;"}

By setting `position` to `"dodge"`, the bars are displayed side-to-side.

:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: graph_create_dodge
#| eval: true
#| echo: false
labs_bar_dodge <- labs(
  title = "Adult foraging penguins",
  subtitle = "position = 'dodge'",
  x = "Penguin Species",
  fill = "Penguin Sex")

ggp2_bar_dodge <- ggplot(data = penguins_dodge,
                    aes(x = species,
                      fill = sex)) +
                    geom_bar(position = "dodge")
ggp2_bar_dodge +
  labs_bar_dodge
```
:::
::::
::::::



## DODGE2 BAR GRAPHS

:::::: panel-tabset

### Code

:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::


::: {style="font-size: 0.70em;"}
Remove any missing values from `sex` and `species` in the `penguins` data. 
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: data_show_dodge2
#| eval: false
penguins_dodge2 <- filter(penguins,
                    !is.na(sex) & !is.na(species))
glimpse(penguins_dodge2)
```

```{r}
#| label: data_run_dodge2
#| eval: true
#| echo: false 
penguins_dodge2 <- filter(penguins,
                    !is.na(sex) & !is.na(species))
glimpse(penguins_dodge2, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}
::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.70em;"}

1. Create the labels

2. Map `species` to `x` and `sex` to `fill`

3. *Inside* `geom_bar()`, set `position` to `"dodge2"`

:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: graph_code_dodge2
#| code-line-numbers: "1-11|1-5|7-8|9|10-11"
#| eval: false
#| echo: true 
labs_bar_dodge2 <- labs(
  title = "Adelie adult foraging penguins",
  subtitle = "position = 'dodge2'",
  x = "Species",
  fill = "Penguin Sex")
ggp2_bar_dodge2 <- ggplot(data = penguins_dodge2,
                      aes(x = species,
                        fill = sex)) +
                      geom_bar(position = "dodge2")
ggp2_bar_dodge2 +
  labs_bar_dodge2
```
:::
:::
::::

### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.70em;"}

`"dodge2"` *preserves the total width of the elements* and *works without a grouping variable in a layer.*

:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: graph_create_dodge2
#| eval: true
#| echo: false
labs_bar_dodge2 <- labs(
  title = "Adelie adult foraging penguins",
  subtitle = "position = 'dodge2'",
  x = "Species",
  fill = "Penguin Sex")
ggp2_bar_dodge2 <- ggplot(data = penguins_dodge2,
                      aes(x = species,
                        fill = sex)) +
                      geom_bar(position = "dodge2")
ggp2_bar_dodge2 +
  labs_bar_dodge2
```
:::
::::


::::::

# WAFFLE CHART

<br>

. . .

::: {style="font-size: 1.25em; color: #ffd500;"}
***When would I use this graph?***
:::

<br>

. . .

<br>

Waffle charts use color to display the levels that make up the values in a categorical variable. The counts for each level are divided into separate colors into a square or grid display. 

. . .

<br>

We'll build a waffle chart using the [`ggwaffle` package.](https://liamgilbey.github.io/ggwaffle/)

## WAFFLE CHART

:::::: panel-tabset

### Code

:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.70em;"}
Waffle charts require a special data transformation with `ggwaffle::waffle_iron()`.

Set the `group` argument in `ggwaffle::aes_d()` as the categorical variable you want to see the relative counts for:
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: data_show_waffle
#| eval: false
penguins <- palmerpenguins::penguins
penguins <- dplyr::mutate(penguins, 
              species = as.character(species))
waffle_peng <- ggwaffle::waffle_iron(penguins,
                      aes_d(group = species))

glimpse(waffle_peng)
```

```{r}
#| label: data_run_waffle
#| eval: true
#| echo: false 

penguins <- palmerpenguins::penguins
penguins <- dplyr::mutate(penguins, 
              species = as.character(species))
waffle_peng <- ggwaffle::waffle_iron(penguins,
                      ggwaffle::aes_d(group = species))

glimpse(waffle_peng, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}
::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::
::: {style="font-size: 0.70em;"}
1. Create the labels

2. Map the `x` and `y` to the `x` and `y` axes

3. Map `group` to `fill`

4. Add `ggwaffle::geom_waffle()`

5. Add `ggwaffle::theme_waffle()`
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: waffle
#| code-line-numbers: "1-11|1-3|5|6|7|8|9-11"
#| eval: false
#| echo: true 
labs_waffle <- labs(
  title = "Waffle chart of palmer penguin species",
  x = "", y = "", fill = "Species")
ggp2_waffle <- ggplot(data = waffle_peng, 
       aes(x = x, 
           y = y, 
           fill = group)) + 
  ggwaffle::geom_waffle() 
ggp2_waffle + 
  labs_waffle +
  ggwaffle::theme_waffle()
```
:::
:::
::::

### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.70em;"}

Add `theme_waffle()` from `ggwaffle` to your waffle chart

:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: create_waffle
#| eval: true
#| echo: false
penguins <- palmerpenguins::penguins
penguins <- dplyr::mutate(penguins, 
              species = as.character(species))
waffle_peng <- ggwaffle::waffle_iron(penguins,
                ggwaffle::aes_d(group = species))
labs_waffle <- labs(
  title = "Waffle chart of palmer penguin species",
  x = "", y = "", fill = "Species")
ggp2_waffle <- ggplot(data = waffle_peng, 
       aes(x = x, 
           y = y, 
           fill = group)) + 
  ggwaffle::geom_waffle() 
ggp2_waffle + 
  labs_waffle +
  ggwaffle::theme_waffle()
```
:::
::::

::::::

# HEATMAPS

<br>

. . .

::: {style="font-size: 1.25em; color: #ffd500;"}
***When would I use this graph?***
:::

<br>

. . .

<br>

Heatmaps display quantitative values across an intersection of two categorical (or discrete) variables.

. . .

<br>

The intersecting cells contain variations of color saturation (i.e., the grade of purity or vividness) to represent the numerical values between groups.

## HEATMAPS

:::::: panel-tabset

### Data

:::: columns
::: {.column width="35%"}
::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
For the heatmap, we're going to re-structure and filter the `bob_ross` data from the `fivethirtyeight` package. 
:::
:::

::: {.column width="5%"}
:::

::: {.column width="60%"}
::: {style="font-size: 0.75em;"}
```{r}
#| label: data_show_heatmap_tile
#| eval: false
heatmap_ross <- fivethirtyeight::bob_ross |>
  pivot_longer(-c(episode, season,
    episode_num, title),
    names_to = "object",
    values_to = "present") |>
  mutate(present = as.logical(present),
    object = str_replace_all(object, "_", " ")) |>
  arrange(episode, object) |> 
  filter(object %in% c('conifer', 'trees', 
    'tree', 'snow', 'palm trees', 'grass', 
    'flowers', 'cactus', 'bushes', 'cirrus', 
    'cumulus', 'deciduous', 'clouds', 'fog')) |>
  group_by(season, object) |>
  summarise(occurances = sum(present)) |>
  ungroup()
glimpse(heatmap_ross)
```

```{r}
#| label: data_run_heatmap_tile
#| eval: true
#| echo: false 
heatmap_ross <- fivethirtyeight::bob_ross |>
  pivot_longer(-c(episode, season,
    episode_num, title),
    names_to = "object",
    values_to = "present") |>
  mutate(present = as.logical(present),
    object = str_replace_all(object, "_", " ")) |>
  arrange(episode, object) |> 
  filter(object %in% c('conifer', 'trees', 
    'tree', 'snow', 'palm trees', 'grass', 
    'flowers', 'cactus', 'bushes', 'cirrus', 
    'cumulus', 'deciduous', 'clouds', 'fog')) |>
  group_by(season, object) |>
  summarise(occurances = sum(present)) |>
  ungroup()
glimpse(heatmap_ross, 50)
```
:::
:::
::::


### Code

:::: columns
::: {.column width="45%"}
::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: graph_code_heatmap_tile
#| code-line-numbers: "1-12|1-5|7-9|10|11-12"
#| eval: false
#| echo: true 
labs_heatmap_tile <- labs(
  title = "Bob Ross' plants & clouds", 
  x = "Season", 
  y = "Plant & Cloud Objects", 
  fill = "Occurances")
ggp2_heatmap_tile <- ggplot(data = heatmap_ross, 
       aes(x = season, 
           y = object, 
           fill = occurances)) + 
       geom_tile()
ggp2_heatmap_tile + 
  labs_heatmap_tile
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}
::: {style="font-size: 0.85em;"}

1. Create the labels

2. Assign `season` to `x`, `object` to `y`, and `occurances` to `fill`

3. Add the `geom_tile()`

:::
:::

::::

### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::
::: {style="font-size: 0.75em;"}

By default, the color scale is set to a gradient corresponding to values of the numerical variable (our `occurances` variable)

:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: graph_create_heatmap_tile
#| eval: true
#| echo: false
labs_heatmap_tile <- labs(
  title = "Bob Ross' plants & clouds", 
  x = "Season", 
  y = "Plant & Cloud Objects", 
  fill = "Occurances")
ggp2_heatmap_tile <- ggplot(data = heatmap_ross, 
       aes(x = season, 
           y = object, 
           fill = occurances)) + 
       geom_tile()
ggp2_heatmap_tile + 
  labs_heatmap_tile
```
:::
::::
::::::



## MORE HEATMAPS

:::::: panel-tabset

### Code


:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA**
:::

::: {style="font-size: 0.70em;"}
In addition to `geom_tile()`, heatmaps can also be created with the `geom_raster()` function. We're going to use the same re-structured version of the `fivethirtyeight::bob_ross` data, `heatmap_ross`.
:::

::: {style="font-size: 0.80em;"}
```{r}
#| label: data_run_show_heatmaps_raster
#| eval: true
#| echo: true 
glimpse(heatmap_ross, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH**
:::

::: {style="font-size: 0.70em;"}
1. Create the labels

2. Assign `season` to `x`, `object` to `y`, and `occurances` to `fill`

3. Add the `geom_raster()`
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: heatmaps
#| code-line-numbers: "1-12|1-5|7-9|10|11-12"
#| eval: false
#| echo: true 
labs_heatmap_raster <- labs(
  title = "Bob Ross' plants & clouds", 
  x = "Season", 
  y = "Plant/Cloud Object", 
  fill = "Occurances")
ggp2_heatmap_raster <- ggplot(data = heatmap_ross, 
       aes(x = season, 
           y = object, 
           fill = occurances)) + 
       geom_raster()
ggp2_heatmap_raster + 
  labs_heatmap_raster
```
:::
:::
::::

### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.75em;"}


`geom_raster()` is [*a high performance special case for when all the tiles are the same size*.](https://ggplot2.tidyverse.org/reference/geom_tile.html) which is much [*faster, and produces smaller output when saving to PDF.*](https://ggplot2.tidyverse.org/reference/geom_tile.html#ref-examples)

:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: create_heatmaps
#| eval: true
#| echo: false
# Create labels 
labs_heatmap_raster <- labs(
  title = "Bob Ross' plants & clouds", 
  x = "Season", 
  y = "Plant/Cloud Object", 
  fill = "Occurances")
# create plot 
ggp2_heatmap_raster <- ggplot(data = heatmap_ross, 
       aes(x = season, 
           y = object, 
           fill = occurances)) + 
       geom_raster()
ggp2_heatmap_raster + 
  labs_heatmap_raster
```
:::
::::

::::::




# Recap

We've covered [`ggplot2` graphs that display]{.fragment} [amounts]{.fragment .highlight-red}
