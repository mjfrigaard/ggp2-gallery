---
title: "Summary bar-graphs"
format:
  html:
    toc: true
    code-fold: show
execute:
  warning: false
  message: false
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(lubridate)
library(scales)
library(knitr)
library(kableExtra)
library(colorblindr)
library(downlit)
# options ----
options(
  repos = "https://cloud.r-project.org",
  dplyr.print_min = 6, 
  dplyr.print_max = 6, 
  scipen = 999999)
# fonts ----
library(extrafont)
library(sysfonts)
# import font
extrafont::font_import(
    paths = "../assets/Ubuntu/",
    prompt = FALSE)
# add font
sysfonts::font_add(
    family =  "Ubuntu", 
    regular = "../assets/Ubuntu/Ubuntu-Regular.ttf")
# use font
showtext::showtext_auto()
# add theme
source("../R/theme_ggp2g.R")
# set theme
ggplot2::theme_set(theme_ggp2g(
    base_size = 16))
# install data packages ----
install.packages("palmerpenguins")
library(palmerpenguins)
```



:::: {.callout-tip collapse="false" icon=false}
## Graph info
::: {style="font-size: 1.25em; color: #38B44A;"}
**Should I use this graph?**
:::

<br>

```{r}
#| label: full_code_display
#| eval: true
#| echo: false
#| warning: false
#| message: false
#| out-height: '60%'
#| out-width: '60%'
#| fig-align: right
peng_sum_col <- palmerpenguins::penguins |> 
    dplyr::select(body_mass_g, island) |> 
    tidyr::drop_na() |> 
    # divide the mass value by 1000
    dplyr::mutate(
        body_mass_kg = body_mass_g / 1000
    )
labs_sum_col <- labs(
    title = "Total Penguin Mass",
    subtitle = "How many kilograms of penguin per Island?",
    x = "Island",
    y = "Total Penguin Body Mass (kg)")
ggp2_sum_col <- ggplot(data = peng_sum_col,
    aes(x = island,
        y = body_mass_kg)) +
    geom_col(aes(fill = island), 
        show.legend = FALSE)  
ggp2_sum_col + 
    labs_sum_col
```

Summary bar-graphs display the sum (or total) of a numerical variable across the levels of a second categorical variable. Color is used to make comparisons and distinguish between groups (or levels) of the categorical variable. 

In `ggplot2`, we can create summary bar-graphs with `geom_bar()`.

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_sum_col
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {.column-margin}
![Artwork by @allison_horst](../www/lter_penguins.png){fig-align="right" width="30%" height="30%"}
:::

::: {style="font-size: 0.85em;"}
Remove the missing values from `body_mass_g` and `island` in the `palmerpenguins::penguins` data and convert body mass in grams to kilograms (`body_mass_kg`).

*We'll also reduce the number of columns in the `penguins` data for clarity.*
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_sum_col
#| eval: true
#| echo: true
peng_sum_col <- palmerpenguins::penguins |> 
    dplyr::select(body_mass_g, island) |> 
    tidyr::drop_na() |> 
    # divide the mass value by 1000
    dplyr::mutate(
        body_mass_kg = body_mass_g / 1000
    )
dplyr::glimpse(peng_sum_col)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels

Map `island` to `x` and `body_mass_kg` to `y`

*Inside* the `aes()` of `geom_col()`, map `island` to `fill` 

*Outside* the `aes()` of `geom_col()`, remove the legend with `show.legend = FALSE`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_sum_col
#| eval: false
#| echo: true 
#| warning: false
#| message: false
#| column: page-inset-right
#| layout-nrow: 1
labs_sum_col <- labs(
    title = "Total Penguin Mass",
    subtitle = "How many kilograms of penguin per Island?",
    x = "Island",
    y = "Total Penguin Body Mass (kg)")
ggp2_sum_col <- ggplot(data = peng_sum_col,
    aes(x = island,
        y = body_mass_kg)) +
    geom_col(aes(fill = island), 
        show.legend = FALSE)  
ggp2_sum_col + 
    labs_sum_col
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_sum_col
#| eval: true
#| echo: false
#| warning: false
#| message: false
#| column: page-inset-right
#| layout-nrow: 1
labs_sum_col <- labs(
    title = "Total Penguin Mass",
    subtitle = "How many kilograms of penguin per Island?",
    x = "Island",
    y = "Total Penguin Body Mass (kg)")
ggp2_sum_col <- ggplot(data = peng_sum_col,
    aes(x = island,
        y = body_mass_kg)) +
    geom_col(aes(fill = island), 
        show.legend = FALSE)  
ggp2_sum_col + 
    labs_sum_col
```

::::

## More Info

Note that we didn't have to write any code to calculate the total `body_mass_g` (displayed on the `y` axis) by `island`.

That's because `ggplot2` does this for us!

:::: {.column-margin}

**`_bar()` vs. `_col()`:**

::: {style="font-size: 0.85em; color: #1da2d8;"}
`geom_bar()` will map a categorical variable to the `x` *or* `y` and display counts for the discrete levels (see [`stat_count()`](https://ggplot2.tidyverse.org/reference/geom_bar.html) for more info)
:::

::::

:::: {.column-margin}

::: {style="font-size: 0.85em; color: #660066;"}
`geom_col()` will map *both* `x` *and* `y` aesthetics, and is used when we want to display numerical (quantitative) values across the levels of a categorical variable. `geom_col()` assumes these values have been created in their own column (see  [`stat_identity()`](https://ggplot2.tidyverse.org/reference/stat_identity.html) for more info)
:::

::::

:::: {.panel-tabset}

### Summary

::: {style="font-size: 0.90em; color: #1e83c8;"}
**SUMMARY:**
:::

::: {style="font-size: 0.85em;"}

If we pass a categorical variable to the `x` (like `island`) and a continuous variable to `y` (like `body_mass_kg`), `geom_col()` will calculate the `sum()` of `y` by levels of `x`
:::


::: {style="font-size: 0.85em;"}
We can see the underlying summary of budget using `dplyr`â€™s `group_by()` and `summarise()` functions.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: create_summary_sum_col
#| eval: false
#| echo: true
#| warning: false
#| message: false
palmerpenguins::penguins |> 
    dplyr::select(body_mass_g, island) |> 
    tidyr::drop_na() |> 
    # divide the mass value by 1000
    dplyr::mutate(
        body_mass_kg = body_mass_g / 1000
    ) |> 
    dplyr::group_by(island) |>
    dplyr::summarise(
       `Total Penguin Body Mass (kg)` = sum(body_mass_kg)) |>
    dplyr::ungroup() |> 
    dplyr::select(`Island` = island, 
        `Total Penguin Body Mass (kg)`)
```
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: show_summary_sum_col
#| eval: true
#| echo: false
#| warning: false
#| message: false
palmerpenguins::penguins |> 
    dplyr::select(body_mass_g, island) |> 
    tidyr::drop_na() |> 
    # divide the mass value by 1000
    dplyr::mutate(
        body_mass_kg = body_mass_g / 1000
    ) |> 
    dplyr::group_by(island) |>
    dplyr::summarise(
       `Total Penguin Body Mass (kg)` = sum(body_mass_kg)) |>
    dplyr::ungroup() |> 
    dplyr::select(`Island` = island, 
        `Total Penguin Body Mass (kg)`) |> 
    knitr::kable() |> 
    kableExtra::kable_paper()
```
:::

### Identity vs. Count

::: {style="font-size: 0.90em; color: #1e83c8;"}
**STATS:**
:::

::: {style="font-size: 0.85em;"}
The `geom_bar()` geom will also create grouped bar-graphs, but we have to switch the `stat` argument to `"identity"`.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: show_stat_sum_col
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| column: page-inset-right
#| layout-nrow: 1
ggplot(data = peng_sum_col,
    aes(x = island,
        y = body_mass_kg)) +
    geom_col(aes(fill = island), 
        show.legend = FALSE,
        stat = "identity")  +
    labs_sum_col
```
:::

::::
