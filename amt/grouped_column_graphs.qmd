---
title: "Grouped column-graphs"
execute:
  warning: false
  message: false
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(lubridate)
library(scales)
library(knitr)
library(kableExtra)
library(colorblindr)
library(downlit)
# options ----
options(
  repos = "https://cloud.r-project.org",
  dplyr.print_min = 6, 
  dplyr.print_max = 6, 
  scipen = 9999)
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 18))
install.packages("ggplot2movies")
install.packages("palmerpenguins")
```



:::: {.callout-tip collapse="false"}
## Graph info
::: {style="font-size: 1.25em; color: #38B44A;"}
**When would I use this graph?**
:::

<br>

```{r}
#| label: full_code_display
#| eval: true
#| echo: false
#| warning: false
#| message: false
#| out-height: '60%'
#| out-width: '60%'
#| fig-align: right
library(ggplot2movies) 
library(ggplot2)
movies_grp_col <- ggplot2movies::movies |> 
    filter(!is.na(budget) & mpaa != "") |> 
    select(budget, mpaa)
labs_col <- labs(
  title = "IMDB movie information/user ratings",
  x = "MPAA rating", 
  y = "Total budget in US dollars")
ggp2_col <- ggplot(data = movies_grp_col,
              aes(x = mpaa, 
                  y = budget)) + 
        geom_col(aes(fill = mpaa), 
          show.legend = FALSE) + 
        scale_y_continuous(labels = scales::dollar) 
ggp2_col + 
  labs_col
```

Grouped column graphs display calculated ‘summary’ values for a numerical variable across the levels of a second categorical variable. Color is used to make comparisons and distinguish between groups (or levels) of the categorical variable.

In `ggplot2`, we can create grouped column graphs with `geom_co()`.

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_grp_col
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("ggplot2movies")
library(ggplot2movies) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Remove the missing values from `budget` and `mpaa` in the `ggplot2movies::movies` data.

*We'll also reduce the number of columns in the movies data for clarity.*
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_grp_col
#| eval: true
#| echo: true
movies_grp_col <- ggplot2movies::movies |> 
    filter(!is.na(budget) & mpaa != "") |> 
    select(budget, mpaa)
glimpse(movies_grp_col)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create the labels

Map `mpaa` to `x` and `budget` to `y`

Inside `geom_col()`, map `mpaa` to `fill` and remove the legend with `show.legend = FALSE`

Format the `y` axis with `scale_y_continuous()` by setting labels to `scales::dollar`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_grp_col
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_col <- labs(
  title = "IMDB movie information/user ratings",
  x = "MPAA rating", 
  y = "Total budget in US dollars")
ggp2_col <- ggplot(data = movies_grp_col,
              aes(x = mpaa, 
                  y = budget)) + 
        geom_col(aes(fill = mpaa), 
          show.legend = FALSE) + 
        scale_y_continuous(labels = scales::dollar) 
ggp2_col + 
  labs_col
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_grp_col
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_col <- labs(
  title = "IMDB movie information/user ratings",
  x = "MPAA rating", 
  y = "Total budget in US dollars")
ggp2_col <- ggplot(data = movies_grp_col,
              aes(x = mpaa, 
                  y = budget)) + 
        geom_col(aes(fill = mpaa), 
          show.legend = FALSE) + 
        scale_y_continuous(labels = scales::dollar) 
ggp2_col + 
  labs_col
```

### Summary

::: {style="font-size: 0.90em; color: #1e83c8;"}
**SUMMARY:**
:::

::: {style="font-size: 0.85em;"}
If we pass a categorical variable to the `x` (like `mpaa`) and a continuous variable to `y` (like `budget`), `geom_col()` will calculate the `sum()` of `y` by levels of `x`
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: create_summary_grp_col
#| eval: false
#| echo: true
#| warning: false
#| message: false
ggplot2movies::movies |>
    filter(!is.na(budget) & mpaa != "") |>
    select(budget, mpaa) |>
    group_by(mpaa) |>
    summarise(tot_bud = sum(budget, na.rm = TRUE),
        tot_bud = scales::dollar(tot_bud)) |>
    ungroup() |>
    select(MPAA = mpaa,
        `Total budget` = tot_bud)
```

:::


::: {style="font-size: 0.85em;"}
We can see the underlying summary of budget using `dplyr`’s `group_by()` and `summarise()` functions.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: show_summary_grp_col
#| eval: true
#| echo: false
#| warning: false
#| message: false
ggplot2movies::movies |>
    filter(!is.na(budget) & mpaa != "") |>
    select(budget, mpaa) |>
    group_by(mpaa) |>
    summarise(tot_bud = sum(budget, na.rm = TRUE),
        tot_bud = scales::dollar(tot_bud)) |>
    ungroup() |>
    select(MPAA = mpaa,
        `Total budget` = tot_bud) |>
    knitr::kable() |> 
    kableExtra::kable_paper()
```
:::

::::