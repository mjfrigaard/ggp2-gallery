---
title: "Proportions"
format:
  html:
    dpi: 320
    fig-format: retina
    fig-asp: 0.618
    toc: true
    toc-location: left
    toc-title: Contents
    html-math-method: katex
    css: styles.css
    theme:
      light: materia    
      dark: superhero
      
      
execute:
  warning: false
  message: false
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(lubridate)
library(scales)
library(knitr)
library(kableExtra)
library(colorblindr)
library(downlit)
library(xml2)
library(reactable)
library(ggalluvial)
# options ----
options(
  repos = "https://cloud.r-project.org",
  dplyr.print_min = 6, 
  dplyr.print_max = 6, 
  scipen = 9999)
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))
```

# PROPORTIONS

Comparing proportions & part-to-whole relationships with `ggplot2` (and friends!)

## PIE-CHARTS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

*“In general, pie charts work well when the goal is to emphasize simple fractions, such as one-half, one-third, or one-quarter.”*

*“They also work well when we have very small datasets.”* - [Claus O. Wilke, Fundamentals of Data Visualization (2019)](https://clauswilke.com/dataviz/)

Pie-charts are ideal for comparing the proportions of categorical variable values, and we can build pie-charts using the [`ggpubr` package.](https://rpkgs.datanovia.com/ggpubr/)

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_pie
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("ggpubr")
library(ggpubr)
install.packages("ggplot2movies")
library(ggplot2movies) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Remove the missing values and `"NC-17"` from `mpaa` and summarise the count and percent.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_pie
#| eval: true
#| echo: true
movie_pie <- ggplot2movies::movies |>
  filter(mpaa != "" & mpaa != "NC-17") |> 
  group_by(mpaa) |> 
  summarise(cnt = n()) |> 
  mutate(
    perc = round(cnt / sum(cnt), 3),
    mpaa = factor(mpaa, 
          levels = c("PG", "PG-13", "R")))
glimpse(movie_pie)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels

Assign `"perc"` to `x`

Assign `labs` to `label`

Assign `"in"` to `lab.pos`

Assign `"white"` to `lab.font` and `color`

Assign `"mpaa"` to `fill`

Remove legend with `theme(legend.position = "none")`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_pie
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs <- paste0(movie_pie$mpaa, " (", 
               (100*movie_pie$perc), "%)")
labs_pie <- labs(
  title = "Percent MPAA ratings for IMDB movies",
  x = "Percent MPAA rating")

ggp2_pie <- ggpubr::ggpie(movie_pie, 
          x = "perc", label = labs, 
          lab.pos = "in", lab.font = "white",
          fill = "mpaa", color = "white") + 
    theme(legend.position = "none")  
    
ggp2_pie + 
  labs_pie
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:** *Note the variables in `ggpubr::ggpie()` are assigned in quotes!*
:::

```{r}
#| label: create_graph_pie
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs <- paste0(movie_pie$mpaa, " (", 
               (100*movie_pie$perc), "%)")
labs_pie <- labs(
  title = "Percent MPAA ratings for IMDB movies",
  x = "Percent MPAA rating")

ggp2_pie <- ggpubr::ggpie(movie_pie, 
          x = "perc", label = labs, 
          lab.pos = "in", lab.font = "white",
          fill = "mpaa", color = "white") + 
    theme(legend.position = "none")  
    
ggp2_pie + 
  labs_pie
```

::::

## DIVERGING BAR GRAPHS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

If you have two proportions that contain positive and negative values, consider using diverging bars with `geom_bar()`
::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_diverging_bar
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("fivethirtyeight")
library(fivethirtyeight) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Create `trump_approval_diverg` from the `trump_approval_trend` dataset in the `fivethirtyeight` package.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_diverging_bar
#| eval: true
#| echo: true
fivethirtyeight::trump_approval_trend |> 
  filter(subgroup == "All polls") |> 
  mutate(
    month = lubridate::month(modeldate,
                label = TRUE, abbr = TRUE),
    approve = approve_estimate*0.01,
    disapprove = disapprove_estimate*0.01,
    disapprove = disapprove * -1) |> 
  pivot_longer(cols = c(approve, disapprove), 
    names_to = "poll", values_to = "values") |> 
  group_by(month, poll) |> 
    summarise(
      month_avg = mean(values, na.rm = TRUE)
    ) |> 
  ungroup() -> trump_approval_diverg
glimpse(trump_approval_diverg)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels

Map the `month` to the `x` and `month_avg` to the `y`

Inside` geom_bar()`

  - map `poll` to `fill`
  
  - use `stat = "identity"` and `width = .5`
  
Add `scale_y_continuous()` to manually set the limits and format the axis with `scales::percent`

Move the legend to the bottom of the graph with `theme(legend.position = "bottom")`


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_diverging_bar
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_geom_bar_diverg <- labs(
  title = "Trump Approval Ratings",
  subtitle = "From 'How Popular is Donald Trump'",
  x = "Month",
  y = "Monthly average percent",
  fill = "Estimate")
ggp2_bars_diverg <- ggplot(
  data = trump_approval_diverg, 
    aes(x = month, y = month_avg)) +
  geom_bar(aes(fill = poll),
    stat = "identity", width = .5) + 
  scale_y_continuous(limits = c(-1, 1), 
    labels = scales::percent) + 
    theme(legend.position = "bottom")

ggp2_bars_diverg + 
  labs_geom_bar_diverg
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_diverging_bar
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_geom_bar_diverg <- labs(
  title = "Trump Approval Ratings",
  subtitle = "From 'How Popular is Donald Trump'",
  x = "Month",
  y = "Monthly average percent",
  fill = "Estimate")
ggp2_bars_diverg <- ggplot(
  data = trump_approval_diverg, 
    aes(x = month, y = month_avg)) +
  geom_bar(aes(fill = poll),
    stat = "identity", width = .5) + 
  scale_y_continuous(limits = c(-1, 1), 
    labels = scales::percent) + 
    theme(legend.position = "bottom")

ggp2_bars_diverg + 
  labs_geom_bar_diverg
```

::::


## DIVERGING BAR GRAPHS (VERTICAL)

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

Diverging bar-charts can be arranged vertically, too. 

For vertically arranged bars, we switch the `x` and `y` axis variables.

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_vert_diverg_bars
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("fivethirtyeight")
library(fivethirtyeight) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Create `trump_approval_diverg` from the `trump_approval_trend` dataset in the `fivethirtyeight` package.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_vert_diverg_bars
#| eval: true
#| echo: true
fivethirtyeight::trump_approval_trend |> 
  filter(subgroup == "All polls") |> 
  mutate(
    month = lubridate::month(modeldate,
                label = TRUE, abbr = TRUE),
    approve = approve_estimate*0.01,
    disapprove = disapprove_estimate*0.01,
    disapprove = disapprove * -1) |> 
  pivot_longer(cols = c(approve, disapprove), 
    names_to = "poll", values_to = "values") |> 
  group_by(month, poll) |> 
    summarise(
      month_avg = mean(values, na.rm = TRUE)
    ) |> 
  ungroup() -> trump_approval_diverg
glimpse(trump_approval_diverg)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels

Map the `month_avg` to the `x` and `month` to the `y` 

*Inside* `geom_bar()` 

  - map `poll` to `fill`  

  - use `stat = "identity"` and `width = .5`  
  
Add `scale_y_continuous()` to manually set the limits and format the axis with `scales::percent` 


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_vert_diverg_bars
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_geom_bar_diverg_vert <- labs(
  title = "Trump Approval Ratings",
  subtitle = "From 'How Popular is Donald Trump'",
  x = "Monthly average percent",
  y = "Month",
  fill = "Estimate")
ggp2_bar_diverg_vert <- ggplot(
  data = trump_approval_diverg,
      aes(x = month_avg, y =  month)) +
  geom_bar(
      aes(fill = poll), 
        stat = "identity", width = .5) + 
  scale_x_continuous(limits = c(-1, 1), 
        labels = scales::percent)
ggp2_bar_diverg_vert + 
  labs_geom_bar_diverg_vert
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_vert_diverg_bars
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_geom_bar_diverg_vert <- labs(
  title = "Trump Approval Ratings",
  subtitle = "From 'How Popular is Donald Trump'",
  x = "Monthly average percent",
  y = "Month",
  fill = "Estimate")
ggp2_bar_diverg_vert <- ggplot(
  data = trump_approval_diverg,
      aes(x = month_avg, y =  month)) +
  geom_bar(
      aes(fill = poll), 
        stat = "identity", width = .5) + 
  scale_x_continuous(limits = c(-1, 1), 
        labels = scales::percent)
ggp2_bar_diverg_vert + 
  labs_geom_bar_diverg_vert
```

::::

## STACKED (OR FILLED) DENSITY GRAPHS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::
Density graphs are typically used to visualize the distribution of a single variable, but stacked density graphs are great for visualizing how proportions vary across numeric (continuous) variables.
::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_fill_density
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Remove missing `sex` from the `penguins` data
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_fill_density
#| eval: true
#| echo: true
peng_density <- filter(penguins, !is.na(sex))
glimpse(peng_density)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels

Map the `flipper_length_mm` to the `x` and add  `after_stat(count)` 

Map `sex` to `fill`  

*Inside* the `geom_density()` function, set `position` to `"fill"`


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_fill_density
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_fill_density <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)",
  fill = "Sex")
ggp2_fill_density <- ggplot(data = peng_density, 
       aes(x = flipper_length_mm, 
           after_stat(count),
          fill = sex)) +
      geom_density(position = "fill") 
ggp2_fill_density + 
  labs_fill_density
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:** [*You can use `position = "fill"` to produce a conditional density estimate*](https://ggplot2.tidyverse.org/reference/geom_density.html#ref-examples)
:::

```{r}
#| label: create_graph_fill_density
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_fill_density <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)",
  fill = "Sex")
ggp2_fill_density <- ggplot(data = peng_density, 
       aes(x = flipper_length_mm, 
           after_stat(count),
          fill = sex)) +
      geom_density(position = "fill") 
ggp2_fill_density + 
  labs_fill_density
```

::::

## MOSAIC PLOT

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

A mosaic plot is similar to a stacked bar-graph, but instead of only relying on height and color to display the relative amount for each value, mosaic plots also use width.

We can build mosaic plots using the [`ggmosaic` package.](https://haleyjeppson.github.io/ggmosaic/)

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_mosaic
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("fivethirtyeight")
library(fivethirtyeight) 
devtools::install_github("haleyjeppson/ggmosaic")
library(ggmosaic)
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
The `fivethirtyeight::flying` data, after removing the missing values from `baby` and `unruly_child`. 
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_mosaic
#| eval: true
#| echo: true
flying <- fivethirtyeight::flying
fly_mosaic <- filter(flying, 
              !is.na(baby) & !is.na(unruly_child)) |> 
              select(baby, unruly_child)
glimpse(fly_mosaic)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels

Map the `product()` of `unruly_child` and `baby` to the `x` axis

Map `baby` to `fill`

Add `theme_mosaic()`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_mosaic
#| eval: false
#| echo: true 
#| warning: false
#| message: false
#| fig-height: 7
#| fig-width: 7
labs_mosaic <- labs(
      title = "In general...", 
      subtitle = "...is it rude to...",
      x = "... bring a baby on a plane?",
      y = "..,knowingly bring unruly children on a plane?",
      fill = "Responses") 
ggp2_mosaic <- ggplot(data = fly_mosaic) +
  geom_mosaic(aes(x = product(unruly_child, baby), 
      fill = baby)) +
  theme_mosaic()
ggp2_mosaic + 
    labs_mosaic
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:** *It's a good idea to adjust the `fig-height` and `fig-width` of your graph:*
:::

```{r}
#| label: create_graph_mosaic
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_mosaic <- labs(
      title = "In general...", 
      subtitle = "...is it rude to...",
      x = "... bring a baby on a plane?",
      y = "..,knowingly bring unruly children on a plane?",
      fill = "Responses") 
ggp2_mosaic <- ggplot(data = fly_mosaic) +
  geom_mosaic(aes(x = product(unruly_child, baby), 
      fill = baby)) +
  theme_mosaic()
ggp2_mosaic + 
    labs_mosaic
```

::::

## TREEMAPS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::


Treemaps display how numerical hierarchical values make up a whole in a rectangular layout.

We'll build a treemap using the [`treemapify` package.](http://wilkox.org/treemapify/) 
::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_treemap
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
devtools::install_github("wilkox/treemapify")
library(treemapify) 
install.packages("palmerpenguins")
library(palmerpenguins)
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Filter the missing values from `sex`, group the data by `species`, `island`, and `sex`, then count the `species` and `island` (then `ungroup()`).
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_treemap
#| eval: true
#| echo: true
treemap_peng <- penguins |> 
                  filter(!is.na(sex)) |> 
                  group_by(species, island, sex) |>
  count(species, island) |> 
  ungroup()
glimpse(treemap_peng)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels

Map the `n` to `area`, `sex` to `fill`, `species` to `label`, and `island` to `subgroup`


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_treemap
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_treemap <- labs(
  title = "Species, island, and sex of adult penguins")
ggp2_treemap <- ggplot(treemap_peng, 
       aes(area = n, 
           fill = sex, 
           label = species,
           subgroup = island)) +
       treemapify::geom_treemap() 
ggp2_treemap + 
  labs_treemap
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_treemap
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_treemap <- labs(
  title = "Species, island, and sex of adult penguins")
ggp2_treemap <- ggplot(treemap_peng, 
       aes(area = n, 
           fill = sex, 
           label = species,
           subgroup = island)) +
       treemapify::geom_treemap() 
ggp2_treemap + 
  labs_treemap
```

::::

### MORE TREEMAPS

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Add the borders with `geom_treemap_subgroup_border()`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_treemap_sgb
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_treemap <- labs(
  title = "Species, island, and sex of adult penguins")
ggp2_treemap <- ggplot(treemap_peng, 
       aes(area = n, 
           fill = sex, 
           label = species,
           subgroup = island)) +
       treemapify::geom_treemap()
ggp2_treemap_sgb <- ggp2_treemap + 
       treemapify::geom_treemap_subgroup_border()
ggp2_treemap_sgb + 
  labs_treemap
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_treemap_sgb
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_treemap <- labs(
  title = "Species, island, and sex of adult penguins")
ggp2_treemap <- ggplot(treemap_peng, 
       aes(area = n, 
           fill = sex, 
           label = species,
           subgroup = island)) +
       treemapify::geom_treemap()
ggp2_treemap_sgb <- ggp2_treemap + 
       treemapify::geom_treemap_subgroup_border()
ggp2_treemap_sgb + 
  labs_treemap
```

::::

### EVEN MORE TREEMAPS

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Include labels for subgroup with `geom_treemap_subgroup_text()` (see full list of arguments [here](http://wilkox.org/treemapify/))

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_tmap_sgb_txt
#| eval: false
#| echo: true 
#| warning: false
#| message: false
ggp2_treemap_sgb <- ggp2_treemap + 
       treemapify::geom_treemap_subgroup_border()
ggp2_tmap_sgb_txt <- 
  treemapify::geom_treemap_subgroup_text(
         place = "center", 
         grow = TRUE, 
         alpha = 0.9, 
         color = "white",
         fontface = "bold",
         family = "sans",
         min.size = 0)
ggp2_treemap_sgb + 
  ggp2_tmap_sgb_txt + 
  labs_treemap
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_tmap_sgb_txt
#| eval: true
#| echo: false
#| warning: false
#| message: false
ggp2_treemap_sgb <- ggp2_treemap + 
       treemapify::geom_treemap_subgroup_border()
ggp2_tmap_sgb_txt <- 
  treemapify::geom_treemap_subgroup_text(
         place = "center", 
         grow = TRUE, 
         alpha = 0.9, 
         color = "white",
         fontface = "bold",
         family = "sans",
         min.size = 0)
ggp2_treemap_sgb + 
  ggp2_tmap_sgb_txt + 
  labs_treemap
```

::::

<!--

## Graph_Description

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::


Description



More_description.
::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Description of data
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_
#| eval: true
#| echo: true
penguins <- palmerpenguins::penguins
glimpse(penguins)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_scatter <- labs(
  title = "Bill Length vs. Flipper Length",
  x = "Bill Length (mm)", y = "Flipper length (mm)")
ggp2_scatter <- penguins |>
  ggplot(
    aes(x = bill_length_mm, 
      y = flipper_length_mm)) +
  geom_point()

ggp2_scatter + 
  labs_scatter
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_scatter <- labs(
    title = "Bill Length vs. Flipper Length",
    x = "Bill Length (mm)", 
    y = "Flipper length (mm)")
ggp2_scatter <- penguins |> 
  ggplot(aes(x = bill_length_mm,
      y = flipper_length_mm)) + 
  geom_point() 
ggp2_scatter + 
  labs_scatter
```

::::

-->
