---
title: "ggplot2 graph gallery"
author: "Single Variable Graphs"
format:
  revealjs:
    height: 900
    width: 1600
    code-line-numbers: true
    theme: [night, slides.scss]
    background-transition: fade
    transition: slide
    transition-speed: fast
    highlight-style: ayu-mirage
    
code-link: true
execute:
  echo: true
  freeze: auto
---

```{r setup, include=FALSE}
library(tidyverse)
library(scales)
library(knitr)
library(kableExtra)
library(colorblindr)
library(downlit)
library(xml2)
library(reactable)
# options ----
options(
  dplyr.print_min = 6, 
  dplyr.print_max = 6, 
  scipen = 9999)
# ggplot2 theme ----
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 18))
# funs ----
ds538 <- readr::read_rds("data/ds538.rds")
# movies_data ----
movies_data <- readr::read_rds("data/movies_data.rds")
```

# Load packages

<br>


:::: columns
::: {.column width="49%"}

Data packages:

<br>

::: {style="font-size: 0.80em; color:"}
```{r}
#| eval: true
#| echo: true
#| label: packages-data
library(tidyverse)
# install.packages('fivethirtyeightdata', 
# repos = 'https://fivethirtyeightdata.github.io/drat/', 
# type = 'source')
library(scales)
library(kableExtra)
library(palmerpenguins)
library(fivethirtyeight)
library(ggplot2movies)
```
:::
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}

Graph packages:

<br>

::: {style="font-size: 0.80em; color:"}
```{r}
#| eval: true
#| echo: true
#| label: packages-graphs
# install.packages("devtools")
# devtools::install_github("eclarke/ggbeeswarm")
library(ggbeeswarm)
# devtools::install_github("wilkelab/ggridges")
library(ggridges)
```
:::
:::
::::


# palmerpenguins

<br>

*You can learn more about the `penguins` data on the [package website](https://allisonhorst.github.io/palmerpenguins/)*

<br>

:::: columns
::: {.column width="38%"}
```{r}
#| eval: false
#| echo: true
#| label: penguins
penguins <- palmerpenguins::penguins
glimpse(penguins)
```
:::

::: {.column width="2%"}
:::

::: {.column width="60%"}
```{r}
#| eval: true
#| echo: false
#| label: penguins-glimpse
penguins <- palmerpenguins::penguins
glimpse(penguins, 50)
```
:::
::::

# fivethirtyeight

<br>

*All datasets from the [`fivethirtyeight` package](https://fivethirtyeight-r.netlify.app/) are listed below with descriptions*

<br>

Access them using: 

```{r}
#| label: fivethirtyeight-namespace
#| eval: false
#| echo: true
fivethirtyeight::
```

. . .

```{r}
#| label: fivethirtyeight-kable
#| eval: true
#| echo: false
#| message: false
#| warning: false
kableExtra::kable_material_dark(
  kable_input = knitr::kable(
    head(ds538)
    ), font_size = 25
  )
```

# ggplot2movies

<br>

*We're using `movies_data` (derived version of the [`ggplot2movies::movies`](https://github.com/hadley/ggplot2movies))*

<br>

::: columns
::: {.column width="38%"}
```{r movies_data}
#| eval: false
#| echo: true
#| label: movies_data
#| message: false
#| warning: false
glimpse(movies_data)
```
:::

::: {.column width="2%"}

:::

::: {.column width="60%"}
```{r glimpse-movies_data, echo=FALSE}
#| eval: true
#| echo: false
#| label: movies_data-glimpse
#| message: false
#| warning: false
glimpse(movies_data, 50)
```
:::
:::

# UNIVARIATE GRAPHS 

<br>

::: {.fragment fragment-index=1}
Single Variable  
:::

::: {.fragment fragment-index=2}
Graphs
:::

::: {.fragment fragment-index=3}
::: {style="font-size: 1.00em; color: #ffac00;"}
with `ggplot2`
:::
:::

# BAR-GRAPHS

<br>

. . .

::: {style="font-size: 1.25em; color: #ffd500;"}
***Should I use this graph?***
:::

<br>

. . .

<br>

The bar-graph (or bar-chart) is used to display counts for the levels of a categorical variable. 

. . .

<br>

Bar charts can be arranged vertically or horizontally, but the length of the bar represents the 'count' for each level value. 

. . .

<br>

In `ggplot2`, bar charts can be built using `geom_bar()`.


## BAR-GRAPHS

:::::: panel-tabset

### Code

:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.80em;"}
The `movies_data` dataset.
:::

::: {style="font-size: 0.85em;"}
```{r}
#| eval: false
#| label: data_show_bar_graph
glimpse(movies_data)
```

```{r}
#| label: data_run_bar_graph
#| eval: true
#| echo: false 
glimpse(movies_data, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH**
:::

::: {style="font-size: 0.80em;"}
1. Create labels

2. Map `mpaa` to the `x` axis

3. Map `mpaa` to the `fill` aesthetic *inside* the `aes()` of `geom_bar()`

:::

::: {style="font-size: 0.85em;"}
```{r}
#| code-line-numbers: "|6|7"
#| label: code_bar_graph
#| eval: false
#| echo: true
labs_bar <- labs(
  title = "IMDB movie information/user ratings",
  x = "MPAA rating", y = "Count", 
  fill = "MPAA")
ggp2_bar <- ggplot(data = movies_data, 
       aes(x = mpaa)) + 
    geom_bar(aes(fill = mpaa)) 
ggp2_bar + 
  labs_bar
```
:::
:::
::::


### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.85em;"}

The bar (or column) graph displays counts of a categorical variable (MPAA rating)

:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: show_bar_graphs
#| eval: true
#| echo: false
# Create labels 
labs_bar <- labs(
  title = "IMDB movie information/user ratings",
  x = "MPAA rating", y = "Count", 
  fill = "MPAA")
# create plot 
ggp2_bar <- ggplot(data = movies_data, 
       aes(x = mpaa)) + 
    geom_bar(aes(fill = mpaa)) 
ggp2_bar + 
  labs_bar
```
:::
::::

::::::

# HISTOGRAMS

<br>

. . .

::: {style="font-size: 1.25em; color: #ffd500;"}
***Should I use this graph?***
:::

<br>

. . .

<br>

Histograms use bars, but the `x` axis is divided into ‘bins’ that cover the range of the variable.

. . .

<br>

The standard number of bins is `30`. 

## HISTOGRAMS

:::::: panel-tabset

### Code


:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.80em;"}
The `penguins` data.
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: data_show__histograms
#| eval: false
glimpse(penguins)
```

```{r}
#| label: data_run__histograms
#| eval: true
#| echo: false 
glimpse(penguins, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.80em;"}

1. Create labels

2. Map `flipper_length_mm` to the `x` axis 

3. Add the `geom_histogram()` layer
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: graph_code__histograms
#| code-line-numbers: "|7|8"
#| eval: false
#| echo: true 

# Create labels 
labs_histogram <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)")
# create plot 
ggp2_hist <- ggplot(data = penguins,
     aes(x = flipper_length_mm)) + 
     geom_histogram() 
ggp2_hist + 
  labs_histogram
```
:::
:::
::::

### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.75em;"}

Experiment to see how many `bins` fit your variable’s distribution:

:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: create_histograms
#| eval: true
#| echo: false

penguins <- palmerpenguins::penguins
labs_histogram <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)")
ggp2_hist <- ggplot(data = penguins,
     aes(x = flipper_length_mm)) + 
     ggplot2::geom_histogram() 
ggp2_hist + 
  labs_histogram
```
:::
::::


::::::

# FREQUENCY POLYGONS

<br>

. . .

::: {style="font-size: 1.25em; color: #ffd500;"}
***Should I use this graph?***
:::

<br>

. . .

<br>

Frequency polygons (`geom_freqpoly()`) are similar to histograms, 

. . .

<br>

but they use lines instead of bars to represent the variable distribution.


## FREQUENCY POLYGONS

:::::: panel-tabset

### Code


:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::


::: {style="font-size: 0.80em;"}
The `penguins` data
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: data_show_freq_poly
#| eval: false
glimpse(penguins)
```

```{r}
#| label: data_run_freq_poly
#| eval: true
#| echo: false 
glimpse(penguins, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.80em;"}
1. Create labels

2. Map `flipper_length_mm` to the `x` axis

3. Add the `geom_freqpoly()` layer
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: graph_code_freq_poly
#| code-line-numbers: "1-8|1-3|5|6"
#| eval: false
#| echo: true 

labs_freqpoly <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)")
ggp2_freqpoly <- ggplot(data = penguins,
      aes(x = flipper_length_mm)) + 
    geom_freqpoly()
ggp2_freqpoly + 
  labs_freqpoly
```
:::
:::
::::

### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.75em;"}

Experiment to see how many `bins` fit your variable’s distribution

:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: create_freq_poly
#| eval: true
#| echo: false

labs_freqpoly <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)")
ggp2_freqpoly <- ggplot(data = penguins,
      aes(x = flipper_length_mm)) + 
    geom_freqpoly()
ggp2_freqpoly + 
  labs_freqpoly
```
:::
::::


::::::


# DOT-PLOTS

<br>

. . .

::: {style="font-size: 1.25em; color: #ffd500;"}
***Should I use this graph?***
:::

<br>

. . .

<br>

Dot-plots (`geom_dotplot()`) are similar to histograms and frequency polygons,



. . .

<br>

except instead of using bars or lines, they use dots to represent the values of a given variable.

## DOT-PLOTS

:::::: panel-tabset

### Code


:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.80em;"}
The `penguins` data.
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: data_show_dot_plot
#| eval: false
glimpse(penguins)
```

```{r}
#| label: data_run_dot_plot
#| eval: true
#| echo: false 
glimpse(penguins, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}
::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.80em;"}
1. Create labels

2. Map `flipper_length_mm` to the `x` axis

3. Adjust the `dotsize`

4. Add the `geom_dotplot()` layer
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: graph_code_dot_plot
#| code-line-numbers: "1-8|1-3|5|6"
#| eval: false
#| echo: true 

labs_dotplot <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)")
ggp2_dotplot <- ggplot(data = penguins,
      aes(x = flipper_length_mm)) + 
    geom_dotplot(dotsize = 0.5) 
ggp2_dotplot + 
  labs_dotplot
```
:::
:::
::::

### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.75em;"}

The relative counts for each value are represented by the height of the dots. 

:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: create_dot_plot
#| eval: true
#| echo: false

labs_dotplot <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)")
ggp2_dotplot <- ggplot(data = penguins,
    aes(x = flipper_length_mm)) + 
    geom_dotplot(dotsize = 0.5) 
ggp2_dotplot + 
  labs_dotplot
```
:::
::::


::::::

# DENSITY PLOTS

<br>

. . .

::: {style="font-size: 1.25em; color: #ffd500;"}
***Should I use this graph?***
:::

<br>

. . .

<br>

Density plots are similar to frequency polygons and histograms, except the line has been ‘smoothed.’

. . .

<br>

Instead of dividing the `x` axis into discrete quantitative ‘bins’ to create groups for the variable values, density plots transform the distribution according to a ‘bandwidth’ parameter.

## DENSITY PLOTS

:::::: panel-tabset

### Code


:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.80em;"}
The `penguins` data.
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: data_show_density
#| eval: false
glimpse(penguins)
```

```{r}
#| label: data_run_density
#| eval: true
#| echo: false 
glimpse(penguins, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.80em;"}
1. Create labels

2. Map `flipper_length_mm` to the `x` axis

3. Add the `geom_density()` layer
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: graph_code_density
#| code-line-numbers: "1-9|1-3|5|6|8|9"
#| eval: false
#| echo: true 

labs_density <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)")
ggp2_density <- ggplot(data = penguins, 
        aes(x = flipper_length_mm)) + 
      geom_density() 

ggp2_density +
  labs_density

```
:::
:::
::::

### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.75em;"}

The only downside to density plots is the `y` axis is difficult to interpret. 

:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: create_density
#| eval: true
#| echo: false

labs_density <- labs(
  title = "Adult foraging penguins",
  x = "Flipper length (millimeters)")
ggp2_density <- ggplot(data = penguins, 
        aes(x = flipper_length_mm)) + 
      geom_density() 

ggp2_density +
  labs_density
```
:::
::::


::::::

# VIOLIN PLOTS

<br>

. . .

::: {style="font-size: 1.25em; color: #ffd500;"}
***Should I use this graph?***
:::

<br>

. . .

<br>

A ‘violin plot’ is a variation of a density plot, where the distribution is plotted symmetrically creating a two-sided area.


## VIOLIN PLOTS

:::::: panel-tabset

### Code


:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.80em;"}
The `penguins` data.
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: data_show_violin
#| eval: false
glimpse(penguins)
```

```{r}
#| label: data_run_violin
#| eval: true
#| echo: false 
glimpse(penguins, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}
::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.80em;"}
1. Create labels  
   - Place an empty string (`""`) in the `x` argument   

2. Map and empty string (`""`) to the `x` and `bill_length_mm` to the `y`  

3. Add `geom_violin()` 

:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: graph_code_violin
#| code-line-numbers: "|6|7|8|9"
#| eval: false
#| echo: true 
labs_violin <- labs(
  title = "Adult foraging penguins",
  subtitle = "Distribution of bill length",
  x = "",
  y = "Bill length (millimeters)")
ggp2_violin <- ggplot(data = penguins,
       aes(x = '', 
           y = bill_length_mm)) +
       geom_violin() 
ggp2_violin + 
  labs_violin
```
:::
:::
::::

### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.75em;"}

Violin plots can show the 'center' and 'spread' of continuous variables across categorical groups.

:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: create_violin
#| eval: true
#| echo: false
labs_violin <- labs(
  title = "Adult foraging penguins",
  subtitle = "Distribution of bill length",
  x = "",
  y = "Bill length (millimeters)")
ggp2_violin <- ggplot(data = penguins,
       aes(x = '', 
           y = bill_length_mm)) +
       geom_violin() 
ggp2_violin + 
  labs_violin
```
:::
::::


::::::




# BOX-PLOTS

<br>

. . .

::: {style="font-size: 1.25em; color: #ffd500;"}
***Should I use this graph?***
:::

<br>

. . .

<br>

Box-plots (sometimes called box-and-whisker plots) are great because they display a collection of statistics in a single graph.

. . .

<br>

We’re going to build a box-plot of a single numeric variable and review it’s contents.

## BOX-PLOTS

:::::: panel-tabset

### Code


:::: columns
::: {.column width="45%"}

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.80em;"}
The `movies_data` data.
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: data_show_box
#| eval: false
glimpse(movies_data)
```

```{r}
#| label: data_run_box
#| eval: true
#| echo: false 
glimpse(movies_data, 50)
```
:::

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}
::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::
::: {style="font-size: 0.80em;"}
1. Create labels

2. Map a blank character string (`" "`) to the `x` axis

3. Map `length` to the `y` axis and an empty string to the `x` axis

4. Add the `geom_boxplot()` layer
:::

::: {style="font-size: 0.85em;"}
```{r}
#| label: graph_code_box
#| code-line-numbers: "|5|6|7"
#| eval: false
#| echo: true 
labs_boxplot <- labs(
  title = "IMDB Movie information and user ratings",
  y = "length", x = "")
ggp2_boxplot <- ggplot(data = movies_data, 
           aes(x = " ", 
               y = length)) +
        geom_boxplot() 

ggp2_boxplot + 
  labs_boxplot
```
:::
:::
::::

### Graph

:::: columns
::: {.column width="20%"}
::: {style="font-size: 0.75em;"}

Box-plots graph the 25th percentile, the median, the 75th percentile, the interquartile range (IQR).

:::
:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

```{r}
#| label: create_box
#| eval: true
#| echo: false
labs_boxplot <- labs(
  title = "IMDB Movie information and user ratings",
  y = "length", x = "")
ggp2_boxplot <- ggplot(data = movies_data, 
           aes(x = " ", 
               y = length)) +
        geom_boxplot() 

ggp2_boxplot + 
  labs_boxplot
```
:::
::::


::::::


## MORE ON BOX-PLOTS {.smaller}

:::: columns

::: {.column width="40%"}

::: {style="font-size: 0.90em;"}
The table below shows the 25th percentile, the median, the 75th percentile, the IQR, and a histogram of the length column from the `movies_data` dataset.
:::

::: {style="font-size: 0.50em;"}
```{r}
#| label: box_table_stats
#| eval: true
#| echo: false 
lgnth_skim <- skimr::skim(movies_data$length)
LengthBoxStats <- select(lgnth_skim,
     `25th` = numeric.p25, Median = numeric.p50,
     `75th` = numeric.p75, Histogram = numeric.hist) %>%
     mutate(IQR = IQR(movies_data$length, na.rm = TRUE)) %>%
     select(`25th`, Median, `75th`, IQR, Histogram)
kableExtra::kable_material_dark(
  kable_input = knitr::kable(LengthBoxStats), 
  font_size = 28
  )
```
:::

:::


::: {.column width="2%"}
:::

::: {.column width="58%"}

::: {style="font-size: 0.90em;"}
In the figure below we can see how the box-plot represents each of these numbers using lines and points. 
:::

![](www/boxplot-diagram.png){fig-align="center" width="100%" height="100%"}


::: {style="font-size: 0.90em;"}
In `ggplot2`, values that fall more than 1.5 times the IQR are displayed as individual points (aka outliers). The lines extending from the bottom and top of the main box represent the last non-outlier value in the distribution.
:::

:::

::::

## EVEN MORE ON BOX-PLOTS

. . .

Compare the four graphs of `length` from `movie_data` below to the box-plot:

. . .

![](www/boxplot-comparisons.png){fig-align="center" width="100%" height="100%"}

# Recap

We've covered [`ggplot2` graphs that display]{.fragment} [distributions]{.fragment .highlight-red}

