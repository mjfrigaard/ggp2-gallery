---
title: "Relationships"
format:
  html:
    dpi: 320
    fig-format: retina
    fig-asp: 0.618
    toc: true
    toc-location: left
    toc-title: Contents
    html-math-method: katex
    css: styles.css
    theme:
      light: materia    
      dark: superhero
      
      
execute:
  warning: false
  message: false
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(lubridate)
library(scales)
library(knitr)
library(kableExtra)
library(colorblindr)
library(downlit)
library(xml2)
library(reactable)
library(ggalluvial)
# options ----
options(
  repos = "https://cloud.r-project.org",
  dplyr.print_min = 6, 
  dplyr.print_max = 6, 
  scipen = 9999)
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))
```

# RELATIONSHIPS

Trends, correlations, and connections with `ggplot2` (and friends!)

## SCATTER PLOT

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

Scatter plots are used to display two continuous variables.

If one of the continuous variables is assumed to affect the other (i.e., `outcome` vs. `predictor`), place the `outcome` on the `y` axis and the `predictor` on the `x` axis.

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_scatter
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
The `penguins` data
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_scatter
#| eval: true
#| echo: true
penguins <- palmerpenguins::penguins
glimpse(penguins)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels

Map `bill_length_mm` to the `x` axis

Map `flipper_length_mm` to the `y` axis

Add `geom_point()`  

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_scatter
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_scatter <- labs(
  title = "Bill Length vs. Flipper Length",
  x = "Bill Length (mm)", y = "Flipper length (mm)")
ggp2_scatter <- penguins |>
  ggplot(
    aes(x = bill_length_mm, 
      y = flipper_length_mm)) +
  geom_point()

ggp2_scatter + 
  labs_scatter
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.85em; color;"}
If multiple points occupy the same value position, use transparency (`alpha`) to improve visibility.
:::

```{r}
#| label: create_graph_scatter
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_scatter <- labs(
  title = "Bill Length vs. Flipper Length",
  x = "Bill Length (mm)", y = "Flipper length (mm)")
ggp2_scatter <- penguins |>
  ggplot(
    aes(x = bill_length_mm, 
      y = flipper_length_mm)) +
  geom_point()

ggp2_scatter + 
  labs_scatter
```

::::

## GROUPED SCATTER PLOT

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

To display the relationship between **two** continuous variables across a third categorical variable. Use color to distinguish between categorical levels across the two continuous variable. 

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_grp_scatter
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
The `penguins` data.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_grp_scatter
#| eval: true
#| echo: true
penguins <- palmerpenguins::penguins
glimpse(penguins)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels

Map `bill_length_mm` to the `x` axis 

Map `flipper_length_mm` to the `y` axis  

Map `species` to `color` inside the `geom_point()`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_grp_scatter
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_grp_scatter <- labs(
  title = "Bill Length vs. Flipper Length",
  x = "Bill Length (mm)", y = "Flipper length (mm)", 
  color = "Penguin species")

ggp2_grp_scatter <- penguins |> 
  ggplot(
    aes(x = bill_length_mm, 
        y = flipper_length_mm)) + 
  geom_point(aes(color = species)) 

ggp2_grp_scatter + 
  labs_grp_scatter
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.85em;"}
Adjust over-plotting with transparency (`alpha`)
:::


```{r}
#| label: create_graph_grp_scatter
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_grp_scatter <- labs(
  title = "Bill Length vs. Flipper Length",
  x = "Bill Length (mm)", y = "Flipper length (mm)", 
  color = "Penguin species")

ggp2_grp_scatter <- penguins |> 
  ggplot(
    aes(x = bill_length_mm, 
        y = flipper_length_mm)) + 
  geom_point(aes(color = species)) 

ggp2_grp_scatter + 
  labs_grp_scatter
```

::::


## BUBBLE CHART

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

Bubble graphs display relationships between three continuous variables.

The position on the `x` and `y` axis illustrates the relationship between the first two, and the `size` of the point (i.e., bubble) conveys the value of the third. 

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_bubble
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
The `penguins` data  
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_bubble
#| eval: true
#| echo: true
penguins <- palmerpenguins::penguins
glimpse(penguins)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels

Map `bill_length_mm` to `x` axis

Map `flipper_length_mm` to `y` axis 

Map `body_mass_g` to `size`  

Set `alpha` to `1/3`  

Add `scale_size()`, set the `range` to `c(0.1, 10)` and `name` to `"Body Mass (g)"`

Move the legend to the bottom of the graph with `theme(legend.position = "bottom")`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_bubble
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_bubble <- labs(
  title = "Bill Length vs. Flipper Length",
  x = "Bill Length (mm)", y = "Flipper length (mm)", 
  size = "Body Mass (g)")

ggp2_bubble <- penguins |> 
  ggplot(
    aes(x = bill_length_mm, y = flipper_length_mm)) + 
  geom_point(aes(size = body_mass_g), alpha = 1/3) + 
  scale_size(range = c(.1, 10), 
             name = "Body Mass (g)") + 
  theme(legend.position = "bottom")

ggp2_bubble + 
  labs_bubble
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.85em;"}
Once again, transparency (`alpha`) can be used to handle over-plotting
:::


```{r}
#| label: create_graph_bubble
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_bubble <- labs(
  title = "Bill Length vs. Flipper Length",
  x = "Bill Length (mm)", y = "Flipper length (mm)", 
  size = "Body Mass (g)")

ggp2_bubble <- penguins |> 
  ggplot(
    aes(x = bill_length_mm, y = flipper_length_mm)) + 
  geom_point(aes(size = body_mass_g), alpha = 1/3) + 
  scale_size(range = c(.1, 10), 
             name = "Body Mass (g)") + 
  theme(legend.position = "bottom")

ggp2_bubble + 
  labs_bubble
```

::::

## GROUPED BUBBLE CHART

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

In addition to size, the grouped bubble graph uses color to display differences across categorical levels.

::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_grp_bubble
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
The `penguins` data 
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_grp_bubble
#| eval: true
#| echo: true
penguins <- palmerpenguins::penguins
glimpse(penguins)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels

Map `bill_length_mm` to the `x` axis and  `flipper_length_mm` to the `y` axis  

Inside `geom_point()`  

  - map `body_mass_g` to `size` and `species` to `fill`  
  
  - set the `alpha` to `2/3`, shape to `21`, and `color` to `"black"`  
    
In the `scale_size()`  

  - set `range` to `c(.04, 8)` and `name` to `"Body Mass (g)"` 
    
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_grp_bubble
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_grp_bubble <- labs(
  title = "Bill Length vs. Flipper Length",
  x = "Bill Length (mm)", y = "Flipper length (mm)", 
  size = "Body Mass (g)")

ggp2_grp_bubble <- penguins |> 
  ggplot(aes(
    x = bill_length_mm, y = flipper_length_mm)) + 
  geom_point(
    aes(size = body_mass_g, fill = species), 
        alpha = 2/3, shape = 21, color = "black") + 
  scale_size(range = c(.04, 8), name = "Body Mass (g)") 

ggp2_grp_bubble + 
  labs_grp_bubble
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_grp_bubble
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_grp_bubble <- labs(
  title = "Bill Length vs. Flipper Length",
  x = "Bill Length (mm)", y = "Flipper length (mm)", 
  size = "Body Mass (g)")

ggp2_grp_bubble <- penguins |> 
  ggplot(aes(
    x = bill_length_mm, y = flipper_length_mm)) + 
  geom_point(
    aes(size = body_mass_g, fill = species), 
        alpha = 2/3, shape = 21, color = "black") + 
  scale_size(range = c(.04, 8), name = "Body Mass (g)") 

ggp2_grp_bubble + 
  labs_grp_bubble
```

::::

## ALLUVIAL GRAPHS

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

An alluvial graph displays the changes in composition or flow over time or across multiple categories. 

We can build bump charts in `ggplot2` with the [`ggalluvial` package:](https://corybrunson.github.io/ggalluvial/)  
::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_alluvial
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
devtools::install_github("corybrunson/ggalluvial")
library(ggalluvial)
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Below we create a wide example of the `penguins` data (as `peng_wide`)
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_alluvial
#| eval: true
#| echo: true
peng_wide <- penguins |> 
  drop_na() |> 
  count(year, island, sex, species) |> 
  mutate(year = factor(year)) |> 
  rename(freq = n)
glimpse(peng_wide)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels (with `ggtitle()`, `ylab()`, and `labs()`)

Add `scale_x_discrete()` with the `limits` set to `"Year"`, `"Island"` and `"Species"`, and `expand` to `0.1` and `0.07`

Add `geom_alluvium()` with `fill` set to the `sex` variable and `geom_stratum()`

Add `geom_text()`, with `stat` set to `stratum` and label set to `after_stat(stratum)` (*inside* `aes()`) 


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_alluvial
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_alluvial <- ggtitle(label = "Palmer Penguins", 
    subtitle = "Stratified by year, island and species")
labs_alluvial_y <- ylab("Frequency") 
labs_alluvial_fill <- labs(fill = "Sex")

ggp2_alluvial_w <- ggplot(data = peng_wide,
  aes(axis1 = year, axis2 = island,
      axis3 = species, y = freq)) +
  scale_x_discrete(
    limits = c("Year", "Island", "Species"),
    expand = c(0.1, 0.07)) +
  geom_alluvium(aes(fill = sex)) +
  geom_stratum() +
  geom_text(stat = "stratum", 
    aes(label = after_stat(stratum)))

ggp2_alluvial_w + 
  labs_alluvial + 
  labs_alluvial_y + 
  labs_alluvial_fill
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.85em;"}
The `ggalluvial` functions can handle wide or long data. 
:::

```{r}
#| label: create_graph_alluvial
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_alluvial <- ggtitle(label = "Palmer Penguins", 
    subtitle = "Stratified by year, island and species")
labs_alluvial_y <- ylab("Frequency") 
labs_alluvial_fill <- labs(fill = "Sex")

ggp2_alluvial_w <- ggplot(data = peng_wide,
  aes(axis1 = year, axis2 = island,
      axis3 = species, y = freq)) +
  scale_x_discrete(
    limits = c("Year", "Island", "Species"),
    expand = c(0.1, 0.07)) +
  geom_alluvium(aes(fill = sex)) +
  geom_stratum() +
  geom_text(stat = "stratum", 
    aes(label = after_stat(stratum)))

ggp2_alluvial_w + 
  labs_alluvial + 
  labs_alluvial_y + 
  labs_alluvial_fill
```

::::

### ALLUVIAL GRAPH (LODES FORM)

:::: {.panel-tabset}

### Data 

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Below we create `peng_lodes` from the `penguins` dataset using the   `to_lodes_form()` from the `ggalluvial` package.
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_alluvial_lf
#| eval: true
#| echo: true
peng_lodes <- penguins |> 
  select(Year = year, Island = island, 
         Species = species, Sex = sex) |> 
  drop_na() |> 
  count(Year, Island, Species, Sex) |> 
  mutate(Year = factor(Year)) |> 
  rename(Freqency = n) |> 
  ggalluvial::to_lodes_form(key = "Measure", axes = 1:3) 
glimpse(peng_lodes)
```
:::


### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels

Map `Measure` to `x`, `Frequency` to `y`, `stratum` to `stratum`, `alluvium` to `alluvium`, and `label` to `stratum`.

Add the `geom_alluvium()` and map `Sex` to `fill`  

Add the `geom_stratum()` and set the `width` to `0.45`  

Add `geom_text()` and set `stat` to `"stratum"`

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_alluvial_lf
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_alluvial <- ggtitle(label = "Palmer Penguins", 
    subtitle = "Stratified by year, island and species")

ggp2_alluvial_lf <- ggplot(data = peng_lodes,
  aes(x = Measure,
      y = Freqency,
      stratum = stratum,
      alluvium = alluvium,
      label = stratum)) +
  ggalluvial::geom_alluvium(aes(fill = Sex)) +
  ggalluvial::geom_stratum(width = 0.45) +
  geom_text(stat = "stratum")

ggp2_alluvial_lf + 
  labs_alluvial
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

::: {style="font-size: 0.85em;"}
Convert data to lodes form using `to_lodes_form()` from the `ggalluvial` package.
:::

```{r}
#| label: create_graph_alluvial_lf
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_alluvial <- ggtitle(label = "Palmer Penguins", 
    subtitle = "Stratified by year, island and species")

ggp2_alluvial_lf <- ggplot(data = peng_lodes,
  aes(x = Measure,
      y = Freqency,
      stratum = stratum,
      alluvium = alluvium,
      label = stratum)) +
  ggalluvial::geom_alluvium(aes(fill = Sex)) +
  ggalluvial::geom_stratum(width = 0.45) +
  geom_text(stat = "stratum")

ggp2_alluvial_lf + 
  labs_alluvial
```

::::

## BUMP CHART

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::

Bump charts show how numerical (ranked) values change over time for different categories (or groups). Differences are represented with connecting lines (along the `y` axis) that cover the full timescale (along the `x` axis).

We can build bump charts in `ggplot2` with the [`ggbump` package:](https://github.com/davidsjoberg/ggbump)  



::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_bump
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
devtools::install_github("davidsjoberg/ggbump")
library(ggbump)
install.packages("fivethirtyeight")
library(fivethirtyeight) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
We'll use the `fivethirtyeight::tv_hurricanes` data, but slightly restructured and filtered. 
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_bump
#| eval: true
#| echo: true
fivethirtyeight::tv_hurricanes |> 
  filter(date > as_date("2017-09-15")) |> 
  pivot_longer(cols = -date, 
    names_to = 'hurricane', 
    values_to = 'value') |> 
  group_by(date) |>
  mutate(rank = rank(value, 
    ties.method = "random")) |> 
  ungroup() -> tidy_hurricanes
glimpse(tidy_hurricanes)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels

Map date to the `x`, `rank` to the `y`, and `hurricane` to `color`

Add `ggbump::geom_bump()` and set `size` to `2`

Move legend to bottom with 

:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_bump
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_bump <- labs(title = "TV News Hurricane Mentions",   
  subtitle = "Between Sep 15-25th, 2017", 
  x = "Date", y = "Rank", 
  color = "Hurricanes")
ggp2_bump <- ggplot(tidy_hurricanes, 
    aes(x = date, 
      y = rank, 
      color = hurricane)) +
    ggbump::geom_bump(size = 2) + 
    theme(legend.position = "bottom")

ggp2_bump + 
  labs_bump
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_bump
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_bump <- labs(title = "TV News Hurricane Mentions",   
  subtitle = "Between Sep 15-25th, 2017", 
  x = "Date", y = "Rank", 
  color = "Hurricanes")
ggp2_bump <- ggplot(tidy_hurricanes, 
    aes(x = date, 
      y = rank, 
      color = hurricane)) +
    ggbump::geom_bump(size = 2) + 
    theme(legend.position = "bottom")

ggp2_bump + 
  labs_bump
```

::::

<!--

## Graph_Description

:::: {.callout-note}
::: {style="font-size: 1.25em; color: #ffd500;"}
**When would I use this graph?**
:::


Description



More_description.
::::


:::: {.panel-tabset}

### Packages

::: {style="font-size: 0.90em; color: #1e83c8;"}
**PACKAGES:**
:::

::: {style="font-size: 0.85em;"}
Install packages.
:::


::: {style="font-size: 0.75em;"}
```{r}
#| label: pkg_code_
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| results: hide
install.packages("palmerpenguins")
library(palmerpenguins) 
library(ggplot2)
```
:::

### Data

::: {style="font-size: 0.90em; color: #1e83c8;"}
**DATA:**
:::

::: {style="font-size: 0.85em;"}
Description of data
:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: data_code_
#| eval: true
#| echo: true
penguins <- palmerpenguins::penguins
glimpse(penguins)
```
:::
::::

:::: {.panel-tabset}

### Code

::: {style="font-size: 0.90em; color: #1e83c8;"}
**CODE:**
:::

::: {style="font-size: 0.85em;"}

Create labels


:::

::: {style="font-size: 0.75em;"}
```{r}
#| label: code_graph_
#| eval: false
#| echo: true 
#| warning: false
#| message: false
labs_scatter <- labs(
  title = "Bill Length vs. Flipper Length",
  x = "Bill Length (mm)", y = "Flipper length (mm)")
ggp2_scatter <- penguins |>
  ggplot(
    aes(x = bill_length_mm, 
      y = flipper_length_mm)) +
  geom_point()

ggp2_scatter + 
  labs_scatter
```
:::

### Graph

::: {style="font-size: 0.90em; color: #1e83c8;"}
**GRAPH:**
:::

```{r}
#| label: create_graph_
#| eval: true
#| echo: false
#| warning: false
#| message: false
labs_scatter <- labs(
    title = "Bill Length vs. Flipper Length",
    x = "Bill Length (mm)", 
    y = "Flipper length (mm)")
ggp2_scatter <- penguins |> 
  ggplot(aes(x = bill_length_mm,
      y = flipper_length_mm)) + 
  geom_point() 
ggp2_scatter + 
  labs_scatter
```

::::

-->
